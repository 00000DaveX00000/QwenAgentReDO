var xi = Object.defineProperty;
var wi = (a, e, t) => e in a ? xi(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t;
var J = (a, e, t) => wi(a, typeof e != "symbol" ? e + "" : e, t);
import { i as Ai, a as Jt, r as Si, w as tt, g as Fi, d as Ei, b as M0, c as $r, e as _r } from "./Index-IL5iDRvK.js";
const a0 = window.ms_globals.React, hr = window.ms_globals.React.useMemo, lt = window.ms_globals.React.useState, w0 = window.ms_globals.React.useEffect, ki = window.ms_globals.React.forwardRef, B0 = window.ms_globals.React.useRef, Di = window.ms_globals.React.useCallback, Kt = window.ms_globals.ReactDOM.createPortal, Ci = window.ms_globals.internalContext.useContextPropsContext, Ti = window.ms_globals.antdIcons.CheckOutlined, Mi = window.ms_globals.antdIcons.CopyOutlined;
var zi = /\s/;
function Bi(a) {
  for (var e = a.length; e-- && zi.test(a.charAt(e)); )
    ;
  return e;
}
var Ri = /^\s+/;
function Ii(a) {
  return a && a.slice(0, Bi(a) + 1).replace(Ri, "");
}
var Gr = NaN, Ni = /^[-+]0x[0-9a-f]+$/i, Li = /^0b[01]+$/i, Oi = /^0o[0-7]+$/i, qi = parseInt;
function Ur(a) {
  if (typeof a == "number")
    return a;
  if (Ai(a))
    return Gr;
  if (Jt(a)) {
    var e = typeof a.valueOf == "function" ? a.valueOf() : a;
    a = Jt(e) ? e + "" : e;
  }
  if (typeof a != "string")
    return a === 0 ? a : +a;
  a = Ii(a);
  var t = Li.test(a);
  return t || Oi.test(a) ? qi(a.slice(2), t ? 2 : 8) : Ni.test(a) ? Gr : +a;
}
var Mt = function() {
  return Si.Date.now();
}, Pi = "Expected a function", Hi = Math.max, $i = Math.min;
function _i(a, e, t) {
  var r, n, i, s, u, c, m = 0, p = !1, g = !1, x = !0;
  if (typeof a != "function")
    throw new TypeError(Pi);
  e = Ur(e) || 0, Jt(t) && (p = !!t.leading, g = "maxWait" in t, i = g ? Hi(Ur(t.maxWait) || 0, e) : i, x = "trailing" in t ? !!t.trailing : x);
  function b(F) {
    var B = r, O = n;
    return r = n = void 0, m = F, s = a.apply(O, B), s;
  }
  function T(F) {
    return m = F, u = setTimeout(M, e), p ? b(F) : s;
  }
  function S(F) {
    var B = F - c, O = F - m, N = e - B;
    return g ? $i(N, i - O) : N;
  }
  function C(F) {
    var B = F - c, O = F - m;
    return c === void 0 || B >= e || B < 0 || g && O >= i;
  }
  function M() {
    var F = Mt();
    if (C(F))
      return w(F);
    u = setTimeout(M, S(F));
  }
  function w(F) {
    return u = void 0, x && r ? b(F) : (r = n = void 0, s);
  }
  function k() {
    u !== void 0 && clearTimeout(u), m = 0, r = c = n = u = void 0;
  }
  function A() {
    return u === void 0 ? s : w(Mt());
  }
  function E() {
    var F = Mt(), B = C(F);
    if (r = arguments, n = this, c = F, B) {
      if (u === void 0)
        return T(c);
      if (g)
        return clearTimeout(u), u = setTimeout(M, e), b(c);
    }
    return u === void 0 && (u = setTimeout(M, e)), s;
  }
  return E.cancel = k, E.flush = A, E;
}
var Xa = {
  exports: {}
}, gt = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Gi = a0, Ui = Symbol.for("react.element"), Vi = Symbol.for("react.fragment"), ji = Object.prototype.hasOwnProperty, Wi = Gi.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, Xi = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};
function Ya(a, e, t) {
  var r, n = {}, i = null, s = null;
  t !== void 0 && (i = "" + t), e.key !== void 0 && (i = "" + e.key), e.ref !== void 0 && (s = e.ref);
  for (r in e) ji.call(e, r) && !Xi.hasOwnProperty(r) && (n[r] = e[r]);
  if (a && a.defaultProps) for (r in e = a.defaultProps, e) n[r] === void 0 && (n[r] = e[r]);
  return {
    $$typeof: Ui,
    type: a,
    key: i,
    ref: s,
    props: n,
    _owner: Wi.current
  };
}
gt.Fragment = Vi;
gt.jsx = Ya;
gt.jsxs = Ya;
Xa.exports = gt;
var Ie = Xa.exports;
const {
  SvelteComponent: Yi,
  assign: Vr,
  binding_callbacks: jr,
  check_outros: Zi,
  children: Za,
  claim_element: Ka,
  claim_space: Ki,
  component_subscribe: Wr,
  compute_slots: Ji,
  create_slot: Qi,
  detach: k0,
  element: Ja,
  empty: Xr,
  exclude_internal_props: Yr,
  get_all_dirty_from_scope: es,
  get_slot_changes: ts,
  group_outros: rs,
  init: as,
  insert_hydration: rt,
  safe_not_equal: ns,
  set_custom_element_data: Qa,
  space: is,
  transition_in: at,
  transition_out: Qt,
  update_slot_base: ss
} = window.__gradio__svelte__internal, {
  beforeUpdate: ls,
  getContext: us,
  onDestroy: os,
  setContext: cs
} = window.__gradio__svelte__internal;
function Zr(a) {
  let e, t;
  const r = (
    /*#slots*/
    a[7].default
  ), n = Qi(
    r,
    a,
    /*$$scope*/
    a[6],
    null
  );
  return {
    c() {
      e = Ja("svelte-slot"), n && n.c(), this.h();
    },
    l(i) {
      e = Ka(i, "SVELTE-SLOT", {
        class: !0
      });
      var s = Za(e);
      n && n.l(s), s.forEach(k0), this.h();
    },
    h() {
      Qa(e, "class", "svelte-1rt0kpf");
    },
    m(i, s) {
      rt(i, e, s), n && n.m(e, null), a[9](e), t = !0;
    },
    p(i, s) {
      n && n.p && (!t || s & /*$$scope*/
      64) && ss(
        n,
        r,
        i,
        /*$$scope*/
        i[6],
        t ? ts(
          r,
          /*$$scope*/
          i[6],
          s,
          null
        ) : es(
          /*$$scope*/
          i[6]
        ),
        null
      );
    },
    i(i) {
      t || (at(n, i), t = !0);
    },
    o(i) {
      Qt(n, i), t = !1;
    },
    d(i) {
      i && k0(e), n && n.d(i), a[9](null);
    }
  };
}
function hs(a) {
  let e, t, r, n, i = (
    /*$$slots*/
    a[4].default && Zr(a)
  );
  return {
    c() {
      e = Ja("react-portal-target"), t = is(), i && i.c(), r = Xr(), this.h();
    },
    l(s) {
      e = Ka(s, "REACT-PORTAL-TARGET", {
        class: !0
      }), Za(e).forEach(k0), t = Ki(s), i && i.l(s), r = Xr(), this.h();
    },
    h() {
      Qa(e, "class", "svelte-1rt0kpf");
    },
    m(s, u) {
      rt(s, e, u), a[8](e), rt(s, t, u), i && i.m(s, u), rt(s, r, u), n = !0;
    },
    p(s, [u]) {
      /*$$slots*/
      s[4].default ? i ? (i.p(s, u), u & /*$$slots*/
      16 && at(i, 1)) : (i = Zr(s), i.c(), at(i, 1), i.m(r.parentNode, r)) : i && (rs(), Qt(i, 1, 1, () => {
        i = null;
      }), Zi());
    },
    i(s) {
      n || (at(i), n = !0);
    },
    o(s) {
      Qt(i), n = !1;
    },
    d(s) {
      s && (k0(e), k0(t), k0(r)), a[8](null), i && i.d(s);
    }
  };
}
function Kr(a) {
  const {
    svelteInit: e,
    ...t
  } = a;
  return t;
}
function ms(a, e, t) {
  let r, n, {
    $$slots: i = {},
    $$scope: s
  } = e;
  const u = Ji(i);
  let {
    svelteInit: c
  } = e;
  const m = tt(Kr(e)), p = tt();
  Wr(a, p, (A) => t(0, r = A));
  const g = tt();
  Wr(a, g, (A) => t(1, n = A));
  const x = [], b = us("$$ms-gr-react-wrapper"), {
    slotKey: T,
    slotIndex: S,
    subSlotIndex: C
  } = Fi() || {}, M = c({
    parent: b,
    props: m,
    target: p,
    slot: g,
    slotKey: T,
    slotIndex: S,
    subSlotIndex: C,
    onDestroy(A) {
      x.push(A);
    }
  });
  cs("$$ms-gr-react-wrapper", M), ls(() => {
    m.set(Kr(e));
  }), os(() => {
    x.forEach((A) => A());
  });
  function w(A) {
    jr[A ? "unshift" : "push"](() => {
      r = A, p.set(r);
    });
  }
  function k(A) {
    jr[A ? "unshift" : "push"](() => {
      n = A, g.set(n);
    });
  }
  return a.$$set = (A) => {
    t(17, e = Vr(Vr({}, e), Yr(A))), "svelteInit" in A && t(5, c = A.svelteInit), "$$scope" in A && t(6, s = A.$$scope);
  }, e = Yr(e), [r, n, p, g, u, c, s, i, w, k];
}
class ds extends Yi {
  constructor(e) {
    super(), as(this, e, ms, hs, ns, {
      svelteInit: 5
    });
  }
}
const {
  SvelteComponent: io
} = window.__gradio__svelte__internal, Jr = window.ms_globals.rerender, zt = window.ms_globals.tree;
function ps(a, e = {}) {
  function t(r) {
    const n = tt(), i = new ds({
      ...r,
      props: {
        svelteInit(s) {
          window.ms_globals.autokey += 1;
          const u = {
            key: window.ms_globals.autokey,
            svelteInstance: n,
            reactComponent: a,
            props: s.props,
            slot: s.slot,
            target: s.target,
            slotIndex: s.slotIndex,
            subSlotIndex: s.subSlotIndex,
            ignore: e.ignore,
            slotKey: s.slotKey,
            nodes: []
          }, c = s.parent ?? zt;
          return c.nodes = [...c.nodes, u], Jr({
            createPortal: Kt,
            node: zt
          }), s.onDestroy(() => {
            c.nodes = c.nodes.filter((m) => m.svelteInstance !== n), Jr({
              createPortal: Kt,
              node: zt
            });
          }), u;
        },
        ...r.props
      }
    });
    return n.set(i), i;
  }
  return new Promise((r) => {
    window.ms_globals.initializePromise.then(() => {
      r(t);
    });
  });
}
function fs(a) {
  const [e, t] = lt(() => M0(a));
  return w0(() => {
    let r = !0;
    return a.subscribe((i) => {
      r && (r = !1, i === e) || t(i);
    });
  }, [a]), e;
}
function gs(a) {
  const e = hr(() => Ei(a, (t) => t), [a]);
  return fs(e);
}
const vs = ["animationIterationCount", "borderImageOutset", "borderImageSlice", "borderImageWidth", "boxFlex", "boxFlexGroup", "boxOrdinalGroup", "columnCount", "columns", "flex", "flexGrow", "flexPositive", "flexShrink", "flexNegative", "flexOrder", "gridArea", "gridColumn", "gridColumnEnd", "gridColumnStart", "gridRow", "gridRowEnd", "gridRowStart", "lineClamp", "lineHeight", "opacity", "order", "orphans", "tabSize", "widows", "zIndex", "zoom", "fontWeight", "letterSpacing", "lineHeight"];
function bs(a) {
  return a ? Object.keys(a).reduce((e, t) => {
    const r = a[t];
    return e[t] = er(t, r), e;
  }, {}) : {};
}
function er(a, e) {
  return typeof e == "number" && !vs.includes(a) ? e + "px" : e;
}
function tr(a) {
  const e = [], t = a.cloneNode(!1);
  if (a._reactElement) {
    const n = a0.Children.toArray(a._reactElement.props.children).map((i) => {
      if (a0.isValidElement(i) && i.props.__slot__) {
        const {
          portals: s,
          clonedElement: u
        } = tr(i.props.el);
        return a0.cloneElement(i, {
          ...i.props,
          el: u,
          children: [...a0.Children.toArray(i.props.children), ...s]
        });
      }
      return null;
    });
    return n.originalChildren = a._reactElement.props.children, e.push(Kt(a0.cloneElement(a._reactElement, {
      ...a._reactElement.props,
      children: n
    }), t)), {
      clonedElement: t,
      portals: e
    };
  }
  Object.keys(a.getEventListeners()).forEach((n) => {
    a.getEventListeners(n).forEach(({
      listener: s,
      type: u,
      useCapture: c
    }) => {
      t.addEventListener(u, s, c);
    });
  });
  const r = Array.from(a.childNodes);
  for (let n = 0; n < r.length; n++) {
    const i = r[n];
    if (i.nodeType === 1) {
      const {
        clonedElement: s,
        portals: u
      } = tr(i);
      e.push(...u), t.appendChild(s);
    } else i.nodeType === 3 && t.appendChild(i.cloneNode());
  }
  return {
    clonedElement: t,
    portals: e
  };
}
function ys(a, e) {
  a && (typeof a == "function" ? a(e) : a.current = e);
}
const xs = ki(({
  slot: a,
  clone: e,
  className: t,
  style: r,
  observeAttributes: n
}, i) => {
  const s = B0(), [u, c] = lt([]), {
    forceClone: m
  } = Ci(), p = m ? !0 : e;
  return w0(() => {
    var S;
    if (!s.current || !a)
      return;
    let g = a;
    function x() {
      let C = g;
      if (g.tagName.toLowerCase() === "svelte-slot" && g.children.length === 1 && g.children[0] && (C = g.children[0], C.tagName.toLowerCase() === "react-portal-target" && C.children[0] && (C = C.children[0])), ys(i, C), t && C.classList.add(...t.split(" ")), r) {
        const M = bs(r);
        Object.keys(M).forEach((w) => {
          C.style[w] = M[w];
        });
      }
    }
    let b = null, T = null;
    if (p && window.MutationObserver) {
      let C = function() {
        var A, E, F;
        (A = s.current) != null && A.contains(g) && ((E = s.current) == null || E.removeChild(g));
        const {
          portals: w,
          clonedElement: k
        } = tr(a);
        g = k, c(w), g.style.display = "contents", T && clearTimeout(T), T = setTimeout(() => {
          x();
        }, 50), (F = s.current) == null || F.appendChild(g);
      };
      C();
      const M = _i(() => {
        C(), b == null || b.disconnect(), b == null || b.observe(a, {
          childList: !0,
          subtree: !0
          // attributes: observeAttributes ?? (forceClone ? true : false),
        });
      }, 50);
      b = new window.MutationObserver(M), b.observe(a, {
        attributes: !0,
        childList: !0,
        subtree: !0
      });
    } else
      g.style.display = "contents", x(), (S = s.current) == null || S.appendChild(g);
    return () => {
      var C, M;
      g.style.display = "", (C = s.current) != null && C.contains(g) && ((M = s.current) == null || M.removeChild(g)), b == null || b.disconnect();
    };
  }, [a, p, t, r, i, n, m]), a0.createElement("react-child", {
    ref: s,
    style: {
      display: "contents"
    }
  }, ...u);
});
function G0(a) {
  const e = B0(a);
  return e.current = a, Di((...t) => {
    var r;
    return (r = e.current) == null ? void 0 : r.call(e, ...t);
  }, []);
}
function ws(a, e) {
  const t = hr(() => a0.Children.toArray(a.originalChildren || a).filter((i) => i.props.node && !i.props.node.ignore && e === i.props.nodeSlotKey).sort((i, s) => {
    if (i.props.node.slotIndex && s.props.node.slotIndex) {
      const u = M0(i.props.node.slotIndex) || 0, c = M0(s.props.node.slotIndex) || 0;
      return u - c === 0 && i.props.node.subSlotIndex && s.props.node.subSlotIndex ? (M0(i.props.node.subSlotIndex) || 0) - (M0(s.props.node.subSlotIndex) || 0) : u - c;
    }
    return 0;
  }).map((i) => i.props.node.target), [a, e]);
  return gs(t);
}
class ke {
  // The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  constructor(e, t, r) {
    this.lexer = void 0, this.start = void 0, this.end = void 0, this.lexer = e, this.start = t, this.end = r;
  }
  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */
  static range(e, t) {
    return t ? !e || !e.loc || !t.loc || e.loc.lexer !== t.loc.lexer ? null : new ke(e.loc.lexer, e.loc.start, t.loc.end) : e && e.loc;
  }
}
class ze {
  // don't expand the token
  // used in \noexpand
  constructor(e, t) {
    this.text = void 0, this.loc = void 0, this.noexpand = void 0, this.treatAsRelax = void 0, this.text = e, this.loc = t;
  }
  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */
  range(e, t) {
    return new ze(t, ke.range(this, e));
  }
}
class I {
  // Error start position based on passed-in Token or ParseNode.
  // Length of affected text based on passed-in Token or ParseNode.
  // The underlying error message without any context added.
  constructor(e, t) {
    this.name = void 0, this.position = void 0, this.length = void 0, this.rawMessage = void 0;
    var r = "KaTeX parse error: " + e, n, i, s = t && t.loc;
    if (s && s.start <= s.end) {
      var u = s.lexer.input;
      n = s.start, i = s.end, n === u.length ? r += " at end of input: " : r += " at position " + (n + 1) + ": ";
      var c = u.slice(n, i).replace(/[^]/g, "$&̲"), m;
      n > 15 ? m = "…" + u.slice(n - 15, n) : m = u.slice(0, n);
      var p;
      i + 15 < u.length ? p = u.slice(i, i + 15) + "…" : p = u.slice(i), r += m + c + p;
    }
    var g = new Error(r);
    return g.name = "ParseError", g.__proto__ = I.prototype, g.position = n, n != null && i != null && (g.length = i - n), g.rawMessage = e, g;
  }
}
I.prototype.__proto__ = Error.prototype;
var ks = function(e, t) {
  return e.indexOf(t) !== -1;
}, Ds = function(e, t) {
  return e === void 0 ? t : e;
}, As = /([A-Z])/g, Ss = function(e) {
  return e.replace(As, "-$1").toLowerCase();
}, Fs = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  '"': "&quot;",
  "'": "&#x27;"
}, Es = /[&><"']/g;
function Cs(a) {
  return String(a).replace(Es, (e) => Fs[e]);
}
var en = function a(e) {
  return e.type === "ordgroup" || e.type === "color" ? e.body.length === 1 ? a(e.body[0]) : e : e.type === "font" ? a(e.body) : e;
}, Ts = function(e) {
  var t = en(e);
  return t.type === "mathord" || t.type === "textord" || t.type === "atom";
}, Ms = function(e) {
  if (!e)
    throw new Error("Expected non-null, but got " + String(e));
  return e;
}, zs = function(e) {
  var t = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(e);
  return t ? t[2] !== ":" || !/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(t[1]) ? null : t[1].toLowerCase() : "_relative";
}, H = {
  contains: ks,
  deflt: Ds,
  escape: Cs,
  hyphenate: Ss,
  getBaseElem: en,
  isCharacterBox: Ts,
  protocolFromUrl: zs
}, Bt = {
  displayMode: {
    type: "boolean",
    description: "Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",
    cli: "-d, --display-mode"
  },
  output: {
    type: {
      enum: ["htmlAndMathml", "html", "mathml"]
    },
    description: "Determines the markup language of the output.",
    cli: "-F, --format <type>"
  },
  leqno: {
    type: "boolean",
    description: "Render display math in leqno style (left-justified tags)."
  },
  fleqn: {
    type: "boolean",
    description: "Render display math flush left."
  },
  throwOnError: {
    type: "boolean",
    default: !0,
    cli: "-t, --no-throw-on-error",
    cliDescription: "Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."
  },
  errorColor: {
    type: "string",
    default: "#cc0000",
    cli: "-c, --error-color <color>",
    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",
    cliProcessor: (a) => "#" + a
  },
  macros: {
    type: "object",
    cli: "-m, --macro <def>",
    cliDescription: "Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",
    cliDefault: [],
    cliProcessor: (a, e) => (e.push(a), e)
  },
  minRuleThickness: {
    type: "number",
    description: "Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",
    processor: (a) => Math.max(0, a),
    cli: "--min-rule-thickness <size>",
    cliProcessor: parseFloat
  },
  colorIsTextColor: {
    type: "boolean",
    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",
    cli: "-b, --color-is-text-color"
  },
  strict: {
    type: [{
      enum: ["warn", "ignore", "error"]
    }, "boolean", "function"],
    description: "Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",
    cli: "-S, --strict",
    cliDefault: !1
  },
  trust: {
    type: ["boolean", "function"],
    description: "Trust the input, enabling all HTML features such as \\url.",
    cli: "-T, --trust"
  },
  maxSize: {
    type: "number",
    default: 1 / 0,
    description: "If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",
    processor: (a) => Math.max(0, a),
    cli: "-s, --max-size <n>",
    cliProcessor: parseInt
  },
  maxExpand: {
    type: "number",
    default: 1e3,
    description: "Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",
    processor: (a) => Math.max(0, a),
    cli: "-e, --max-expand <n>",
    cliProcessor: (a) => a === "Infinity" ? 1 / 0 : parseInt(a)
  },
  globalGroup: {
    type: "boolean",
    cli: !1
  }
};
function Bs(a) {
  if (a.default)
    return a.default;
  var e = a.type, t = Array.isArray(e) ? e[0] : e;
  if (typeof t != "string")
    return t.enum[0];
  switch (t) {
    case "boolean":
      return !1;
    case "string":
      return "";
    case "number":
      return 0;
    case "object":
      return {};
  }
}
class Rs {
  constructor(e) {
    this.displayMode = void 0, this.output = void 0, this.leqno = void 0, this.fleqn = void 0, this.throwOnError = void 0, this.errorColor = void 0, this.macros = void 0, this.minRuleThickness = void 0, this.colorIsTextColor = void 0, this.strict = void 0, this.trust = void 0, this.maxSize = void 0, this.maxExpand = void 0, this.globalGroup = void 0, e = e || {};
    for (var t in Bt)
      if (Bt.hasOwnProperty(t)) {
        var r = Bt[t];
        this[t] = e[t] !== void 0 ? r.processor ? r.processor(e[t]) : e[t] : Bs(r);
      }
  }
  /**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */
  reportNonstrict(e, t, r) {
    var n = this.strict;
    if (typeof n == "function" && (n = n(e, t, r)), !(!n || n === "ignore")) {
      if (n === !0 || n === "error")
        throw new I("LaTeX-incompatible input and strict mode is set to 'error': " + (t + " [" + e + "]"), r);
      n === "warn" ? typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (t + " [" + e + "]")) : typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + n + "': " + t + " [" + e + "]"));
    }
  }
  /**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */
  useStrictBehavior(e, t, r) {
    var n = this.strict;
    if (typeof n == "function")
      try {
        n = n(e, t, r);
      } catch {
        n = "error";
      }
    return !n || n === "ignore" ? !1 : n === !0 || n === "error" ? !0 : n === "warn" ? (typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (t + " [" + e + "]")), !1) : (typeof console < "u" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + n + "': " + t + " [" + e + "]")), !1);
  }
  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  isTrusted(e) {
    if (e.url && !e.protocol) {
      var t = H.protocolFromUrl(e.url);
      if (t == null)
        return !1;
      e.protocol = t;
    }
    var r = typeof this.trust == "function" ? this.trust(e) : this.trust;
    return !!r;
  }
}
class e0 {
  constructor(e, t, r) {
    this.id = void 0, this.size = void 0, this.cramped = void 0, this.id = e, this.size = t, this.cramped = r;
  }
  /**
   * Get the style of a superscript given a base in the current style.
   */
  sup() {
    return He[Is[this.id]];
  }
  /**
   * Get the style of a subscript given a base in the current style.
   */
  sub() {
    return He[Ns[this.id]];
  }
  /**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */
  fracNum() {
    return He[Ls[this.id]];
  }
  /**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */
  fracDen() {
    return He[Os[this.id]];
  }
  /**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */
  cramp() {
    return He[qs[this.id]];
  }
  /**
   * Get a text or display version of this style.
   */
  text() {
    return He[Ps[this.id]];
  }
  /**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */
  isTight() {
    return this.size >= 2;
  }
}
var mr = 0, ut = 1, D0 = 2, Xe = 3, L0 = 4, Ce = 5, A0 = 6, ge = 7, He = [new e0(mr, 0, !1), new e0(ut, 0, !0), new e0(D0, 1, !1), new e0(Xe, 1, !0), new e0(L0, 2, !1), new e0(Ce, 2, !0), new e0(A0, 3, !1), new e0(ge, 3, !0)], Is = [L0, Ce, L0, Ce, A0, ge, A0, ge], Ns = [Ce, Ce, Ce, Ce, ge, ge, ge, ge], Ls = [D0, Xe, L0, Ce, A0, ge, A0, ge], Os = [Xe, Xe, Ce, Ce, ge, ge, ge, ge], qs = [ut, ut, Xe, Xe, Ce, Ce, ge, ge], Ps = [mr, ut, D0, Xe, D0, Xe, D0, Xe], _ = {
  DISPLAY: He[mr],
  TEXT: He[D0],
  SCRIPT: He[L0],
  SCRIPTSCRIPT: He[A0]
}, rr = [{
  // Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name: "latin",
  blocks: [
    [256, 591],
    // Latin Extended-A and Latin Extended-B
    [768, 879]
    // Combining Diacritical marks
  ]
}, {
  // The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name: "cyrillic",
  blocks: [[1024, 1279]]
}, {
  // Armenian
  name: "armenian",
  blocks: [[1328, 1423]]
}, {
  // The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name: "brahmic",
  blocks: [[2304, 4255]]
}, {
  name: "georgian",
  blocks: [[4256, 4351]]
}, {
  // Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name: "cjk",
  blocks: [
    [12288, 12543],
    // CJK symbols and punctuation, Hiragana, Katakana
    [19968, 40879],
    // CJK ideograms
    [65280, 65376]
    // Fullwidth punctuation
    // TODO: add halfwidth Katakana and Romanji glyphs
  ]
}, {
  // Korean
  name: "hangul",
  blocks: [[44032, 55215]]
}];
function Hs(a) {
  for (var e = 0; e < rr.length; e++)
    for (var t = rr[e], r = 0; r < t.blocks.length; r++) {
      var n = t.blocks[r];
      if (a >= n[0] && a <= n[1])
        return t.name;
    }
  return null;
}
var nt = [];
rr.forEach((a) => a.blocks.forEach((e) => nt.push(...e)));
function tn(a) {
  for (var e = 0; e < nt.length; e += 2)
    if (a >= nt[e] && a <= nt[e + 1])
      return !0;
  return !1;
}
var x0 = 80, $s = function(e, t) {
  return "M95," + (622 + e + t) + `
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l` + e / 2.075 + " -" + e + `
c5.3,-9.3,12,-14,20,-14
H400000v` + (40 + e) + `H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M` + (834 + e) + " " + t + "h400000v" + (40 + e) + "h-400000z";
}, _s = function(e, t) {
  return "M263," + (601 + e + t) + `c0.7,0,18,39.7,52,119
c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120
c340,-704.7,510.7,-1060.3,512,-1067
l` + e / 2.084 + " -" + e + `
c4.7,-7.3,11,-11,19,-11
H40000v` + (40 + e) + `H1012.3
s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232
c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1
s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26
c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z
M` + (1001 + e) + " " + t + "h400000v" + (40 + e) + "h-400000z";
}, Gs = function(e, t) {
  return "M983 " + (10 + e + t) + `
l` + e / 3.13 + " -" + e + `
c4,-6.7,10,-10,18,-10 H400000v` + (40 + e) + `
H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7
s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744
c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30
c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722
c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5
c53.7,-170.3,84.5,-266.8,92.5,-289.5z
M` + (1001 + e) + " " + t + "h400000v" + (40 + e) + "h-400000z";
}, Us = function(e, t) {
  return "M424," + (2398 + e + t) + `
c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514
c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20
s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121
s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081
l` + e / 4.223 + " -" + e + `c4,-6.7,10,-10,18,-10 H400000
v` + (40 + e) + `H1014.6
s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185
c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2z M` + (1001 + e) + " " + t + `
h400000v` + (40 + e) + "h-400000z";
}, Vs = function(e, t) {
  return "M473," + (2713 + e + t) + `
c339.3,-1799.3,509.3,-2700,510,-2702 l` + e / 5.298 + " -" + e + `
c3.3,-7.3,9.3,-11,18,-11 H400000v` + (40 + e) + `H1017.7
s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200
c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26
s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,
606zM` + (1001 + e) + " " + t + "h400000v" + (40 + e) + "H1017.7z";
}, js = function(e) {
  var t = e / 2;
  return "M400000 " + e + " H0 L" + t + " 0 l65 45 L145 " + (e - 80) + " H400000z";
}, Ws = function(e, t, r) {
  var n = r - 54 - t - e;
  return "M702 " + (e + t) + "H400000" + (40 + e) + `
H742v` + n + `l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1
h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170
c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667
219 661 l218 661zM702 ` + t + "H400000v" + (40 + e) + "H742z";
}, Xs = function(e, t, r) {
  t = 1e3 * t;
  var n = "";
  switch (e) {
    case "sqrtMain":
      n = $s(t, x0);
      break;
    case "sqrtSize1":
      n = _s(t, x0);
      break;
    case "sqrtSize2":
      n = Gs(t, x0);
      break;
    case "sqrtSize3":
      n = Us(t, x0);
      break;
    case "sqrtSize4":
      n = Vs(t, x0);
      break;
    case "sqrtTall":
      n = Ws(t, x0, r);
  }
  return n;
}, Ys = function(e, t) {
  switch (e) {
    case "⎜":
      return "M291 0 H417 V" + t + " H291z M291 0 H417 V" + t + " H291z";
    case "∣":
      return "M145 0 H188 V" + t + " H145z M145 0 H188 V" + t + " H145z";
    case "∥":
      return "M145 0 H188 V" + t + " H145z M145 0 H188 V" + t + " H145z" + ("M367 0 H410 V" + t + " H367z M367 0 H410 V" + t + " H367z");
    case "⎟":
      return "M457 0 H583 V" + t + " H457z M457 0 H583 V" + t + " H457z";
    case "⎢":
      return "M319 0 H403 V" + t + " H319z M319 0 H403 V" + t + " H319z";
    case "⎥":
      return "M263 0 H347 V" + t + " H263z M263 0 H347 V" + t + " H263z";
    case "⎪":
      return "M384 0 H504 V" + t + " H384z M384 0 H504 V" + t + " H384z";
    case "⏐":
      return "M312 0 H355 V" + t + " H312z M312 0 H355 V" + t + " H312z";
    case "‖":
      return "M257 0 H300 V" + t + " H257z M257 0 H300 V" + t + " H257z" + ("M478 0 H521 V" + t + " H478z M478 0 H521 V" + t + " H478z");
    default:
      return "";
  }
}, Qr = {
  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow: `M262 157
l10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3
 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28
 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5
c2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5
 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87
-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7
-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z
m8 0v40h399730v-40zm0 194v40h399730v-40z`,
  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow: `M399738 392l
-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5
 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88
-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68
-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18
-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782
c-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3
-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z`,
  // leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow: `M400000 241H110l3-3c68.7-52.7 113.7-120
 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8
-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247
c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208
 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3
 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202
 l-3-3h399890zM100 241v40h399900v-40z`,
  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace: `M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z`,
  leftbraceunder: `M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z`,
  // overgroup is from the MnSymbol package (public domain)
  leftgroup: `M400000 80
H435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0
 435 0h399565z`,
  leftgroupunder: `M400000 262
H435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219
 435 219h399565z`,
  // Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3
-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5
-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7
-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z`,
  leftharpoonplus: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5
 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3
-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7
-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z
m0 0v40h400000v-40z`,
  leftharpoondown: `M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333
 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5
 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667
-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z`,
  leftharpoondownplus: `M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12
 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7
-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0
v40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z`,
  // hook is from glyph U+21A9 in font KaTeX Main
  lefthook: `M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5
-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3
-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21
 71.5 23h399859zM103 281v-40h399897v40z`,
  leftlinesegment: `M40 281 V428 H0 V94 H40 V241 H400000 v40z
M40 281 V428 H0 V94 H40 V241 H400000 v40z`,
  leftmapsto: `M40 281 V448H0V74H40V241H400000v40z
M40 281 V448H0V74H40V241H400000v40z`,
  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom: `M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23
-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8
c28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3
 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z`,
  longequal: `M0 50 h400000 v40H0z m0 194h40000v40H0z
M0 50 h400000 v40H0z m0 194h40000v40H0z`,
  midbrace: `M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z`,
  midbraceunder: `M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z`,
  oiintSize1: `M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6
-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z
m368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8
60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z`,
  oiintSize2: `M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8
-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z
m502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2
c0 110 84 276 504 276s502.4-166 502.4-276z`,
  oiiintSize1: `M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6
-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z
m525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0
85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z`,
  oiiintSize2: `M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8
-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z
m770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1
c0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z`,
  rightarrow: `M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z`,
  rightbrace: `M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z`,
  rightbraceunder: `M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z`,
  rightgroup: `M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0
 3-1 3-3v-38c-76-158-257-219-435-219H0z`,
  rightgroupunder: `M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18
 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z`,
  rightharpoon: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3
-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2
-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58
 69.2 92 94.5zm0 0v40h399900v-40z`,
  rightharpoonplus: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11
-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7
 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z
m0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z`,
  rightharpoondown: `M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8
 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5
-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95
-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z`,
  rightharpoondownplus: `M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8
 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3
 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3
-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z
m0-194v40h400000v-40zm0 0v40h400000v-40z`,
  righthook: `M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3
 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0
-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21
 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z`,
  rightlinesegment: `M399960 241 V94 h40 V428 h-40 V281 H0 v-40z
M399960 241 V94 h40 V428 h-40 V281 H0 v-40z`,
  rightToFrom: `M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23
 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32
-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142
-167z M100 147v40h399900v-40zM0 341v40h399900v-40z`,
  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow: `M0 167c68 40
 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69
-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3
-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19
-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101
 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z`,
  twoheadrightarrow: `M400000 167
c-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3
 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42
 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333
-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70
 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z`,
  // tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1: `M200 55.538c-77 0-168 73.953-177 73.953-3 0-7
-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0
 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0
 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128
-68.267.847-113-73.952-191-73.952z`,
  // ditto tilde2, tilde3, & tilde4
  tilde2: `M344 55.266c-142 0-300.638 81.316-311.5 86.418
-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9
 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114
c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751
 181.476 676 181.476c-149 0-189-126.21-332-126.21z`,
  tilde3: `M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457
-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0
 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697
 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696
 -338 0-409-156.573-744-156.573z`,
  tilde4: `M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345
-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409
 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9
 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409
 -175.236-744-175.236z`,
  // vec is from glyph U+20D7 in font KaTeX Main
  vec: `M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`,
  // widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1: `M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z`,
  // ditto widehat2, widehat3, & widehat4
  widehat2: `M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  widehat3: `M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  widehat4: `M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
  // widecheck paths are all inverted versions of widehat
  widecheck1: `M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,
-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z`,
  widecheck2: `M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  widecheck3: `M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  widecheck4: `M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
  // The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main
  baraboveleftarrow: `M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202
c4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5
c-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130
s-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47
121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6
s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11
c0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z
M100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z`,
  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar: `M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32
-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0
13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39
-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5
-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z`,
  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon: `M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17
c2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21
c-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40
c-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z
M0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z`,
  rightharpoonaboveshortbar: `M0,241 l0,40c399126,0,399993,0,399993,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z`,
  shortbaraboveleftharpoon: `M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,
1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,
-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z
M93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z`,
  shortrightharpoonabovebar: `M53,241l0,40c398570,0,399437,0,399437,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z`
}, Zs = function(e, t) {
  switch (e) {
    case "lbrack":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + t + ` v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v` + t + " v1759 h84z";
    case "rbrack":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + t + ` v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v` + t + " v1759 h84z";
    case "vert":
      return "M145 15 v585 v" + t + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -t + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v` + t + " v585 h43z";
    case "doublevert":
      return "M145 15 v585 v" + t + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -t + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v` + t + ` v585 h43z
M367 15 v585 v` + t + ` v585 c2.667,10,9.667,15,21,15
c10,0,16.667,-5,20,-15 v-585 v` + -t + ` v-585 c-2.667,-10,-9.667,-15,-21,-15
c-10,0,-16.667,5,-20,15z M410 15 H367 v585 v` + t + " v585 h43z";
    case "lfloor":
      return "M319 602 V0 H403 V602 v" + t + ` v1715 h263 v84 H319z
MM319 602 V0 H403 V602 v` + t + " v1715 H319z";
    case "rfloor":
      return "M319 602 V0 H403 V602 v" + t + ` v1799 H0 v-84 H319z
MM319 602 V0 H403 V602 v` + t + " v1715 H319z";
    case "lceil":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + t + ` v602 h84z
M403 1759 V0 H319 V1759 v` + t + " v602 h84z";
    case "rceil":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + t + ` v602 h84z
M347 1759 V0 h-84 V1759 v` + t + " v602 h84z";
    case "lparen":
      return `M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1
c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,
-36,557 l0,` + (t + 84) + `c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,
949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9
c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,
-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189
l0,-` + (t + 92) + `c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,
-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z`;
    case "rparen":
      return `M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,
63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5
c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,` + (t + 9) + `
c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664
c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11
c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17
c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558
l0,-` + (t + 144) + `c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,
-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z`;
    default:
      throw new Error("Unknown stretchy delimiter.");
  }
};
class q0 {
  // HtmlDomNode
  // Never used; needed for satisfying interface.
  constructor(e) {
    this.children = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, this.children = e, this.classes = [], this.height = 0, this.depth = 0, this.maxFontSize = 0, this.style = {};
  }
  hasClass(e) {
    return H.contains(this.classes, e);
  }
  /** Convert the fragment into a node. */
  toNode() {
    for (var e = document.createDocumentFragment(), t = 0; t < this.children.length; t++)
      e.appendChild(this.children[t].toNode());
    return e;
  }
  /** Convert the fragment into HTML markup. */
  toMarkup() {
    for (var e = "", t = 0; t < this.children.length; t++)
      e += this.children[t].toMarkup();
    return e;
  }
  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  toText() {
    var e = (t) => t.toText();
    return this.children.map(e).join("");
  }
}
var We = {
  "AMS-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.68889, 0, 0, 0.72222],
    66: [0, 0.68889, 0, 0, 0.66667],
    67: [0, 0.68889, 0, 0, 0.72222],
    68: [0, 0.68889, 0, 0, 0.72222],
    69: [0, 0.68889, 0, 0, 0.66667],
    70: [0, 0.68889, 0, 0, 0.61111],
    71: [0, 0.68889, 0, 0, 0.77778],
    72: [0, 0.68889, 0, 0, 0.77778],
    73: [0, 0.68889, 0, 0, 0.38889],
    74: [0.16667, 0.68889, 0, 0, 0.5],
    75: [0, 0.68889, 0, 0, 0.77778],
    76: [0, 0.68889, 0, 0, 0.66667],
    77: [0, 0.68889, 0, 0, 0.94445],
    78: [0, 0.68889, 0, 0, 0.72222],
    79: [0.16667, 0.68889, 0, 0, 0.77778],
    80: [0, 0.68889, 0, 0, 0.61111],
    81: [0.16667, 0.68889, 0, 0, 0.77778],
    82: [0, 0.68889, 0, 0, 0.72222],
    83: [0, 0.68889, 0, 0, 0.55556],
    84: [0, 0.68889, 0, 0, 0.66667],
    85: [0, 0.68889, 0, 0, 0.72222],
    86: [0, 0.68889, 0, 0, 0.72222],
    87: [0, 0.68889, 0, 0, 1],
    88: [0, 0.68889, 0, 0, 0.72222],
    89: [0, 0.68889, 0, 0, 0.72222],
    90: [0, 0.68889, 0, 0, 0.66667],
    107: [0, 0.68889, 0, 0, 0.55556],
    160: [0, 0, 0, 0, 0.25],
    165: [0, 0.675, 0.025, 0, 0.75],
    174: [0.15559, 0.69224, 0, 0, 0.94666],
    240: [0, 0.68889, 0, 0, 0.55556],
    295: [0, 0.68889, 0, 0, 0.54028],
    710: [0, 0.825, 0, 0, 2.33334],
    732: [0, 0.9, 0, 0, 2.33334],
    770: [0, 0.825, 0, 0, 2.33334],
    771: [0, 0.9, 0, 0, 2.33334],
    989: [0.08167, 0.58167, 0, 0, 0.77778],
    1008: [0, 0.43056, 0.04028, 0, 0.66667],
    8245: [0, 0.54986, 0, 0, 0.275],
    8463: [0, 0.68889, 0, 0, 0.54028],
    8487: [0, 0.68889, 0, 0, 0.72222],
    8498: [0, 0.68889, 0, 0, 0.55556],
    8502: [0, 0.68889, 0, 0, 0.66667],
    8503: [0, 0.68889, 0, 0, 0.44445],
    8504: [0, 0.68889, 0, 0, 0.66667],
    8513: [0, 0.68889, 0, 0, 0.63889],
    8592: [-0.03598, 0.46402, 0, 0, 0.5],
    8594: [-0.03598, 0.46402, 0, 0, 0.5],
    8602: [-0.13313, 0.36687, 0, 0, 1],
    8603: [-0.13313, 0.36687, 0, 0, 1],
    8606: [0.01354, 0.52239, 0, 0, 1],
    8608: [0.01354, 0.52239, 0, 0, 1],
    8610: [0.01354, 0.52239, 0, 0, 1.11111],
    8611: [0.01354, 0.52239, 0, 0, 1.11111],
    8619: [0, 0.54986, 0, 0, 1],
    8620: [0, 0.54986, 0, 0, 1],
    8621: [-0.13313, 0.37788, 0, 0, 1.38889],
    8622: [-0.13313, 0.36687, 0, 0, 1],
    8624: [0, 0.69224, 0, 0, 0.5],
    8625: [0, 0.69224, 0, 0, 0.5],
    8630: [0, 0.43056, 0, 0, 1],
    8631: [0, 0.43056, 0, 0, 1],
    8634: [0.08198, 0.58198, 0, 0, 0.77778],
    8635: [0.08198, 0.58198, 0, 0, 0.77778],
    8638: [0.19444, 0.69224, 0, 0, 0.41667],
    8639: [0.19444, 0.69224, 0, 0, 0.41667],
    8642: [0.19444, 0.69224, 0, 0, 0.41667],
    8643: [0.19444, 0.69224, 0, 0, 0.41667],
    8644: [0.1808, 0.675, 0, 0, 1],
    8646: [0.1808, 0.675, 0, 0, 1],
    8647: [0.1808, 0.675, 0, 0, 1],
    8648: [0.19444, 0.69224, 0, 0, 0.83334],
    8649: [0.1808, 0.675, 0, 0, 1],
    8650: [0.19444, 0.69224, 0, 0, 0.83334],
    8651: [0.01354, 0.52239, 0, 0, 1],
    8652: [0.01354, 0.52239, 0, 0, 1],
    8653: [-0.13313, 0.36687, 0, 0, 1],
    8654: [-0.13313, 0.36687, 0, 0, 1],
    8655: [-0.13313, 0.36687, 0, 0, 1],
    8666: [0.13667, 0.63667, 0, 0, 1],
    8667: [0.13667, 0.63667, 0, 0, 1],
    8669: [-0.13313, 0.37788, 0, 0, 1],
    8672: [-0.064, 0.437, 0, 0, 1.334],
    8674: [-0.064, 0.437, 0, 0, 1.334],
    8705: [0, 0.825, 0, 0, 0.5],
    8708: [0, 0.68889, 0, 0, 0.55556],
    8709: [0.08167, 0.58167, 0, 0, 0.77778],
    8717: [0, 0.43056, 0, 0, 0.42917],
    8722: [-0.03598, 0.46402, 0, 0, 0.5],
    8724: [0.08198, 0.69224, 0, 0, 0.77778],
    8726: [0.08167, 0.58167, 0, 0, 0.77778],
    8733: [0, 0.69224, 0, 0, 0.77778],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8737: [0, 0.69224, 0, 0, 0.72222],
    8738: [0.03517, 0.52239, 0, 0, 0.72222],
    8739: [0.08167, 0.58167, 0, 0, 0.22222],
    8740: [0.25142, 0.74111, 0, 0, 0.27778],
    8741: [0.08167, 0.58167, 0, 0, 0.38889],
    8742: [0.25142, 0.74111, 0, 0, 0.5],
    8756: [0, 0.69224, 0, 0, 0.66667],
    8757: [0, 0.69224, 0, 0, 0.66667],
    8764: [-0.13313, 0.36687, 0, 0, 0.77778],
    8765: [-0.13313, 0.37788, 0, 0, 0.77778],
    8769: [-0.13313, 0.36687, 0, 0, 0.77778],
    8770: [-0.03625, 0.46375, 0, 0, 0.77778],
    8774: [0.30274, 0.79383, 0, 0, 0.77778],
    8776: [-0.01688, 0.48312, 0, 0, 0.77778],
    8778: [0.08167, 0.58167, 0, 0, 0.77778],
    8782: [0.06062, 0.54986, 0, 0, 0.77778],
    8783: [0.06062, 0.54986, 0, 0, 0.77778],
    8785: [0.08198, 0.58198, 0, 0, 0.77778],
    8786: [0.08198, 0.58198, 0, 0, 0.77778],
    8787: [0.08198, 0.58198, 0, 0, 0.77778],
    8790: [0, 0.69224, 0, 0, 0.77778],
    8791: [0.22958, 0.72958, 0, 0, 0.77778],
    8796: [0.08198, 0.91667, 0, 0, 0.77778],
    8806: [0.25583, 0.75583, 0, 0, 0.77778],
    8807: [0.25583, 0.75583, 0, 0, 0.77778],
    8808: [0.25142, 0.75726, 0, 0, 0.77778],
    8809: [0.25142, 0.75726, 0, 0, 0.77778],
    8812: [0.25583, 0.75583, 0, 0, 0.5],
    8814: [0.20576, 0.70576, 0, 0, 0.77778],
    8815: [0.20576, 0.70576, 0, 0, 0.77778],
    8816: [0.30274, 0.79383, 0, 0, 0.77778],
    8817: [0.30274, 0.79383, 0, 0, 0.77778],
    8818: [0.22958, 0.72958, 0, 0, 0.77778],
    8819: [0.22958, 0.72958, 0, 0, 0.77778],
    8822: [0.1808, 0.675, 0, 0, 0.77778],
    8823: [0.1808, 0.675, 0, 0, 0.77778],
    8828: [0.13667, 0.63667, 0, 0, 0.77778],
    8829: [0.13667, 0.63667, 0, 0, 0.77778],
    8830: [0.22958, 0.72958, 0, 0, 0.77778],
    8831: [0.22958, 0.72958, 0, 0, 0.77778],
    8832: [0.20576, 0.70576, 0, 0, 0.77778],
    8833: [0.20576, 0.70576, 0, 0, 0.77778],
    8840: [0.30274, 0.79383, 0, 0, 0.77778],
    8841: [0.30274, 0.79383, 0, 0, 0.77778],
    8842: [0.13597, 0.63597, 0, 0, 0.77778],
    8843: [0.13597, 0.63597, 0, 0, 0.77778],
    8847: [0.03517, 0.54986, 0, 0, 0.77778],
    8848: [0.03517, 0.54986, 0, 0, 0.77778],
    8858: [0.08198, 0.58198, 0, 0, 0.77778],
    8859: [0.08198, 0.58198, 0, 0, 0.77778],
    8861: [0.08198, 0.58198, 0, 0, 0.77778],
    8862: [0, 0.675, 0, 0, 0.77778],
    8863: [0, 0.675, 0, 0, 0.77778],
    8864: [0, 0.675, 0, 0, 0.77778],
    8865: [0, 0.675, 0, 0, 0.77778],
    8872: [0, 0.69224, 0, 0, 0.61111],
    8873: [0, 0.69224, 0, 0, 0.72222],
    8874: [0, 0.69224, 0, 0, 0.88889],
    8876: [0, 0.68889, 0, 0, 0.61111],
    8877: [0, 0.68889, 0, 0, 0.61111],
    8878: [0, 0.68889, 0, 0, 0.72222],
    8879: [0, 0.68889, 0, 0, 0.72222],
    8882: [0.03517, 0.54986, 0, 0, 0.77778],
    8883: [0.03517, 0.54986, 0, 0, 0.77778],
    8884: [0.13667, 0.63667, 0, 0, 0.77778],
    8885: [0.13667, 0.63667, 0, 0, 0.77778],
    8888: [0, 0.54986, 0, 0, 1.11111],
    8890: [0.19444, 0.43056, 0, 0, 0.55556],
    8891: [0.19444, 0.69224, 0, 0, 0.61111],
    8892: [0.19444, 0.69224, 0, 0, 0.61111],
    8901: [0, 0.54986, 0, 0, 0.27778],
    8903: [0.08167, 0.58167, 0, 0, 0.77778],
    8905: [0.08167, 0.58167, 0, 0, 0.77778],
    8906: [0.08167, 0.58167, 0, 0, 0.77778],
    8907: [0, 0.69224, 0, 0, 0.77778],
    8908: [0, 0.69224, 0, 0, 0.77778],
    8909: [-0.03598, 0.46402, 0, 0, 0.77778],
    8910: [0, 0.54986, 0, 0, 0.76042],
    8911: [0, 0.54986, 0, 0, 0.76042],
    8912: [0.03517, 0.54986, 0, 0, 0.77778],
    8913: [0.03517, 0.54986, 0, 0, 0.77778],
    8914: [0, 0.54986, 0, 0, 0.66667],
    8915: [0, 0.54986, 0, 0, 0.66667],
    8916: [0, 0.69224, 0, 0, 0.66667],
    8918: [0.0391, 0.5391, 0, 0, 0.77778],
    8919: [0.0391, 0.5391, 0, 0, 0.77778],
    8920: [0.03517, 0.54986, 0, 0, 1.33334],
    8921: [0.03517, 0.54986, 0, 0, 1.33334],
    8922: [0.38569, 0.88569, 0, 0, 0.77778],
    8923: [0.38569, 0.88569, 0, 0, 0.77778],
    8926: [0.13667, 0.63667, 0, 0, 0.77778],
    8927: [0.13667, 0.63667, 0, 0, 0.77778],
    8928: [0.30274, 0.79383, 0, 0, 0.77778],
    8929: [0.30274, 0.79383, 0, 0, 0.77778],
    8934: [0.23222, 0.74111, 0, 0, 0.77778],
    8935: [0.23222, 0.74111, 0, 0, 0.77778],
    8936: [0.23222, 0.74111, 0, 0, 0.77778],
    8937: [0.23222, 0.74111, 0, 0, 0.77778],
    8938: [0.20576, 0.70576, 0, 0, 0.77778],
    8939: [0.20576, 0.70576, 0, 0, 0.77778],
    8940: [0.30274, 0.79383, 0, 0, 0.77778],
    8941: [0.30274, 0.79383, 0, 0, 0.77778],
    8994: [0.19444, 0.69224, 0, 0, 0.77778],
    8995: [0.19444, 0.69224, 0, 0, 0.77778],
    9416: [0.15559, 0.69224, 0, 0, 0.90222],
    9484: [0, 0.69224, 0, 0, 0.5],
    9488: [0, 0.69224, 0, 0, 0.5],
    9492: [0, 0.37788, 0, 0, 0.5],
    9496: [0, 0.37788, 0, 0, 0.5],
    9585: [0.19444, 0.68889, 0, 0, 0.88889],
    9586: [0.19444, 0.74111, 0, 0, 0.88889],
    9632: [0, 0.675, 0, 0, 0.77778],
    9633: [0, 0.675, 0, 0, 0.77778],
    9650: [0, 0.54986, 0, 0, 0.72222],
    9651: [0, 0.54986, 0, 0, 0.72222],
    9654: [0.03517, 0.54986, 0, 0, 0.77778],
    9660: [0, 0.54986, 0, 0, 0.72222],
    9661: [0, 0.54986, 0, 0, 0.72222],
    9664: [0.03517, 0.54986, 0, 0, 0.77778],
    9674: [0.11111, 0.69224, 0, 0, 0.66667],
    9733: [0.19444, 0.69224, 0, 0, 0.94445],
    10003: [0, 0.69224, 0, 0, 0.83334],
    10016: [0, 0.69224, 0, 0, 0.83334],
    10731: [0.11111, 0.69224, 0, 0, 0.66667],
    10846: [0.19444, 0.75583, 0, 0, 0.61111],
    10877: [0.13667, 0.63667, 0, 0, 0.77778],
    10878: [0.13667, 0.63667, 0, 0, 0.77778],
    10885: [0.25583, 0.75583, 0, 0, 0.77778],
    10886: [0.25583, 0.75583, 0, 0, 0.77778],
    10887: [0.13597, 0.63597, 0, 0, 0.77778],
    10888: [0.13597, 0.63597, 0, 0, 0.77778],
    10889: [0.26167, 0.75726, 0, 0, 0.77778],
    10890: [0.26167, 0.75726, 0, 0, 0.77778],
    10891: [0.48256, 0.98256, 0, 0, 0.77778],
    10892: [0.48256, 0.98256, 0, 0, 0.77778],
    10901: [0.13667, 0.63667, 0, 0, 0.77778],
    10902: [0.13667, 0.63667, 0, 0, 0.77778],
    10933: [0.25142, 0.75726, 0, 0, 0.77778],
    10934: [0.25142, 0.75726, 0, 0, 0.77778],
    10935: [0.26167, 0.75726, 0, 0, 0.77778],
    10936: [0.26167, 0.75726, 0, 0, 0.77778],
    10937: [0.26167, 0.75726, 0, 0, 0.77778],
    10938: [0.26167, 0.75726, 0, 0, 0.77778],
    10949: [0.25583, 0.75583, 0, 0, 0.77778],
    10950: [0.25583, 0.75583, 0, 0, 0.77778],
    10955: [0.28481, 0.79383, 0, 0, 0.77778],
    10956: [0.28481, 0.79383, 0, 0, 0.77778],
    57350: [0.08167, 0.58167, 0, 0, 0.22222],
    57351: [0.08167, 0.58167, 0, 0, 0.38889],
    57352: [0.08167, 0.58167, 0, 0, 0.77778],
    57353: [0, 0.43056, 0.04028, 0, 0.66667],
    57356: [0.25142, 0.75726, 0, 0, 0.77778],
    57357: [0.25142, 0.75726, 0, 0, 0.77778],
    57358: [0.41951, 0.91951, 0, 0, 0.77778],
    57359: [0.30274, 0.79383, 0, 0, 0.77778],
    57360: [0.30274, 0.79383, 0, 0, 0.77778],
    57361: [0.41951, 0.91951, 0, 0, 0.77778],
    57366: [0.25142, 0.75726, 0, 0, 0.77778],
    57367: [0.25142, 0.75726, 0, 0, 0.77778],
    57368: [0.25142, 0.75726, 0, 0, 0.77778],
    57369: [0.25142, 0.75726, 0, 0, 0.77778],
    57370: [0.13597, 0.63597, 0, 0, 0.77778],
    57371: [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.68333, 0, 0.19445, 0.79847],
    66: [0, 0.68333, 0.03041, 0.13889, 0.65681],
    67: [0, 0.68333, 0.05834, 0.13889, 0.52653],
    68: [0, 0.68333, 0.02778, 0.08334, 0.77139],
    69: [0, 0.68333, 0.08944, 0.11111, 0.52778],
    70: [0, 0.68333, 0.09931, 0.11111, 0.71875],
    71: [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    72: [0, 0.68333, 965e-5, 0.11111, 0.84452],
    73: [0, 0.68333, 0.07382, 0, 0.54452],
    74: [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    75: [0, 0.68333, 0.01445, 0.05556, 0.76195],
    76: [0, 0.68333, 0, 0.13889, 0.68972],
    77: [0, 0.68333, 0, 0.13889, 1.2009],
    78: [0, 0.68333, 0.14736, 0.08334, 0.82049],
    79: [0, 0.68333, 0.02778, 0.11111, 0.79611],
    80: [0, 0.68333, 0.08222, 0.08334, 0.69556],
    81: [0.09722, 0.68333, 0, 0.11111, 0.81667],
    82: [0, 0.68333, 0, 0.08334, 0.8475],
    83: [0, 0.68333, 0.075, 0.13889, 0.60556],
    84: [0, 0.68333, 0.25417, 0, 0.54464],
    85: [0, 0.68333, 0.09931, 0.08334, 0.62583],
    86: [0, 0.68333, 0.08222, 0, 0.61278],
    87: [0, 0.68333, 0.08222, 0.08334, 0.98778],
    88: [0, 0.68333, 0.14643, 0.13889, 0.7133],
    89: [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    90: [0, 0.68333, 0.07944, 0.13889, 0.72473],
    160: [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69141, 0, 0, 0.29574],
    34: [0, 0.69141, 0, 0, 0.21471],
    38: [0, 0.69141, 0, 0, 0.73786],
    39: [0, 0.69141, 0, 0, 0.21201],
    40: [0.24982, 0.74947, 0, 0, 0.38865],
    41: [0.24982, 0.74947, 0, 0, 0.38865],
    42: [0, 0.62119, 0, 0, 0.27764],
    43: [0.08319, 0.58283, 0, 0, 0.75623],
    44: [0, 0.10803, 0, 0, 0.27764],
    45: [0.08319, 0.58283, 0, 0, 0.75623],
    46: [0, 0.10803, 0, 0, 0.27764],
    47: [0.24982, 0.74947, 0, 0, 0.50181],
    48: [0, 0.47534, 0, 0, 0.50181],
    49: [0, 0.47534, 0, 0, 0.50181],
    50: [0, 0.47534, 0, 0, 0.50181],
    51: [0.18906, 0.47534, 0, 0, 0.50181],
    52: [0.18906, 0.47534, 0, 0, 0.50181],
    53: [0.18906, 0.47534, 0, 0, 0.50181],
    54: [0, 0.69141, 0, 0, 0.50181],
    55: [0.18906, 0.47534, 0, 0, 0.50181],
    56: [0, 0.69141, 0, 0, 0.50181],
    57: [0.18906, 0.47534, 0, 0, 0.50181],
    58: [0, 0.47534, 0, 0, 0.21606],
    59: [0.12604, 0.47534, 0, 0, 0.21606],
    61: [-0.13099, 0.36866, 0, 0, 0.75623],
    63: [0, 0.69141, 0, 0, 0.36245],
    65: [0, 0.69141, 0, 0, 0.7176],
    66: [0, 0.69141, 0, 0, 0.88397],
    67: [0, 0.69141, 0, 0, 0.61254],
    68: [0, 0.69141, 0, 0, 0.83158],
    69: [0, 0.69141, 0, 0, 0.66278],
    70: [0.12604, 0.69141, 0, 0, 0.61119],
    71: [0, 0.69141, 0, 0, 0.78539],
    72: [0.06302, 0.69141, 0, 0, 0.7203],
    73: [0, 0.69141, 0, 0, 0.55448],
    74: [0.12604, 0.69141, 0, 0, 0.55231],
    75: [0, 0.69141, 0, 0, 0.66845],
    76: [0, 0.69141, 0, 0, 0.66602],
    77: [0, 0.69141, 0, 0, 1.04953],
    78: [0, 0.69141, 0, 0, 0.83212],
    79: [0, 0.69141, 0, 0, 0.82699],
    80: [0.18906, 0.69141, 0, 0, 0.82753],
    81: [0.03781, 0.69141, 0, 0, 0.82699],
    82: [0, 0.69141, 0, 0, 0.82807],
    83: [0, 0.69141, 0, 0, 0.82861],
    84: [0, 0.69141, 0, 0, 0.66899],
    85: [0, 0.69141, 0, 0, 0.64576],
    86: [0, 0.69141, 0, 0, 0.83131],
    87: [0, 0.69141, 0, 0, 1.04602],
    88: [0, 0.69141, 0, 0, 0.71922],
    89: [0.18906, 0.69141, 0, 0, 0.83293],
    90: [0.12604, 0.69141, 0, 0, 0.60201],
    91: [0.24982, 0.74947, 0, 0, 0.27764],
    93: [0.24982, 0.74947, 0, 0, 0.27764],
    94: [0, 0.69141, 0, 0, 0.49965],
    97: [0, 0.47534, 0, 0, 0.50046],
    98: [0, 0.69141, 0, 0, 0.51315],
    99: [0, 0.47534, 0, 0, 0.38946],
    100: [0, 0.62119, 0, 0, 0.49857],
    101: [0, 0.47534, 0, 0, 0.40053],
    102: [0.18906, 0.69141, 0, 0, 0.32626],
    103: [0.18906, 0.47534, 0, 0, 0.5037],
    104: [0.18906, 0.69141, 0, 0, 0.52126],
    105: [0, 0.69141, 0, 0, 0.27899],
    106: [0, 0.69141, 0, 0, 0.28088],
    107: [0, 0.69141, 0, 0, 0.38946],
    108: [0, 0.69141, 0, 0, 0.27953],
    109: [0, 0.47534, 0, 0, 0.76676],
    110: [0, 0.47534, 0, 0, 0.52666],
    111: [0, 0.47534, 0, 0, 0.48885],
    112: [0.18906, 0.52396, 0, 0, 0.50046],
    113: [0.18906, 0.47534, 0, 0, 0.48912],
    114: [0, 0.47534, 0, 0, 0.38919],
    115: [0, 0.47534, 0, 0, 0.44266],
    116: [0, 0.62119, 0, 0, 0.33301],
    117: [0, 0.47534, 0, 0, 0.5172],
    118: [0, 0.52396, 0, 0, 0.5118],
    119: [0, 0.52396, 0, 0, 0.77351],
    120: [0.18906, 0.47534, 0, 0, 0.38865],
    121: [0.18906, 0.47534, 0, 0, 0.49884],
    122: [0.18906, 0.47534, 0, 0, 0.39054],
    160: [0, 0, 0, 0, 0.25],
    8216: [0, 0.69141, 0, 0, 0.21471],
    8217: [0, 0.69141, 0, 0, 0.21471],
    58112: [0, 0.62119, 0, 0, 0.49749],
    58113: [0, 0.62119, 0, 0, 0.4983],
    58114: [0.18906, 0.69141, 0, 0, 0.33328],
    58115: [0.18906, 0.69141, 0, 0, 0.32923],
    58116: [0.18906, 0.47534, 0, 0, 0.50343],
    58117: [0, 0.69141, 0, 0, 0.33301],
    58118: [0, 0.62119, 0, 0, 0.33409],
    58119: [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.35],
    34: [0, 0.69444, 0, 0, 0.60278],
    35: [0.19444, 0.69444, 0, 0, 0.95833],
    36: [0.05556, 0.75, 0, 0, 0.575],
    37: [0.05556, 0.75, 0, 0, 0.95833],
    38: [0, 0.69444, 0, 0, 0.89444],
    39: [0, 0.69444, 0, 0, 0.31944],
    40: [0.25, 0.75, 0, 0, 0.44722],
    41: [0.25, 0.75, 0, 0, 0.44722],
    42: [0, 0.75, 0, 0, 0.575],
    43: [0.13333, 0.63333, 0, 0, 0.89444],
    44: [0.19444, 0.15556, 0, 0, 0.31944],
    45: [0, 0.44444, 0, 0, 0.38333],
    46: [0, 0.15556, 0, 0, 0.31944],
    47: [0.25, 0.75, 0, 0, 0.575],
    48: [0, 0.64444, 0, 0, 0.575],
    49: [0, 0.64444, 0, 0, 0.575],
    50: [0, 0.64444, 0, 0, 0.575],
    51: [0, 0.64444, 0, 0, 0.575],
    52: [0, 0.64444, 0, 0, 0.575],
    53: [0, 0.64444, 0, 0, 0.575],
    54: [0, 0.64444, 0, 0, 0.575],
    55: [0, 0.64444, 0, 0, 0.575],
    56: [0, 0.64444, 0, 0, 0.575],
    57: [0, 0.64444, 0, 0, 0.575],
    58: [0, 0.44444, 0, 0, 0.31944],
    59: [0.19444, 0.44444, 0, 0, 0.31944],
    60: [0.08556, 0.58556, 0, 0, 0.89444],
    61: [-0.10889, 0.39111, 0, 0, 0.89444],
    62: [0.08556, 0.58556, 0, 0, 0.89444],
    63: [0, 0.69444, 0, 0, 0.54305],
    64: [0, 0.69444, 0, 0, 0.89444],
    65: [0, 0.68611, 0, 0, 0.86944],
    66: [0, 0.68611, 0, 0, 0.81805],
    67: [0, 0.68611, 0, 0, 0.83055],
    68: [0, 0.68611, 0, 0, 0.88194],
    69: [0, 0.68611, 0, 0, 0.75555],
    70: [0, 0.68611, 0, 0, 0.72361],
    71: [0, 0.68611, 0, 0, 0.90416],
    72: [0, 0.68611, 0, 0, 0.9],
    73: [0, 0.68611, 0, 0, 0.43611],
    74: [0, 0.68611, 0, 0, 0.59444],
    75: [0, 0.68611, 0, 0, 0.90138],
    76: [0, 0.68611, 0, 0, 0.69166],
    77: [0, 0.68611, 0, 0, 1.09166],
    78: [0, 0.68611, 0, 0, 0.9],
    79: [0, 0.68611, 0, 0, 0.86388],
    80: [0, 0.68611, 0, 0, 0.78611],
    81: [0.19444, 0.68611, 0, 0, 0.86388],
    82: [0, 0.68611, 0, 0, 0.8625],
    83: [0, 0.68611, 0, 0, 0.63889],
    84: [0, 0.68611, 0, 0, 0.8],
    85: [0, 0.68611, 0, 0, 0.88472],
    86: [0, 0.68611, 0.01597, 0, 0.86944],
    87: [0, 0.68611, 0.01597, 0, 1.18888],
    88: [0, 0.68611, 0, 0, 0.86944],
    89: [0, 0.68611, 0.02875, 0, 0.86944],
    90: [0, 0.68611, 0, 0, 0.70277],
    91: [0.25, 0.75, 0, 0, 0.31944],
    92: [0.25, 0.75, 0, 0, 0.575],
    93: [0.25, 0.75, 0, 0, 0.31944],
    94: [0, 0.69444, 0, 0, 0.575],
    95: [0.31, 0.13444, 0.03194, 0, 0.575],
    97: [0, 0.44444, 0, 0, 0.55902],
    98: [0, 0.69444, 0, 0, 0.63889],
    99: [0, 0.44444, 0, 0, 0.51111],
    100: [0, 0.69444, 0, 0, 0.63889],
    101: [0, 0.44444, 0, 0, 0.52708],
    102: [0, 0.69444, 0.10903, 0, 0.35139],
    103: [0.19444, 0.44444, 0.01597, 0, 0.575],
    104: [0, 0.69444, 0, 0, 0.63889],
    105: [0, 0.69444, 0, 0, 0.31944],
    106: [0.19444, 0.69444, 0, 0, 0.35139],
    107: [0, 0.69444, 0, 0, 0.60694],
    108: [0, 0.69444, 0, 0, 0.31944],
    109: [0, 0.44444, 0, 0, 0.95833],
    110: [0, 0.44444, 0, 0, 0.63889],
    111: [0, 0.44444, 0, 0, 0.575],
    112: [0.19444, 0.44444, 0, 0, 0.63889],
    113: [0.19444, 0.44444, 0, 0, 0.60694],
    114: [0, 0.44444, 0, 0, 0.47361],
    115: [0, 0.44444, 0, 0, 0.45361],
    116: [0, 0.63492, 0, 0, 0.44722],
    117: [0, 0.44444, 0, 0, 0.63889],
    118: [0, 0.44444, 0.01597, 0, 0.60694],
    119: [0, 0.44444, 0.01597, 0, 0.83055],
    120: [0, 0.44444, 0, 0, 0.60694],
    121: [0.19444, 0.44444, 0.01597, 0, 0.60694],
    122: [0, 0.44444, 0, 0, 0.51111],
    123: [0.25, 0.75, 0, 0, 0.575],
    124: [0.25, 0.75, 0, 0, 0.31944],
    125: [0.25, 0.75, 0, 0, 0.575],
    126: [0.35, 0.34444, 0, 0, 0.575],
    160: [0, 0, 0, 0, 0.25],
    163: [0, 0.69444, 0, 0, 0.86853],
    168: [0, 0.69444, 0, 0, 0.575],
    172: [0, 0.44444, 0, 0, 0.76666],
    176: [0, 0.69444, 0, 0, 0.86944],
    177: [0.13333, 0.63333, 0, 0, 0.89444],
    184: [0.17014, 0, 0, 0, 0.51111],
    198: [0, 0.68611, 0, 0, 1.04166],
    215: [0.13333, 0.63333, 0, 0, 0.89444],
    216: [0.04861, 0.73472, 0, 0, 0.89444],
    223: [0, 0.69444, 0, 0, 0.59722],
    230: [0, 0.44444, 0, 0, 0.83055],
    247: [0.13333, 0.63333, 0, 0, 0.89444],
    248: [0.09722, 0.54167, 0, 0, 0.575],
    305: [0, 0.44444, 0, 0, 0.31944],
    338: [0, 0.68611, 0, 0, 1.16944],
    339: [0, 0.44444, 0, 0, 0.89444],
    567: [0.19444, 0.44444, 0, 0, 0.35139],
    710: [0, 0.69444, 0, 0, 0.575],
    711: [0, 0.63194, 0, 0, 0.575],
    713: [0, 0.59611, 0, 0, 0.575],
    714: [0, 0.69444, 0, 0, 0.575],
    715: [0, 0.69444, 0, 0, 0.575],
    728: [0, 0.69444, 0, 0, 0.575],
    729: [0, 0.69444, 0, 0, 0.31944],
    730: [0, 0.69444, 0, 0, 0.86944],
    732: [0, 0.69444, 0, 0, 0.575],
    733: [0, 0.69444, 0, 0, 0.575],
    915: [0, 0.68611, 0, 0, 0.69166],
    916: [0, 0.68611, 0, 0, 0.95833],
    920: [0, 0.68611, 0, 0, 0.89444],
    923: [0, 0.68611, 0, 0, 0.80555],
    926: [0, 0.68611, 0, 0, 0.76666],
    928: [0, 0.68611, 0, 0, 0.9],
    931: [0, 0.68611, 0, 0, 0.83055],
    933: [0, 0.68611, 0, 0, 0.89444],
    934: [0, 0.68611, 0, 0, 0.83055],
    936: [0, 0.68611, 0, 0, 0.89444],
    937: [0, 0.68611, 0, 0, 0.83055],
    8211: [0, 0.44444, 0.03194, 0, 0.575],
    8212: [0, 0.44444, 0.03194, 0, 1.14999],
    8216: [0, 0.69444, 0, 0, 0.31944],
    8217: [0, 0.69444, 0, 0, 0.31944],
    8220: [0, 0.69444, 0, 0, 0.60278],
    8221: [0, 0.69444, 0, 0, 0.60278],
    8224: [0.19444, 0.69444, 0, 0, 0.51111],
    8225: [0.19444, 0.69444, 0, 0, 0.51111],
    8242: [0, 0.55556, 0, 0, 0.34444],
    8407: [0, 0.72444, 0.15486, 0, 0.575],
    8463: [0, 0.69444, 0, 0, 0.66759],
    8465: [0, 0.69444, 0, 0, 0.83055],
    8467: [0, 0.69444, 0, 0, 0.47361],
    8472: [0.19444, 0.44444, 0, 0, 0.74027],
    8476: [0, 0.69444, 0, 0, 0.83055],
    8501: [0, 0.69444, 0, 0, 0.70277],
    8592: [-0.10889, 0.39111, 0, 0, 1.14999],
    8593: [0.19444, 0.69444, 0, 0, 0.575],
    8594: [-0.10889, 0.39111, 0, 0, 1.14999],
    8595: [0.19444, 0.69444, 0, 0, 0.575],
    8596: [-0.10889, 0.39111, 0, 0, 1.14999],
    8597: [0.25, 0.75, 0, 0, 0.575],
    8598: [0.19444, 0.69444, 0, 0, 1.14999],
    8599: [0.19444, 0.69444, 0, 0, 1.14999],
    8600: [0.19444, 0.69444, 0, 0, 1.14999],
    8601: [0.19444, 0.69444, 0, 0, 1.14999],
    8636: [-0.10889, 0.39111, 0, 0, 1.14999],
    8637: [-0.10889, 0.39111, 0, 0, 1.14999],
    8640: [-0.10889, 0.39111, 0, 0, 1.14999],
    8641: [-0.10889, 0.39111, 0, 0, 1.14999],
    8656: [-0.10889, 0.39111, 0, 0, 1.14999],
    8657: [0.19444, 0.69444, 0, 0, 0.70277],
    8658: [-0.10889, 0.39111, 0, 0, 1.14999],
    8659: [0.19444, 0.69444, 0, 0, 0.70277],
    8660: [-0.10889, 0.39111, 0, 0, 1.14999],
    8661: [0.25, 0.75, 0, 0, 0.70277],
    8704: [0, 0.69444, 0, 0, 0.63889],
    8706: [0, 0.69444, 0.06389, 0, 0.62847],
    8707: [0, 0.69444, 0, 0, 0.63889],
    8709: [0.05556, 0.75, 0, 0, 0.575],
    8711: [0, 0.68611, 0, 0, 0.95833],
    8712: [0.08556, 0.58556, 0, 0, 0.76666],
    8715: [0.08556, 0.58556, 0, 0, 0.76666],
    8722: [0.13333, 0.63333, 0, 0, 0.89444],
    8723: [0.13333, 0.63333, 0, 0, 0.89444],
    8725: [0.25, 0.75, 0, 0, 0.575],
    8726: [0.25, 0.75, 0, 0, 0.575],
    8727: [-0.02778, 0.47222, 0, 0, 0.575],
    8728: [-0.02639, 0.47361, 0, 0, 0.575],
    8729: [-0.02639, 0.47361, 0, 0, 0.575],
    8730: [0.18, 0.82, 0, 0, 0.95833],
    8733: [0, 0.44444, 0, 0, 0.89444],
    8734: [0, 0.44444, 0, 0, 1.14999],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8739: [0.25, 0.75, 0, 0, 0.31944],
    8741: [0.25, 0.75, 0, 0, 0.575],
    8743: [0, 0.55556, 0, 0, 0.76666],
    8744: [0, 0.55556, 0, 0, 0.76666],
    8745: [0, 0.55556, 0, 0, 0.76666],
    8746: [0, 0.55556, 0, 0, 0.76666],
    8747: [0.19444, 0.69444, 0.12778, 0, 0.56875],
    8764: [-0.10889, 0.39111, 0, 0, 0.89444],
    8768: [0.19444, 0.69444, 0, 0, 0.31944],
    8771: [222e-5, 0.50222, 0, 0, 0.89444],
    8773: [0.027, 0.638, 0, 0, 0.894],
    8776: [0.02444, 0.52444, 0, 0, 0.89444],
    8781: [222e-5, 0.50222, 0, 0, 0.89444],
    8801: [222e-5, 0.50222, 0, 0, 0.89444],
    8804: [0.19667, 0.69667, 0, 0, 0.89444],
    8805: [0.19667, 0.69667, 0, 0, 0.89444],
    8810: [0.08556, 0.58556, 0, 0, 1.14999],
    8811: [0.08556, 0.58556, 0, 0, 1.14999],
    8826: [0.08556, 0.58556, 0, 0, 0.89444],
    8827: [0.08556, 0.58556, 0, 0, 0.89444],
    8834: [0.08556, 0.58556, 0, 0, 0.89444],
    8835: [0.08556, 0.58556, 0, 0, 0.89444],
    8838: [0.19667, 0.69667, 0, 0, 0.89444],
    8839: [0.19667, 0.69667, 0, 0, 0.89444],
    8846: [0, 0.55556, 0, 0, 0.76666],
    8849: [0.19667, 0.69667, 0, 0, 0.89444],
    8850: [0.19667, 0.69667, 0, 0, 0.89444],
    8851: [0, 0.55556, 0, 0, 0.76666],
    8852: [0, 0.55556, 0, 0, 0.76666],
    8853: [0.13333, 0.63333, 0, 0, 0.89444],
    8854: [0.13333, 0.63333, 0, 0, 0.89444],
    8855: [0.13333, 0.63333, 0, 0, 0.89444],
    8856: [0.13333, 0.63333, 0, 0, 0.89444],
    8857: [0.13333, 0.63333, 0, 0, 0.89444],
    8866: [0, 0.69444, 0, 0, 0.70277],
    8867: [0, 0.69444, 0, 0, 0.70277],
    8868: [0, 0.69444, 0, 0, 0.89444],
    8869: [0, 0.69444, 0, 0, 0.89444],
    8900: [-0.02639, 0.47361, 0, 0, 0.575],
    8901: [-0.02639, 0.47361, 0, 0, 0.31944],
    8902: [-0.02778, 0.47222, 0, 0, 0.575],
    8968: [0.25, 0.75, 0, 0, 0.51111],
    8969: [0.25, 0.75, 0, 0, 0.51111],
    8970: [0.25, 0.75, 0, 0, 0.51111],
    8971: [0.25, 0.75, 0, 0, 0.51111],
    8994: [-0.13889, 0.36111, 0, 0, 1.14999],
    8995: [-0.13889, 0.36111, 0, 0, 1.14999],
    9651: [0.19444, 0.69444, 0, 0, 1.02222],
    9657: [-0.02778, 0.47222, 0, 0, 0.575],
    9661: [0.19444, 0.69444, 0, 0, 1.02222],
    9667: [-0.02778, 0.47222, 0, 0, 0.575],
    9711: [0.19444, 0.69444, 0, 0, 1.14999],
    9824: [0.12963, 0.69444, 0, 0, 0.89444],
    9825: [0.12963, 0.69444, 0, 0, 0.89444],
    9826: [0.12963, 0.69444, 0, 0, 0.89444],
    9827: [0.12963, 0.69444, 0, 0, 0.89444],
    9837: [0, 0.75, 0, 0, 0.44722],
    9838: [0.19444, 0.69444, 0, 0, 0.44722],
    9839: [0.19444, 0.69444, 0, 0, 0.44722],
    10216: [0.25, 0.75, 0, 0, 0.44722],
    10217: [0.25, 0.75, 0, 0, 0.44722],
    10815: [0, 0.68611, 0, 0, 0.9],
    10927: [0.19667, 0.69667, 0, 0, 0.89444],
    10928: [0.19667, 0.69667, 0, 0, 0.89444],
    57376: [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.11417, 0, 0.38611],
    34: [0, 0.69444, 0.07939, 0, 0.62055],
    35: [0.19444, 0.69444, 0.06833, 0, 0.94444],
    37: [0.05556, 0.75, 0.12861, 0, 0.94444],
    38: [0, 0.69444, 0.08528, 0, 0.88555],
    39: [0, 0.69444, 0.12945, 0, 0.35555],
    40: [0.25, 0.75, 0.15806, 0, 0.47333],
    41: [0.25, 0.75, 0.03306, 0, 0.47333],
    42: [0, 0.75, 0.14333, 0, 0.59111],
    43: [0.10333, 0.60333, 0.03306, 0, 0.88555],
    44: [0.19444, 0.14722, 0, 0, 0.35555],
    45: [0, 0.44444, 0.02611, 0, 0.41444],
    46: [0, 0.14722, 0, 0, 0.35555],
    47: [0.25, 0.75, 0.15806, 0, 0.59111],
    48: [0, 0.64444, 0.13167, 0, 0.59111],
    49: [0, 0.64444, 0.13167, 0, 0.59111],
    50: [0, 0.64444, 0.13167, 0, 0.59111],
    51: [0, 0.64444, 0.13167, 0, 0.59111],
    52: [0.19444, 0.64444, 0.13167, 0, 0.59111],
    53: [0, 0.64444, 0.13167, 0, 0.59111],
    54: [0, 0.64444, 0.13167, 0, 0.59111],
    55: [0.19444, 0.64444, 0.13167, 0, 0.59111],
    56: [0, 0.64444, 0.13167, 0, 0.59111],
    57: [0, 0.64444, 0.13167, 0, 0.59111],
    58: [0, 0.44444, 0.06695, 0, 0.35555],
    59: [0.19444, 0.44444, 0.06695, 0, 0.35555],
    61: [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    63: [0, 0.69444, 0.11472, 0, 0.59111],
    64: [0, 0.69444, 0.09208, 0, 0.88555],
    65: [0, 0.68611, 0, 0, 0.86555],
    66: [0, 0.68611, 0.0992, 0, 0.81666],
    67: [0, 0.68611, 0.14208, 0, 0.82666],
    68: [0, 0.68611, 0.09062, 0, 0.87555],
    69: [0, 0.68611, 0.11431, 0, 0.75666],
    70: [0, 0.68611, 0.12903, 0, 0.72722],
    71: [0, 0.68611, 0.07347, 0, 0.89527],
    72: [0, 0.68611, 0.17208, 0, 0.8961],
    73: [0, 0.68611, 0.15681, 0, 0.47166],
    74: [0, 0.68611, 0.145, 0, 0.61055],
    75: [0, 0.68611, 0.14208, 0, 0.89499],
    76: [0, 0.68611, 0, 0, 0.69777],
    77: [0, 0.68611, 0.17208, 0, 1.07277],
    78: [0, 0.68611, 0.17208, 0, 0.8961],
    79: [0, 0.68611, 0.09062, 0, 0.85499],
    80: [0, 0.68611, 0.0992, 0, 0.78721],
    81: [0.19444, 0.68611, 0.09062, 0, 0.85499],
    82: [0, 0.68611, 0.02559, 0, 0.85944],
    83: [0, 0.68611, 0.11264, 0, 0.64999],
    84: [0, 0.68611, 0.12903, 0, 0.7961],
    85: [0, 0.68611, 0.17208, 0, 0.88083],
    86: [0, 0.68611, 0.18625, 0, 0.86555],
    87: [0, 0.68611, 0.18625, 0, 1.15999],
    88: [0, 0.68611, 0.15681, 0, 0.86555],
    89: [0, 0.68611, 0.19803, 0, 0.86555],
    90: [0, 0.68611, 0.14208, 0, 0.70888],
    91: [0.25, 0.75, 0.1875, 0, 0.35611],
    93: [0.25, 0.75, 0.09972, 0, 0.35611],
    94: [0, 0.69444, 0.06709, 0, 0.59111],
    95: [0.31, 0.13444, 0.09811, 0, 0.59111],
    97: [0, 0.44444, 0.09426, 0, 0.59111],
    98: [0, 0.69444, 0.07861, 0, 0.53222],
    99: [0, 0.44444, 0.05222, 0, 0.53222],
    100: [0, 0.69444, 0.10861, 0, 0.59111],
    101: [0, 0.44444, 0.085, 0, 0.53222],
    102: [0.19444, 0.69444, 0.21778, 0, 0.4],
    103: [0.19444, 0.44444, 0.105, 0, 0.53222],
    104: [0, 0.69444, 0.09426, 0, 0.59111],
    105: [0, 0.69326, 0.11387, 0, 0.35555],
    106: [0.19444, 0.69326, 0.1672, 0, 0.35555],
    107: [0, 0.69444, 0.11111, 0, 0.53222],
    108: [0, 0.69444, 0.10861, 0, 0.29666],
    109: [0, 0.44444, 0.09426, 0, 0.94444],
    110: [0, 0.44444, 0.09426, 0, 0.64999],
    111: [0, 0.44444, 0.07861, 0, 0.59111],
    112: [0.19444, 0.44444, 0.07861, 0, 0.59111],
    113: [0.19444, 0.44444, 0.105, 0, 0.53222],
    114: [0, 0.44444, 0.11111, 0, 0.50167],
    115: [0, 0.44444, 0.08167, 0, 0.48694],
    116: [0, 0.63492, 0.09639, 0, 0.385],
    117: [0, 0.44444, 0.09426, 0, 0.62055],
    118: [0, 0.44444, 0.11111, 0, 0.53222],
    119: [0, 0.44444, 0.11111, 0, 0.76777],
    120: [0, 0.44444, 0.12583, 0, 0.56055],
    121: [0.19444, 0.44444, 0.105, 0, 0.56166],
    122: [0, 0.44444, 0.13889, 0, 0.49055],
    126: [0.35, 0.34444, 0.11472, 0, 0.59111],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.69444, 0.11473, 0, 0.59111],
    176: [0, 0.69444, 0, 0, 0.94888],
    184: [0.17014, 0, 0, 0, 0.53222],
    198: [0, 0.68611, 0.11431, 0, 1.02277],
    216: [0.04861, 0.73472, 0.09062, 0, 0.88555],
    223: [0.19444, 0.69444, 0.09736, 0, 0.665],
    230: [0, 0.44444, 0.085, 0, 0.82666],
    248: [0.09722, 0.54167, 0.09458, 0, 0.59111],
    305: [0, 0.44444, 0.09426, 0, 0.35555],
    338: [0, 0.68611, 0.11431, 0, 1.14054],
    339: [0, 0.44444, 0.085, 0, 0.82666],
    567: [0.19444, 0.44444, 0.04611, 0, 0.385],
    710: [0, 0.69444, 0.06709, 0, 0.59111],
    711: [0, 0.63194, 0.08271, 0, 0.59111],
    713: [0, 0.59444, 0.10444, 0, 0.59111],
    714: [0, 0.69444, 0.08528, 0, 0.59111],
    715: [0, 0.69444, 0, 0, 0.59111],
    728: [0, 0.69444, 0.10333, 0, 0.59111],
    729: [0, 0.69444, 0.12945, 0, 0.35555],
    730: [0, 0.69444, 0, 0, 0.94888],
    732: [0, 0.69444, 0.11472, 0, 0.59111],
    733: [0, 0.69444, 0.11472, 0, 0.59111],
    915: [0, 0.68611, 0.12903, 0, 0.69777],
    916: [0, 0.68611, 0, 0, 0.94444],
    920: [0, 0.68611, 0.09062, 0, 0.88555],
    923: [0, 0.68611, 0, 0, 0.80666],
    926: [0, 0.68611, 0.15092, 0, 0.76777],
    928: [0, 0.68611, 0.17208, 0, 0.8961],
    931: [0, 0.68611, 0.11431, 0, 0.82666],
    933: [0, 0.68611, 0.10778, 0, 0.88555],
    934: [0, 0.68611, 0.05632, 0, 0.82666],
    936: [0, 0.68611, 0.10778, 0, 0.88555],
    937: [0, 0.68611, 0.0992, 0, 0.82666],
    8211: [0, 0.44444, 0.09811, 0, 0.59111],
    8212: [0, 0.44444, 0.09811, 0, 1.18221],
    8216: [0, 0.69444, 0.12945, 0, 0.35555],
    8217: [0, 0.69444, 0.12945, 0, 0.35555],
    8220: [0, 0.69444, 0.16772, 0, 0.62055],
    8221: [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.12417, 0, 0.30667],
    34: [0, 0.69444, 0.06961, 0, 0.51444],
    35: [0.19444, 0.69444, 0.06616, 0, 0.81777],
    37: [0.05556, 0.75, 0.13639, 0, 0.81777],
    38: [0, 0.69444, 0.09694, 0, 0.76666],
    39: [0, 0.69444, 0.12417, 0, 0.30667],
    40: [0.25, 0.75, 0.16194, 0, 0.40889],
    41: [0.25, 0.75, 0.03694, 0, 0.40889],
    42: [0, 0.75, 0.14917, 0, 0.51111],
    43: [0.05667, 0.56167, 0.03694, 0, 0.76666],
    44: [0.19444, 0.10556, 0, 0, 0.30667],
    45: [0, 0.43056, 0.02826, 0, 0.35778],
    46: [0, 0.10556, 0, 0, 0.30667],
    47: [0.25, 0.75, 0.16194, 0, 0.51111],
    48: [0, 0.64444, 0.13556, 0, 0.51111],
    49: [0, 0.64444, 0.13556, 0, 0.51111],
    50: [0, 0.64444, 0.13556, 0, 0.51111],
    51: [0, 0.64444, 0.13556, 0, 0.51111],
    52: [0.19444, 0.64444, 0.13556, 0, 0.51111],
    53: [0, 0.64444, 0.13556, 0, 0.51111],
    54: [0, 0.64444, 0.13556, 0, 0.51111],
    55: [0.19444, 0.64444, 0.13556, 0, 0.51111],
    56: [0, 0.64444, 0.13556, 0, 0.51111],
    57: [0, 0.64444, 0.13556, 0, 0.51111],
    58: [0, 0.43056, 0.0582, 0, 0.30667],
    59: [0.19444, 0.43056, 0.0582, 0, 0.30667],
    61: [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    63: [0, 0.69444, 0.1225, 0, 0.51111],
    64: [0, 0.69444, 0.09597, 0, 0.76666],
    65: [0, 0.68333, 0, 0, 0.74333],
    66: [0, 0.68333, 0.10257, 0, 0.70389],
    67: [0, 0.68333, 0.14528, 0, 0.71555],
    68: [0, 0.68333, 0.09403, 0, 0.755],
    69: [0, 0.68333, 0.12028, 0, 0.67833],
    70: [0, 0.68333, 0.13305, 0, 0.65277],
    71: [0, 0.68333, 0.08722, 0, 0.77361],
    72: [0, 0.68333, 0.16389, 0, 0.74333],
    73: [0, 0.68333, 0.15806, 0, 0.38555],
    74: [0, 0.68333, 0.14028, 0, 0.525],
    75: [0, 0.68333, 0.14528, 0, 0.76888],
    76: [0, 0.68333, 0, 0, 0.62722],
    77: [0, 0.68333, 0.16389, 0, 0.89666],
    78: [0, 0.68333, 0.16389, 0, 0.74333],
    79: [0, 0.68333, 0.09403, 0, 0.76666],
    80: [0, 0.68333, 0.10257, 0, 0.67833],
    81: [0.19444, 0.68333, 0.09403, 0, 0.76666],
    82: [0, 0.68333, 0.03868, 0, 0.72944],
    83: [0, 0.68333, 0.11972, 0, 0.56222],
    84: [0, 0.68333, 0.13305, 0, 0.71555],
    85: [0, 0.68333, 0.16389, 0, 0.74333],
    86: [0, 0.68333, 0.18361, 0, 0.74333],
    87: [0, 0.68333, 0.18361, 0, 0.99888],
    88: [0, 0.68333, 0.15806, 0, 0.74333],
    89: [0, 0.68333, 0.19383, 0, 0.74333],
    90: [0, 0.68333, 0.14528, 0, 0.61333],
    91: [0.25, 0.75, 0.1875, 0, 0.30667],
    93: [0.25, 0.75, 0.10528, 0, 0.30667],
    94: [0, 0.69444, 0.06646, 0, 0.51111],
    95: [0.31, 0.12056, 0.09208, 0, 0.51111],
    97: [0, 0.43056, 0.07671, 0, 0.51111],
    98: [0, 0.69444, 0.06312, 0, 0.46],
    99: [0, 0.43056, 0.05653, 0, 0.46],
    100: [0, 0.69444, 0.10333, 0, 0.51111],
    101: [0, 0.43056, 0.07514, 0, 0.46],
    102: [0.19444, 0.69444, 0.21194, 0, 0.30667],
    103: [0.19444, 0.43056, 0.08847, 0, 0.46],
    104: [0, 0.69444, 0.07671, 0, 0.51111],
    105: [0, 0.65536, 0.1019, 0, 0.30667],
    106: [0.19444, 0.65536, 0.14467, 0, 0.30667],
    107: [0, 0.69444, 0.10764, 0, 0.46],
    108: [0, 0.69444, 0.10333, 0, 0.25555],
    109: [0, 0.43056, 0.07671, 0, 0.81777],
    110: [0, 0.43056, 0.07671, 0, 0.56222],
    111: [0, 0.43056, 0.06312, 0, 0.51111],
    112: [0.19444, 0.43056, 0.06312, 0, 0.51111],
    113: [0.19444, 0.43056, 0.08847, 0, 0.46],
    114: [0, 0.43056, 0.10764, 0, 0.42166],
    115: [0, 0.43056, 0.08208, 0, 0.40889],
    116: [0, 0.61508, 0.09486, 0, 0.33222],
    117: [0, 0.43056, 0.07671, 0, 0.53666],
    118: [0, 0.43056, 0.10764, 0, 0.46],
    119: [0, 0.43056, 0.10764, 0, 0.66444],
    120: [0, 0.43056, 0.12042, 0, 0.46389],
    121: [0.19444, 0.43056, 0.08847, 0, 0.48555],
    122: [0, 0.43056, 0.12292, 0, 0.40889],
    126: [0.35, 0.31786, 0.11585, 0, 0.51111],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.66786, 0.10474, 0, 0.51111],
    176: [0, 0.69444, 0, 0, 0.83129],
    184: [0.17014, 0, 0, 0, 0.46],
    198: [0, 0.68333, 0.12028, 0, 0.88277],
    216: [0.04861, 0.73194, 0.09403, 0, 0.76666],
    223: [0.19444, 0.69444, 0.10514, 0, 0.53666],
    230: [0, 0.43056, 0.07514, 0, 0.71555],
    248: [0.09722, 0.52778, 0.09194, 0, 0.51111],
    338: [0, 0.68333, 0.12028, 0, 0.98499],
    339: [0, 0.43056, 0.07514, 0, 0.71555],
    710: [0, 0.69444, 0.06646, 0, 0.51111],
    711: [0, 0.62847, 0.08295, 0, 0.51111],
    713: [0, 0.56167, 0.10333, 0, 0.51111],
    714: [0, 0.69444, 0.09694, 0, 0.51111],
    715: [0, 0.69444, 0, 0, 0.51111],
    728: [0, 0.69444, 0.10806, 0, 0.51111],
    729: [0, 0.66786, 0.11752, 0, 0.30667],
    730: [0, 0.69444, 0, 0, 0.83129],
    732: [0, 0.66786, 0.11585, 0, 0.51111],
    733: [0, 0.69444, 0.1225, 0, 0.51111],
    915: [0, 0.68333, 0.13305, 0, 0.62722],
    916: [0, 0.68333, 0, 0, 0.81777],
    920: [0, 0.68333, 0.09403, 0, 0.76666],
    923: [0, 0.68333, 0, 0, 0.69222],
    926: [0, 0.68333, 0.15294, 0, 0.66444],
    928: [0, 0.68333, 0.16389, 0, 0.74333],
    931: [0, 0.68333, 0.12028, 0, 0.71555],
    933: [0, 0.68333, 0.11111, 0, 0.76666],
    934: [0, 0.68333, 0.05986, 0, 0.71555],
    936: [0, 0.68333, 0.11111, 0, 0.76666],
    937: [0, 0.68333, 0.10257, 0, 0.71555],
    8211: [0, 0.43056, 0.09208, 0, 0.51111],
    8212: [0, 0.43056, 0.09208, 0, 1.02222],
    8216: [0, 0.69444, 0.12417, 0, 0.30667],
    8217: [0, 0.69444, 0.12417, 0, 0.30667],
    8220: [0, 0.69444, 0.1685, 0, 0.51444],
    8221: [0, 0.69444, 0.06961, 0, 0.51444],
    8463: [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.27778],
    34: [0, 0.69444, 0, 0, 0.5],
    35: [0.19444, 0.69444, 0, 0, 0.83334],
    36: [0.05556, 0.75, 0, 0, 0.5],
    37: [0.05556, 0.75, 0, 0, 0.83334],
    38: [0, 0.69444, 0, 0, 0.77778],
    39: [0, 0.69444, 0, 0, 0.27778],
    40: [0.25, 0.75, 0, 0, 0.38889],
    41: [0.25, 0.75, 0, 0, 0.38889],
    42: [0, 0.75, 0, 0, 0.5],
    43: [0.08333, 0.58333, 0, 0, 0.77778],
    44: [0.19444, 0.10556, 0, 0, 0.27778],
    45: [0, 0.43056, 0, 0, 0.33333],
    46: [0, 0.10556, 0, 0, 0.27778],
    47: [0.25, 0.75, 0, 0, 0.5],
    48: [0, 0.64444, 0, 0, 0.5],
    49: [0, 0.64444, 0, 0, 0.5],
    50: [0, 0.64444, 0, 0, 0.5],
    51: [0, 0.64444, 0, 0, 0.5],
    52: [0, 0.64444, 0, 0, 0.5],
    53: [0, 0.64444, 0, 0, 0.5],
    54: [0, 0.64444, 0, 0, 0.5],
    55: [0, 0.64444, 0, 0, 0.5],
    56: [0, 0.64444, 0, 0, 0.5],
    57: [0, 0.64444, 0, 0, 0.5],
    58: [0, 0.43056, 0, 0, 0.27778],
    59: [0.19444, 0.43056, 0, 0, 0.27778],
    60: [0.0391, 0.5391, 0, 0, 0.77778],
    61: [-0.13313, 0.36687, 0, 0, 0.77778],
    62: [0.0391, 0.5391, 0, 0, 0.77778],
    63: [0, 0.69444, 0, 0, 0.47222],
    64: [0, 0.69444, 0, 0, 0.77778],
    65: [0, 0.68333, 0, 0, 0.75],
    66: [0, 0.68333, 0, 0, 0.70834],
    67: [0, 0.68333, 0, 0, 0.72222],
    68: [0, 0.68333, 0, 0, 0.76389],
    69: [0, 0.68333, 0, 0, 0.68056],
    70: [0, 0.68333, 0, 0, 0.65278],
    71: [0, 0.68333, 0, 0, 0.78472],
    72: [0, 0.68333, 0, 0, 0.75],
    73: [0, 0.68333, 0, 0, 0.36111],
    74: [0, 0.68333, 0, 0, 0.51389],
    75: [0, 0.68333, 0, 0, 0.77778],
    76: [0, 0.68333, 0, 0, 0.625],
    77: [0, 0.68333, 0, 0, 0.91667],
    78: [0, 0.68333, 0, 0, 0.75],
    79: [0, 0.68333, 0, 0, 0.77778],
    80: [0, 0.68333, 0, 0, 0.68056],
    81: [0.19444, 0.68333, 0, 0, 0.77778],
    82: [0, 0.68333, 0, 0, 0.73611],
    83: [0, 0.68333, 0, 0, 0.55556],
    84: [0, 0.68333, 0, 0, 0.72222],
    85: [0, 0.68333, 0, 0, 0.75],
    86: [0, 0.68333, 0.01389, 0, 0.75],
    87: [0, 0.68333, 0.01389, 0, 1.02778],
    88: [0, 0.68333, 0, 0, 0.75],
    89: [0, 0.68333, 0.025, 0, 0.75],
    90: [0, 0.68333, 0, 0, 0.61111],
    91: [0.25, 0.75, 0, 0, 0.27778],
    92: [0.25, 0.75, 0, 0, 0.5],
    93: [0.25, 0.75, 0, 0, 0.27778],
    94: [0, 0.69444, 0, 0, 0.5],
    95: [0.31, 0.12056, 0.02778, 0, 0.5],
    97: [0, 0.43056, 0, 0, 0.5],
    98: [0, 0.69444, 0, 0, 0.55556],
    99: [0, 0.43056, 0, 0, 0.44445],
    100: [0, 0.69444, 0, 0, 0.55556],
    101: [0, 0.43056, 0, 0, 0.44445],
    102: [0, 0.69444, 0.07778, 0, 0.30556],
    103: [0.19444, 0.43056, 0.01389, 0, 0.5],
    104: [0, 0.69444, 0, 0, 0.55556],
    105: [0, 0.66786, 0, 0, 0.27778],
    106: [0.19444, 0.66786, 0, 0, 0.30556],
    107: [0, 0.69444, 0, 0, 0.52778],
    108: [0, 0.69444, 0, 0, 0.27778],
    109: [0, 0.43056, 0, 0, 0.83334],
    110: [0, 0.43056, 0, 0, 0.55556],
    111: [0, 0.43056, 0, 0, 0.5],
    112: [0.19444, 0.43056, 0, 0, 0.55556],
    113: [0.19444, 0.43056, 0, 0, 0.52778],
    114: [0, 0.43056, 0, 0, 0.39167],
    115: [0, 0.43056, 0, 0, 0.39445],
    116: [0, 0.61508, 0, 0, 0.38889],
    117: [0, 0.43056, 0, 0, 0.55556],
    118: [0, 0.43056, 0.01389, 0, 0.52778],
    119: [0, 0.43056, 0.01389, 0, 0.72222],
    120: [0, 0.43056, 0, 0, 0.52778],
    121: [0.19444, 0.43056, 0.01389, 0, 0.52778],
    122: [0, 0.43056, 0, 0, 0.44445],
    123: [0.25, 0.75, 0, 0, 0.5],
    124: [0.25, 0.75, 0, 0, 0.27778],
    125: [0.25, 0.75, 0, 0, 0.5],
    126: [0.35, 0.31786, 0, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    163: [0, 0.69444, 0, 0, 0.76909],
    167: [0.19444, 0.69444, 0, 0, 0.44445],
    168: [0, 0.66786, 0, 0, 0.5],
    172: [0, 0.43056, 0, 0, 0.66667],
    176: [0, 0.69444, 0, 0, 0.75],
    177: [0.08333, 0.58333, 0, 0, 0.77778],
    182: [0.19444, 0.69444, 0, 0, 0.61111],
    184: [0.17014, 0, 0, 0, 0.44445],
    198: [0, 0.68333, 0, 0, 0.90278],
    215: [0.08333, 0.58333, 0, 0, 0.77778],
    216: [0.04861, 0.73194, 0, 0, 0.77778],
    223: [0, 0.69444, 0, 0, 0.5],
    230: [0, 0.43056, 0, 0, 0.72222],
    247: [0.08333, 0.58333, 0, 0, 0.77778],
    248: [0.09722, 0.52778, 0, 0, 0.5],
    305: [0, 0.43056, 0, 0, 0.27778],
    338: [0, 0.68333, 0, 0, 1.01389],
    339: [0, 0.43056, 0, 0, 0.77778],
    567: [0.19444, 0.43056, 0, 0, 0.30556],
    710: [0, 0.69444, 0, 0, 0.5],
    711: [0, 0.62847, 0, 0, 0.5],
    713: [0, 0.56778, 0, 0, 0.5],
    714: [0, 0.69444, 0, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0, 0, 0.5],
    729: [0, 0.66786, 0, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.75],
    732: [0, 0.66786, 0, 0, 0.5],
    733: [0, 0.69444, 0, 0, 0.5],
    915: [0, 0.68333, 0, 0, 0.625],
    916: [0, 0.68333, 0, 0, 0.83334],
    920: [0, 0.68333, 0, 0, 0.77778],
    923: [0, 0.68333, 0, 0, 0.69445],
    926: [0, 0.68333, 0, 0, 0.66667],
    928: [0, 0.68333, 0, 0, 0.75],
    931: [0, 0.68333, 0, 0, 0.72222],
    933: [0, 0.68333, 0, 0, 0.77778],
    934: [0, 0.68333, 0, 0, 0.72222],
    936: [0, 0.68333, 0, 0, 0.77778],
    937: [0, 0.68333, 0, 0, 0.72222],
    8211: [0, 0.43056, 0.02778, 0, 0.5],
    8212: [0, 0.43056, 0.02778, 0, 1],
    8216: [0, 0.69444, 0, 0, 0.27778],
    8217: [0, 0.69444, 0, 0, 0.27778],
    8220: [0, 0.69444, 0, 0, 0.5],
    8221: [0, 0.69444, 0, 0, 0.5],
    8224: [0.19444, 0.69444, 0, 0, 0.44445],
    8225: [0.19444, 0.69444, 0, 0, 0.44445],
    8230: [0, 0.123, 0, 0, 1.172],
    8242: [0, 0.55556, 0, 0, 0.275],
    8407: [0, 0.71444, 0.15382, 0, 0.5],
    8463: [0, 0.68889, 0, 0, 0.54028],
    8465: [0, 0.69444, 0, 0, 0.72222],
    8467: [0, 0.69444, 0, 0.11111, 0.41667],
    8472: [0.19444, 0.43056, 0, 0.11111, 0.63646],
    8476: [0, 0.69444, 0, 0, 0.72222],
    8501: [0, 0.69444, 0, 0, 0.61111],
    8592: [-0.13313, 0.36687, 0, 0, 1],
    8593: [0.19444, 0.69444, 0, 0, 0.5],
    8594: [-0.13313, 0.36687, 0, 0, 1],
    8595: [0.19444, 0.69444, 0, 0, 0.5],
    8596: [-0.13313, 0.36687, 0, 0, 1],
    8597: [0.25, 0.75, 0, 0, 0.5],
    8598: [0.19444, 0.69444, 0, 0, 1],
    8599: [0.19444, 0.69444, 0, 0, 1],
    8600: [0.19444, 0.69444, 0, 0, 1],
    8601: [0.19444, 0.69444, 0, 0, 1],
    8614: [0.011, 0.511, 0, 0, 1],
    8617: [0.011, 0.511, 0, 0, 1.126],
    8618: [0.011, 0.511, 0, 0, 1.126],
    8636: [-0.13313, 0.36687, 0, 0, 1],
    8637: [-0.13313, 0.36687, 0, 0, 1],
    8640: [-0.13313, 0.36687, 0, 0, 1],
    8641: [-0.13313, 0.36687, 0, 0, 1],
    8652: [0.011, 0.671, 0, 0, 1],
    8656: [-0.13313, 0.36687, 0, 0, 1],
    8657: [0.19444, 0.69444, 0, 0, 0.61111],
    8658: [-0.13313, 0.36687, 0, 0, 1],
    8659: [0.19444, 0.69444, 0, 0, 0.61111],
    8660: [-0.13313, 0.36687, 0, 0, 1],
    8661: [0.25, 0.75, 0, 0, 0.61111],
    8704: [0, 0.69444, 0, 0, 0.55556],
    8706: [0, 0.69444, 0.05556, 0.08334, 0.5309],
    8707: [0, 0.69444, 0, 0, 0.55556],
    8709: [0.05556, 0.75, 0, 0, 0.5],
    8711: [0, 0.68333, 0, 0, 0.83334],
    8712: [0.0391, 0.5391, 0, 0, 0.66667],
    8715: [0.0391, 0.5391, 0, 0, 0.66667],
    8722: [0.08333, 0.58333, 0, 0, 0.77778],
    8723: [0.08333, 0.58333, 0, 0, 0.77778],
    8725: [0.25, 0.75, 0, 0, 0.5],
    8726: [0.25, 0.75, 0, 0, 0.5],
    8727: [-0.03472, 0.46528, 0, 0, 0.5],
    8728: [-0.05555, 0.44445, 0, 0, 0.5],
    8729: [-0.05555, 0.44445, 0, 0, 0.5],
    8730: [0.2, 0.8, 0, 0, 0.83334],
    8733: [0, 0.43056, 0, 0, 0.77778],
    8734: [0, 0.43056, 0, 0, 1],
    8736: [0, 0.69224, 0, 0, 0.72222],
    8739: [0.25, 0.75, 0, 0, 0.27778],
    8741: [0.25, 0.75, 0, 0, 0.5],
    8743: [0, 0.55556, 0, 0, 0.66667],
    8744: [0, 0.55556, 0, 0, 0.66667],
    8745: [0, 0.55556, 0, 0, 0.66667],
    8746: [0, 0.55556, 0, 0, 0.66667],
    8747: [0.19444, 0.69444, 0.11111, 0, 0.41667],
    8764: [-0.13313, 0.36687, 0, 0, 0.77778],
    8768: [0.19444, 0.69444, 0, 0, 0.27778],
    8771: [-0.03625, 0.46375, 0, 0, 0.77778],
    8773: [-0.022, 0.589, 0, 0, 0.778],
    8776: [-0.01688, 0.48312, 0, 0, 0.77778],
    8781: [-0.03625, 0.46375, 0, 0, 0.77778],
    8784: [-0.133, 0.673, 0, 0, 0.778],
    8801: [-0.03625, 0.46375, 0, 0, 0.77778],
    8804: [0.13597, 0.63597, 0, 0, 0.77778],
    8805: [0.13597, 0.63597, 0, 0, 0.77778],
    8810: [0.0391, 0.5391, 0, 0, 1],
    8811: [0.0391, 0.5391, 0, 0, 1],
    8826: [0.0391, 0.5391, 0, 0, 0.77778],
    8827: [0.0391, 0.5391, 0, 0, 0.77778],
    8834: [0.0391, 0.5391, 0, 0, 0.77778],
    8835: [0.0391, 0.5391, 0, 0, 0.77778],
    8838: [0.13597, 0.63597, 0, 0, 0.77778],
    8839: [0.13597, 0.63597, 0, 0, 0.77778],
    8846: [0, 0.55556, 0, 0, 0.66667],
    8849: [0.13597, 0.63597, 0, 0, 0.77778],
    8850: [0.13597, 0.63597, 0, 0, 0.77778],
    8851: [0, 0.55556, 0, 0, 0.66667],
    8852: [0, 0.55556, 0, 0, 0.66667],
    8853: [0.08333, 0.58333, 0, 0, 0.77778],
    8854: [0.08333, 0.58333, 0, 0, 0.77778],
    8855: [0.08333, 0.58333, 0, 0, 0.77778],
    8856: [0.08333, 0.58333, 0, 0, 0.77778],
    8857: [0.08333, 0.58333, 0, 0, 0.77778],
    8866: [0, 0.69444, 0, 0, 0.61111],
    8867: [0, 0.69444, 0, 0, 0.61111],
    8868: [0, 0.69444, 0, 0, 0.77778],
    8869: [0, 0.69444, 0, 0, 0.77778],
    8872: [0.249, 0.75, 0, 0, 0.867],
    8900: [-0.05555, 0.44445, 0, 0, 0.5],
    8901: [-0.05555, 0.44445, 0, 0, 0.27778],
    8902: [-0.03472, 0.46528, 0, 0, 0.5],
    8904: [5e-3, 0.505, 0, 0, 0.9],
    8942: [0.03, 0.903, 0, 0, 0.278],
    8943: [-0.19, 0.313, 0, 0, 1.172],
    8945: [-0.1, 0.823, 0, 0, 1.282],
    8968: [0.25, 0.75, 0, 0, 0.44445],
    8969: [0.25, 0.75, 0, 0, 0.44445],
    8970: [0.25, 0.75, 0, 0, 0.44445],
    8971: [0.25, 0.75, 0, 0, 0.44445],
    8994: [-0.14236, 0.35764, 0, 0, 1],
    8995: [-0.14236, 0.35764, 0, 0, 1],
    9136: [0.244, 0.744, 0, 0, 0.412],
    9137: [0.244, 0.745, 0, 0, 0.412],
    9651: [0.19444, 0.69444, 0, 0, 0.88889],
    9657: [-0.03472, 0.46528, 0, 0, 0.5],
    9661: [0.19444, 0.69444, 0, 0, 0.88889],
    9667: [-0.03472, 0.46528, 0, 0, 0.5],
    9711: [0.19444, 0.69444, 0, 0, 1],
    9824: [0.12963, 0.69444, 0, 0, 0.77778],
    9825: [0.12963, 0.69444, 0, 0, 0.77778],
    9826: [0.12963, 0.69444, 0, 0, 0.77778],
    9827: [0.12963, 0.69444, 0, 0, 0.77778],
    9837: [0, 0.75, 0, 0, 0.38889],
    9838: [0.19444, 0.69444, 0, 0, 0.38889],
    9839: [0.19444, 0.69444, 0, 0, 0.38889],
    10216: [0.25, 0.75, 0, 0, 0.38889],
    10217: [0.25, 0.75, 0, 0, 0.38889],
    10222: [0.244, 0.744, 0, 0, 0.412],
    10223: [0.244, 0.745, 0, 0, 0.412],
    10229: [0.011, 0.511, 0, 0, 1.609],
    10230: [0.011, 0.511, 0, 0, 1.638],
    10231: [0.011, 0.511, 0, 0, 1.859],
    10232: [0.024, 0.525, 0, 0, 1.609],
    10233: [0.024, 0.525, 0, 0, 1.638],
    10234: [0.024, 0.525, 0, 0, 1.858],
    10236: [0.011, 0.511, 0, 0, 1.638],
    10815: [0, 0.68333, 0, 0, 0.75],
    10927: [0.13597, 0.63597, 0, 0, 0.77778],
    10928: [0.13597, 0.63597, 0, 0, 0.77778],
    57376: [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    32: [0, 0, 0, 0, 0.25],
    48: [0, 0.44444, 0, 0, 0.575],
    49: [0, 0.44444, 0, 0, 0.575],
    50: [0, 0.44444, 0, 0, 0.575],
    51: [0.19444, 0.44444, 0, 0, 0.575],
    52: [0.19444, 0.44444, 0, 0, 0.575],
    53: [0.19444, 0.44444, 0, 0, 0.575],
    54: [0, 0.64444, 0, 0, 0.575],
    55: [0.19444, 0.44444, 0, 0, 0.575],
    56: [0, 0.64444, 0, 0, 0.575],
    57: [0.19444, 0.44444, 0, 0, 0.575],
    65: [0, 0.68611, 0, 0, 0.86944],
    66: [0, 0.68611, 0.04835, 0, 0.8664],
    67: [0, 0.68611, 0.06979, 0, 0.81694],
    68: [0, 0.68611, 0.03194, 0, 0.93812],
    69: [0, 0.68611, 0.05451, 0, 0.81007],
    70: [0, 0.68611, 0.15972, 0, 0.68889],
    71: [0, 0.68611, 0, 0, 0.88673],
    72: [0, 0.68611, 0.08229, 0, 0.98229],
    73: [0, 0.68611, 0.07778, 0, 0.51111],
    74: [0, 0.68611, 0.10069, 0, 0.63125],
    75: [0, 0.68611, 0.06979, 0, 0.97118],
    76: [0, 0.68611, 0, 0, 0.75555],
    77: [0, 0.68611, 0.11424, 0, 1.14201],
    78: [0, 0.68611, 0.11424, 0, 0.95034],
    79: [0, 0.68611, 0.03194, 0, 0.83666],
    80: [0, 0.68611, 0.15972, 0, 0.72309],
    81: [0.19444, 0.68611, 0, 0, 0.86861],
    82: [0, 0.68611, 421e-5, 0, 0.87235],
    83: [0, 0.68611, 0.05382, 0, 0.69271],
    84: [0, 0.68611, 0.15972, 0, 0.63663],
    85: [0, 0.68611, 0.11424, 0, 0.80027],
    86: [0, 0.68611, 0.25555, 0, 0.67778],
    87: [0, 0.68611, 0.15972, 0, 1.09305],
    88: [0, 0.68611, 0.07778, 0, 0.94722],
    89: [0, 0.68611, 0.25555, 0, 0.67458],
    90: [0, 0.68611, 0.06979, 0, 0.77257],
    97: [0, 0.44444, 0, 0, 0.63287],
    98: [0, 0.69444, 0, 0, 0.52083],
    99: [0, 0.44444, 0, 0, 0.51342],
    100: [0, 0.69444, 0, 0, 0.60972],
    101: [0, 0.44444, 0, 0, 0.55361],
    102: [0.19444, 0.69444, 0.11042, 0, 0.56806],
    103: [0.19444, 0.44444, 0.03704, 0, 0.5449],
    104: [0, 0.69444, 0, 0, 0.66759],
    105: [0, 0.69326, 0, 0, 0.4048],
    106: [0.19444, 0.69326, 0.0622, 0, 0.47083],
    107: [0, 0.69444, 0.01852, 0, 0.6037],
    108: [0, 0.69444, 88e-4, 0, 0.34815],
    109: [0, 0.44444, 0, 0, 1.0324],
    110: [0, 0.44444, 0, 0, 0.71296],
    111: [0, 0.44444, 0, 0, 0.58472],
    112: [0.19444, 0.44444, 0, 0, 0.60092],
    113: [0.19444, 0.44444, 0.03704, 0, 0.54213],
    114: [0, 0.44444, 0.03194, 0, 0.5287],
    115: [0, 0.44444, 0, 0, 0.53125],
    116: [0, 0.63492, 0, 0, 0.41528],
    117: [0, 0.44444, 0, 0, 0.68102],
    118: [0, 0.44444, 0.03704, 0, 0.56666],
    119: [0, 0.44444, 0.02778, 0, 0.83148],
    120: [0, 0.44444, 0, 0, 0.65903],
    121: [0.19444, 0.44444, 0.03704, 0, 0.59028],
    122: [0, 0.44444, 0.04213, 0, 0.55509],
    160: [0, 0, 0, 0, 0.25],
    915: [0, 0.68611, 0.15972, 0, 0.65694],
    916: [0, 0.68611, 0, 0, 0.95833],
    920: [0, 0.68611, 0.03194, 0, 0.86722],
    923: [0, 0.68611, 0, 0, 0.80555],
    926: [0, 0.68611, 0.07458, 0, 0.84125],
    928: [0, 0.68611, 0.08229, 0, 0.98229],
    931: [0, 0.68611, 0.05451, 0, 0.88507],
    933: [0, 0.68611, 0.15972, 0, 0.67083],
    934: [0, 0.68611, 0, 0, 0.76666],
    936: [0, 0.68611, 0.11653, 0, 0.71402],
    937: [0, 0.68611, 0.04835, 0, 0.8789],
    945: [0, 0.44444, 0, 0, 0.76064],
    946: [0.19444, 0.69444, 0.03403, 0, 0.65972],
    947: [0.19444, 0.44444, 0.06389, 0, 0.59003],
    948: [0, 0.69444, 0.03819, 0, 0.52222],
    949: [0, 0.44444, 0, 0, 0.52882],
    950: [0.19444, 0.69444, 0.06215, 0, 0.50833],
    951: [0.19444, 0.44444, 0.03704, 0, 0.6],
    952: [0, 0.69444, 0.03194, 0, 0.5618],
    953: [0, 0.44444, 0, 0, 0.41204],
    954: [0, 0.44444, 0, 0, 0.66759],
    955: [0, 0.69444, 0, 0, 0.67083],
    956: [0.19444, 0.44444, 0, 0, 0.70787],
    957: [0, 0.44444, 0.06898, 0, 0.57685],
    958: [0.19444, 0.69444, 0.03021, 0, 0.50833],
    959: [0, 0.44444, 0, 0, 0.58472],
    960: [0, 0.44444, 0.03704, 0, 0.68241],
    961: [0.19444, 0.44444, 0, 0, 0.6118],
    962: [0.09722, 0.44444, 0.07917, 0, 0.42361],
    963: [0, 0.44444, 0.03704, 0, 0.68588],
    964: [0, 0.44444, 0.13472, 0, 0.52083],
    965: [0, 0.44444, 0.03704, 0, 0.63055],
    966: [0.19444, 0.44444, 0, 0, 0.74722],
    967: [0.19444, 0.44444, 0, 0, 0.71805],
    968: [0.19444, 0.69444, 0.03704, 0, 0.75833],
    969: [0, 0.44444, 0.03704, 0, 0.71782],
    977: [0, 0.69444, 0, 0, 0.69155],
    981: [0.19444, 0.69444, 0, 0, 0.7125],
    982: [0, 0.44444, 0.03194, 0, 0.975],
    1009: [0.19444, 0.44444, 0, 0, 0.6118],
    1013: [0, 0.44444, 0, 0, 0.48333],
    57649: [0, 0.44444, 0, 0, 0.39352],
    57911: [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    32: [0, 0, 0, 0, 0.25],
    48: [0, 0.43056, 0, 0, 0.5],
    49: [0, 0.43056, 0, 0, 0.5],
    50: [0, 0.43056, 0, 0, 0.5],
    51: [0.19444, 0.43056, 0, 0, 0.5],
    52: [0.19444, 0.43056, 0, 0, 0.5],
    53: [0.19444, 0.43056, 0, 0, 0.5],
    54: [0, 0.64444, 0, 0, 0.5],
    55: [0.19444, 0.43056, 0, 0, 0.5],
    56: [0, 0.64444, 0, 0, 0.5],
    57: [0.19444, 0.43056, 0, 0, 0.5],
    65: [0, 0.68333, 0, 0.13889, 0.75],
    66: [0, 0.68333, 0.05017, 0.08334, 0.75851],
    67: [0, 0.68333, 0.07153, 0.08334, 0.71472],
    68: [0, 0.68333, 0.02778, 0.05556, 0.82792],
    69: [0, 0.68333, 0.05764, 0.08334, 0.7382],
    70: [0, 0.68333, 0.13889, 0.08334, 0.64306],
    71: [0, 0.68333, 0, 0.08334, 0.78625],
    72: [0, 0.68333, 0.08125, 0.05556, 0.83125],
    73: [0, 0.68333, 0.07847, 0.11111, 0.43958],
    74: [0, 0.68333, 0.09618, 0.16667, 0.55451],
    75: [0, 0.68333, 0.07153, 0.05556, 0.84931],
    76: [0, 0.68333, 0, 0.02778, 0.68056],
    77: [0, 0.68333, 0.10903, 0.08334, 0.97014],
    78: [0, 0.68333, 0.10903, 0.08334, 0.80347],
    79: [0, 0.68333, 0.02778, 0.08334, 0.76278],
    80: [0, 0.68333, 0.13889, 0.08334, 0.64201],
    81: [0.19444, 0.68333, 0, 0.08334, 0.79056],
    82: [0, 0.68333, 773e-5, 0.08334, 0.75929],
    83: [0, 0.68333, 0.05764, 0.08334, 0.6132],
    84: [0, 0.68333, 0.13889, 0.08334, 0.58438],
    85: [0, 0.68333, 0.10903, 0.02778, 0.68278],
    86: [0, 0.68333, 0.22222, 0, 0.58333],
    87: [0, 0.68333, 0.13889, 0, 0.94445],
    88: [0, 0.68333, 0.07847, 0.08334, 0.82847],
    89: [0, 0.68333, 0.22222, 0, 0.58056],
    90: [0, 0.68333, 0.07153, 0.08334, 0.68264],
    97: [0, 0.43056, 0, 0, 0.52859],
    98: [0, 0.69444, 0, 0, 0.42917],
    99: [0, 0.43056, 0, 0.05556, 0.43276],
    100: [0, 0.69444, 0, 0.16667, 0.52049],
    101: [0, 0.43056, 0, 0.05556, 0.46563],
    102: [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    103: [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    104: [0, 0.69444, 0, 0, 0.57616],
    105: [0, 0.65952, 0, 0, 0.34451],
    106: [0.19444, 0.65952, 0.05724, 0, 0.41181],
    107: [0, 0.69444, 0.03148, 0, 0.5206],
    108: [0, 0.69444, 0.01968, 0.08334, 0.29838],
    109: [0, 0.43056, 0, 0, 0.87801],
    110: [0, 0.43056, 0, 0, 0.60023],
    111: [0, 0.43056, 0, 0.05556, 0.48472],
    112: [0.19444, 0.43056, 0, 0.08334, 0.50313],
    113: [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    114: [0, 0.43056, 0.02778, 0.05556, 0.45116],
    115: [0, 0.43056, 0, 0.05556, 0.46875],
    116: [0, 0.61508, 0, 0.08334, 0.36111],
    117: [0, 0.43056, 0, 0.02778, 0.57246],
    118: [0, 0.43056, 0.03588, 0.02778, 0.48472],
    119: [0, 0.43056, 0.02691, 0.08334, 0.71592],
    120: [0, 0.43056, 0, 0.02778, 0.57153],
    121: [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    122: [0, 0.43056, 0.04398, 0.05556, 0.46505],
    160: [0, 0, 0, 0, 0.25],
    915: [0, 0.68333, 0.13889, 0.08334, 0.61528],
    916: [0, 0.68333, 0, 0.16667, 0.83334],
    920: [0, 0.68333, 0.02778, 0.08334, 0.76278],
    923: [0, 0.68333, 0, 0.16667, 0.69445],
    926: [0, 0.68333, 0.07569, 0.08334, 0.74236],
    928: [0, 0.68333, 0.08125, 0.05556, 0.83125],
    931: [0, 0.68333, 0.05764, 0.08334, 0.77986],
    933: [0, 0.68333, 0.13889, 0.05556, 0.58333],
    934: [0, 0.68333, 0, 0.08334, 0.66667],
    936: [0, 0.68333, 0.11, 0.05556, 0.61222],
    937: [0, 0.68333, 0.05017, 0.08334, 0.7724],
    945: [0, 0.43056, 37e-4, 0.02778, 0.6397],
    946: [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    947: [0.19444, 0.43056, 0.05556, 0, 0.51773],
    948: [0, 0.69444, 0.03785, 0.05556, 0.44444],
    949: [0, 0.43056, 0, 0.08334, 0.46632],
    950: [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    951: [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    952: [0, 0.69444, 0.02778, 0.08334, 0.46944],
    953: [0, 0.43056, 0, 0.05556, 0.35394],
    954: [0, 0.43056, 0, 0, 0.57616],
    955: [0, 0.69444, 0, 0, 0.58334],
    956: [0.19444, 0.43056, 0, 0.02778, 0.60255],
    957: [0, 0.43056, 0.06366, 0.02778, 0.49398],
    958: [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    959: [0, 0.43056, 0, 0.05556, 0.48472],
    960: [0, 0.43056, 0.03588, 0, 0.57003],
    961: [0.19444, 0.43056, 0, 0.08334, 0.51702],
    962: [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    963: [0, 0.43056, 0.03588, 0, 0.57141],
    964: [0, 0.43056, 0.1132, 0.02778, 0.43715],
    965: [0, 0.43056, 0.03588, 0.02778, 0.54028],
    966: [0.19444, 0.43056, 0, 0.08334, 0.65417],
    967: [0.19444, 0.43056, 0, 0.05556, 0.62569],
    968: [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    969: [0, 0.43056, 0.03588, 0, 0.62245],
    977: [0, 0.69444, 0, 0.08334, 0.59144],
    981: [0.19444, 0.69444, 0, 0.08334, 0.59583],
    982: [0, 0.43056, 0.02778, 0, 0.82813],
    1009: [0.19444, 0.43056, 0, 0.08334, 0.51702],
    1013: [0, 0.43056, 0, 0.05556, 0.4059],
    57649: [0, 0.43056, 0, 0.02778, 0.32246],
    57911: [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.36667],
    34: [0, 0.69444, 0, 0, 0.55834],
    35: [0.19444, 0.69444, 0, 0, 0.91667],
    36: [0.05556, 0.75, 0, 0, 0.55],
    37: [0.05556, 0.75, 0, 0, 1.02912],
    38: [0, 0.69444, 0, 0, 0.83056],
    39: [0, 0.69444, 0, 0, 0.30556],
    40: [0.25, 0.75, 0, 0, 0.42778],
    41: [0.25, 0.75, 0, 0, 0.42778],
    42: [0, 0.75, 0, 0, 0.55],
    43: [0.11667, 0.61667, 0, 0, 0.85556],
    44: [0.10556, 0.13056, 0, 0, 0.30556],
    45: [0, 0.45833, 0, 0, 0.36667],
    46: [0, 0.13056, 0, 0, 0.30556],
    47: [0.25, 0.75, 0, 0, 0.55],
    48: [0, 0.69444, 0, 0, 0.55],
    49: [0, 0.69444, 0, 0, 0.55],
    50: [0, 0.69444, 0, 0, 0.55],
    51: [0, 0.69444, 0, 0, 0.55],
    52: [0, 0.69444, 0, 0, 0.55],
    53: [0, 0.69444, 0, 0, 0.55],
    54: [0, 0.69444, 0, 0, 0.55],
    55: [0, 0.69444, 0, 0, 0.55],
    56: [0, 0.69444, 0, 0, 0.55],
    57: [0, 0.69444, 0, 0, 0.55],
    58: [0, 0.45833, 0, 0, 0.30556],
    59: [0.10556, 0.45833, 0, 0, 0.30556],
    61: [-0.09375, 0.40625, 0, 0, 0.85556],
    63: [0, 0.69444, 0, 0, 0.51945],
    64: [0, 0.69444, 0, 0, 0.73334],
    65: [0, 0.69444, 0, 0, 0.73334],
    66: [0, 0.69444, 0, 0, 0.73334],
    67: [0, 0.69444, 0, 0, 0.70278],
    68: [0, 0.69444, 0, 0, 0.79445],
    69: [0, 0.69444, 0, 0, 0.64167],
    70: [0, 0.69444, 0, 0, 0.61111],
    71: [0, 0.69444, 0, 0, 0.73334],
    72: [0, 0.69444, 0, 0, 0.79445],
    73: [0, 0.69444, 0, 0, 0.33056],
    74: [0, 0.69444, 0, 0, 0.51945],
    75: [0, 0.69444, 0, 0, 0.76389],
    76: [0, 0.69444, 0, 0, 0.58056],
    77: [0, 0.69444, 0, 0, 0.97778],
    78: [0, 0.69444, 0, 0, 0.79445],
    79: [0, 0.69444, 0, 0, 0.79445],
    80: [0, 0.69444, 0, 0, 0.70278],
    81: [0.10556, 0.69444, 0, 0, 0.79445],
    82: [0, 0.69444, 0, 0, 0.70278],
    83: [0, 0.69444, 0, 0, 0.61111],
    84: [0, 0.69444, 0, 0, 0.73334],
    85: [0, 0.69444, 0, 0, 0.76389],
    86: [0, 0.69444, 0.01528, 0, 0.73334],
    87: [0, 0.69444, 0.01528, 0, 1.03889],
    88: [0, 0.69444, 0, 0, 0.73334],
    89: [0, 0.69444, 0.0275, 0, 0.73334],
    90: [0, 0.69444, 0, 0, 0.67223],
    91: [0.25, 0.75, 0, 0, 0.34306],
    93: [0.25, 0.75, 0, 0, 0.34306],
    94: [0, 0.69444, 0, 0, 0.55],
    95: [0.35, 0.10833, 0.03056, 0, 0.55],
    97: [0, 0.45833, 0, 0, 0.525],
    98: [0, 0.69444, 0, 0, 0.56111],
    99: [0, 0.45833, 0, 0, 0.48889],
    100: [0, 0.69444, 0, 0, 0.56111],
    101: [0, 0.45833, 0, 0, 0.51111],
    102: [0, 0.69444, 0.07639, 0, 0.33611],
    103: [0.19444, 0.45833, 0.01528, 0, 0.55],
    104: [0, 0.69444, 0, 0, 0.56111],
    105: [0, 0.69444, 0, 0, 0.25556],
    106: [0.19444, 0.69444, 0, 0, 0.28611],
    107: [0, 0.69444, 0, 0, 0.53056],
    108: [0, 0.69444, 0, 0, 0.25556],
    109: [0, 0.45833, 0, 0, 0.86667],
    110: [0, 0.45833, 0, 0, 0.56111],
    111: [0, 0.45833, 0, 0, 0.55],
    112: [0.19444, 0.45833, 0, 0, 0.56111],
    113: [0.19444, 0.45833, 0, 0, 0.56111],
    114: [0, 0.45833, 0.01528, 0, 0.37222],
    115: [0, 0.45833, 0, 0, 0.42167],
    116: [0, 0.58929, 0, 0, 0.40417],
    117: [0, 0.45833, 0, 0, 0.56111],
    118: [0, 0.45833, 0.01528, 0, 0.5],
    119: [0, 0.45833, 0.01528, 0, 0.74445],
    120: [0, 0.45833, 0, 0, 0.5],
    121: [0.19444, 0.45833, 0.01528, 0, 0.5],
    122: [0, 0.45833, 0, 0, 0.47639],
    126: [0.35, 0.34444, 0, 0, 0.55],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.69444, 0, 0, 0.55],
    176: [0, 0.69444, 0, 0, 0.73334],
    180: [0, 0.69444, 0, 0, 0.55],
    184: [0.17014, 0, 0, 0, 0.48889],
    305: [0, 0.45833, 0, 0, 0.25556],
    567: [0.19444, 0.45833, 0, 0, 0.28611],
    710: [0, 0.69444, 0, 0, 0.55],
    711: [0, 0.63542, 0, 0, 0.55],
    713: [0, 0.63778, 0, 0, 0.55],
    728: [0, 0.69444, 0, 0, 0.55],
    729: [0, 0.69444, 0, 0, 0.30556],
    730: [0, 0.69444, 0, 0, 0.73334],
    732: [0, 0.69444, 0, 0, 0.55],
    733: [0, 0.69444, 0, 0, 0.55],
    915: [0, 0.69444, 0, 0, 0.58056],
    916: [0, 0.69444, 0, 0, 0.91667],
    920: [0, 0.69444, 0, 0, 0.85556],
    923: [0, 0.69444, 0, 0, 0.67223],
    926: [0, 0.69444, 0, 0, 0.73334],
    928: [0, 0.69444, 0, 0, 0.79445],
    931: [0, 0.69444, 0, 0, 0.79445],
    933: [0, 0.69444, 0, 0, 0.85556],
    934: [0, 0.69444, 0, 0, 0.79445],
    936: [0, 0.69444, 0, 0, 0.85556],
    937: [0, 0.69444, 0, 0, 0.79445],
    8211: [0, 0.45833, 0.03056, 0, 0.55],
    8212: [0, 0.45833, 0.03056, 0, 1.10001],
    8216: [0, 0.69444, 0, 0, 0.30556],
    8217: [0, 0.69444, 0, 0, 0.30556],
    8220: [0, 0.69444, 0, 0, 0.55834],
    8221: [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0.05733, 0, 0.31945],
    34: [0, 0.69444, 316e-5, 0, 0.5],
    35: [0.19444, 0.69444, 0.05087, 0, 0.83334],
    36: [0.05556, 0.75, 0.11156, 0, 0.5],
    37: [0.05556, 0.75, 0.03126, 0, 0.83334],
    38: [0, 0.69444, 0.03058, 0, 0.75834],
    39: [0, 0.69444, 0.07816, 0, 0.27778],
    40: [0.25, 0.75, 0.13164, 0, 0.38889],
    41: [0.25, 0.75, 0.02536, 0, 0.38889],
    42: [0, 0.75, 0.11775, 0, 0.5],
    43: [0.08333, 0.58333, 0.02536, 0, 0.77778],
    44: [0.125, 0.08333, 0, 0, 0.27778],
    45: [0, 0.44444, 0.01946, 0, 0.33333],
    46: [0, 0.08333, 0, 0, 0.27778],
    47: [0.25, 0.75, 0.13164, 0, 0.5],
    48: [0, 0.65556, 0.11156, 0, 0.5],
    49: [0, 0.65556, 0.11156, 0, 0.5],
    50: [0, 0.65556, 0.11156, 0, 0.5],
    51: [0, 0.65556, 0.11156, 0, 0.5],
    52: [0, 0.65556, 0.11156, 0, 0.5],
    53: [0, 0.65556, 0.11156, 0, 0.5],
    54: [0, 0.65556, 0.11156, 0, 0.5],
    55: [0, 0.65556, 0.11156, 0, 0.5],
    56: [0, 0.65556, 0.11156, 0, 0.5],
    57: [0, 0.65556, 0.11156, 0, 0.5],
    58: [0, 0.44444, 0.02502, 0, 0.27778],
    59: [0.125, 0.44444, 0.02502, 0, 0.27778],
    61: [-0.13, 0.37, 0.05087, 0, 0.77778],
    63: [0, 0.69444, 0.11809, 0, 0.47222],
    64: [0, 0.69444, 0.07555, 0, 0.66667],
    65: [0, 0.69444, 0, 0, 0.66667],
    66: [0, 0.69444, 0.08293, 0, 0.66667],
    67: [0, 0.69444, 0.11983, 0, 0.63889],
    68: [0, 0.69444, 0.07555, 0, 0.72223],
    69: [0, 0.69444, 0.11983, 0, 0.59722],
    70: [0, 0.69444, 0.13372, 0, 0.56945],
    71: [0, 0.69444, 0.11983, 0, 0.66667],
    72: [0, 0.69444, 0.08094, 0, 0.70834],
    73: [0, 0.69444, 0.13372, 0, 0.27778],
    74: [0, 0.69444, 0.08094, 0, 0.47222],
    75: [0, 0.69444, 0.11983, 0, 0.69445],
    76: [0, 0.69444, 0, 0, 0.54167],
    77: [0, 0.69444, 0.08094, 0, 0.875],
    78: [0, 0.69444, 0.08094, 0, 0.70834],
    79: [0, 0.69444, 0.07555, 0, 0.73611],
    80: [0, 0.69444, 0.08293, 0, 0.63889],
    81: [0.125, 0.69444, 0.07555, 0, 0.73611],
    82: [0, 0.69444, 0.08293, 0, 0.64584],
    83: [0, 0.69444, 0.09205, 0, 0.55556],
    84: [0, 0.69444, 0.13372, 0, 0.68056],
    85: [0, 0.69444, 0.08094, 0, 0.6875],
    86: [0, 0.69444, 0.1615, 0, 0.66667],
    87: [0, 0.69444, 0.1615, 0, 0.94445],
    88: [0, 0.69444, 0.13372, 0, 0.66667],
    89: [0, 0.69444, 0.17261, 0, 0.66667],
    90: [0, 0.69444, 0.11983, 0, 0.61111],
    91: [0.25, 0.75, 0.15942, 0, 0.28889],
    93: [0.25, 0.75, 0.08719, 0, 0.28889],
    94: [0, 0.69444, 0.0799, 0, 0.5],
    95: [0.35, 0.09444, 0.08616, 0, 0.5],
    97: [0, 0.44444, 981e-5, 0, 0.48056],
    98: [0, 0.69444, 0.03057, 0, 0.51667],
    99: [0, 0.44444, 0.08336, 0, 0.44445],
    100: [0, 0.69444, 0.09483, 0, 0.51667],
    101: [0, 0.44444, 0.06778, 0, 0.44445],
    102: [0, 0.69444, 0.21705, 0, 0.30556],
    103: [0.19444, 0.44444, 0.10836, 0, 0.5],
    104: [0, 0.69444, 0.01778, 0, 0.51667],
    105: [0, 0.67937, 0.09718, 0, 0.23889],
    106: [0.19444, 0.67937, 0.09162, 0, 0.26667],
    107: [0, 0.69444, 0.08336, 0, 0.48889],
    108: [0, 0.69444, 0.09483, 0, 0.23889],
    109: [0, 0.44444, 0.01778, 0, 0.79445],
    110: [0, 0.44444, 0.01778, 0, 0.51667],
    111: [0, 0.44444, 0.06613, 0, 0.5],
    112: [0.19444, 0.44444, 0.0389, 0, 0.51667],
    113: [0.19444, 0.44444, 0.04169, 0, 0.51667],
    114: [0, 0.44444, 0.10836, 0, 0.34167],
    115: [0, 0.44444, 0.0778, 0, 0.38333],
    116: [0, 0.57143, 0.07225, 0, 0.36111],
    117: [0, 0.44444, 0.04169, 0, 0.51667],
    118: [0, 0.44444, 0.10836, 0, 0.46111],
    119: [0, 0.44444, 0.10836, 0, 0.68334],
    120: [0, 0.44444, 0.09169, 0, 0.46111],
    121: [0.19444, 0.44444, 0.10836, 0, 0.46111],
    122: [0, 0.44444, 0.08752, 0, 0.43472],
    126: [0.35, 0.32659, 0.08826, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.67937, 0.06385, 0, 0.5],
    176: [0, 0.69444, 0, 0, 0.73752],
    184: [0.17014, 0, 0, 0, 0.44445],
    305: [0, 0.44444, 0.04169, 0, 0.23889],
    567: [0.19444, 0.44444, 0.04169, 0, 0.26667],
    710: [0, 0.69444, 0.0799, 0, 0.5],
    711: [0, 0.63194, 0.08432, 0, 0.5],
    713: [0, 0.60889, 0.08776, 0, 0.5],
    714: [0, 0.69444, 0.09205, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0.09483, 0, 0.5],
    729: [0, 0.67937, 0.07774, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.73752],
    732: [0, 0.67659, 0.08826, 0, 0.5],
    733: [0, 0.69444, 0.09205, 0, 0.5],
    915: [0, 0.69444, 0.13372, 0, 0.54167],
    916: [0, 0.69444, 0, 0, 0.83334],
    920: [0, 0.69444, 0.07555, 0, 0.77778],
    923: [0, 0.69444, 0, 0, 0.61111],
    926: [0, 0.69444, 0.12816, 0, 0.66667],
    928: [0, 0.69444, 0.08094, 0, 0.70834],
    931: [0, 0.69444, 0.11983, 0, 0.72222],
    933: [0, 0.69444, 0.09031, 0, 0.77778],
    934: [0, 0.69444, 0.04603, 0, 0.72222],
    936: [0, 0.69444, 0.09031, 0, 0.77778],
    937: [0, 0.69444, 0.08293, 0, 0.72222],
    8211: [0, 0.44444, 0.08616, 0, 0.5],
    8212: [0, 0.44444, 0.08616, 0, 1],
    8216: [0, 0.69444, 0.07816, 0, 0.27778],
    8217: [0, 0.69444, 0.07816, 0, 0.27778],
    8220: [0, 0.69444, 0.14205, 0, 0.5],
    8221: [0, 0.69444, 316e-5, 0, 0.5]
  },
  "SansSerif-Regular": {
    32: [0, 0, 0, 0, 0.25],
    33: [0, 0.69444, 0, 0, 0.31945],
    34: [0, 0.69444, 0, 0, 0.5],
    35: [0.19444, 0.69444, 0, 0, 0.83334],
    36: [0.05556, 0.75, 0, 0, 0.5],
    37: [0.05556, 0.75, 0, 0, 0.83334],
    38: [0, 0.69444, 0, 0, 0.75834],
    39: [0, 0.69444, 0, 0, 0.27778],
    40: [0.25, 0.75, 0, 0, 0.38889],
    41: [0.25, 0.75, 0, 0, 0.38889],
    42: [0, 0.75, 0, 0, 0.5],
    43: [0.08333, 0.58333, 0, 0, 0.77778],
    44: [0.125, 0.08333, 0, 0, 0.27778],
    45: [0, 0.44444, 0, 0, 0.33333],
    46: [0, 0.08333, 0, 0, 0.27778],
    47: [0.25, 0.75, 0, 0, 0.5],
    48: [0, 0.65556, 0, 0, 0.5],
    49: [0, 0.65556, 0, 0, 0.5],
    50: [0, 0.65556, 0, 0, 0.5],
    51: [0, 0.65556, 0, 0, 0.5],
    52: [0, 0.65556, 0, 0, 0.5],
    53: [0, 0.65556, 0, 0, 0.5],
    54: [0, 0.65556, 0, 0, 0.5],
    55: [0, 0.65556, 0, 0, 0.5],
    56: [0, 0.65556, 0, 0, 0.5],
    57: [0, 0.65556, 0, 0, 0.5],
    58: [0, 0.44444, 0, 0, 0.27778],
    59: [0.125, 0.44444, 0, 0, 0.27778],
    61: [-0.13, 0.37, 0, 0, 0.77778],
    63: [0, 0.69444, 0, 0, 0.47222],
    64: [0, 0.69444, 0, 0, 0.66667],
    65: [0, 0.69444, 0, 0, 0.66667],
    66: [0, 0.69444, 0, 0, 0.66667],
    67: [0, 0.69444, 0, 0, 0.63889],
    68: [0, 0.69444, 0, 0, 0.72223],
    69: [0, 0.69444, 0, 0, 0.59722],
    70: [0, 0.69444, 0, 0, 0.56945],
    71: [0, 0.69444, 0, 0, 0.66667],
    72: [0, 0.69444, 0, 0, 0.70834],
    73: [0, 0.69444, 0, 0, 0.27778],
    74: [0, 0.69444, 0, 0, 0.47222],
    75: [0, 0.69444, 0, 0, 0.69445],
    76: [0, 0.69444, 0, 0, 0.54167],
    77: [0, 0.69444, 0, 0, 0.875],
    78: [0, 0.69444, 0, 0, 0.70834],
    79: [0, 0.69444, 0, 0, 0.73611],
    80: [0, 0.69444, 0, 0, 0.63889],
    81: [0.125, 0.69444, 0, 0, 0.73611],
    82: [0, 0.69444, 0, 0, 0.64584],
    83: [0, 0.69444, 0, 0, 0.55556],
    84: [0, 0.69444, 0, 0, 0.68056],
    85: [0, 0.69444, 0, 0, 0.6875],
    86: [0, 0.69444, 0.01389, 0, 0.66667],
    87: [0, 0.69444, 0.01389, 0, 0.94445],
    88: [0, 0.69444, 0, 0, 0.66667],
    89: [0, 0.69444, 0.025, 0, 0.66667],
    90: [0, 0.69444, 0, 0, 0.61111],
    91: [0.25, 0.75, 0, 0, 0.28889],
    93: [0.25, 0.75, 0, 0, 0.28889],
    94: [0, 0.69444, 0, 0, 0.5],
    95: [0.35, 0.09444, 0.02778, 0, 0.5],
    97: [0, 0.44444, 0, 0, 0.48056],
    98: [0, 0.69444, 0, 0, 0.51667],
    99: [0, 0.44444, 0, 0, 0.44445],
    100: [0, 0.69444, 0, 0, 0.51667],
    101: [0, 0.44444, 0, 0, 0.44445],
    102: [0, 0.69444, 0.06944, 0, 0.30556],
    103: [0.19444, 0.44444, 0.01389, 0, 0.5],
    104: [0, 0.69444, 0, 0, 0.51667],
    105: [0, 0.67937, 0, 0, 0.23889],
    106: [0.19444, 0.67937, 0, 0, 0.26667],
    107: [0, 0.69444, 0, 0, 0.48889],
    108: [0, 0.69444, 0, 0, 0.23889],
    109: [0, 0.44444, 0, 0, 0.79445],
    110: [0, 0.44444, 0, 0, 0.51667],
    111: [0, 0.44444, 0, 0, 0.5],
    112: [0.19444, 0.44444, 0, 0, 0.51667],
    113: [0.19444, 0.44444, 0, 0, 0.51667],
    114: [0, 0.44444, 0.01389, 0, 0.34167],
    115: [0, 0.44444, 0, 0, 0.38333],
    116: [0, 0.57143, 0, 0, 0.36111],
    117: [0, 0.44444, 0, 0, 0.51667],
    118: [0, 0.44444, 0.01389, 0, 0.46111],
    119: [0, 0.44444, 0.01389, 0, 0.68334],
    120: [0, 0.44444, 0, 0, 0.46111],
    121: [0.19444, 0.44444, 0.01389, 0, 0.46111],
    122: [0, 0.44444, 0, 0, 0.43472],
    126: [0.35, 0.32659, 0, 0, 0.5],
    160: [0, 0, 0, 0, 0.25],
    168: [0, 0.67937, 0, 0, 0.5],
    176: [0, 0.69444, 0, 0, 0.66667],
    184: [0.17014, 0, 0, 0, 0.44445],
    305: [0, 0.44444, 0, 0, 0.23889],
    567: [0.19444, 0.44444, 0, 0, 0.26667],
    710: [0, 0.69444, 0, 0, 0.5],
    711: [0, 0.63194, 0, 0, 0.5],
    713: [0, 0.60889, 0, 0, 0.5],
    714: [0, 0.69444, 0, 0, 0.5],
    715: [0, 0.69444, 0, 0, 0.5],
    728: [0, 0.69444, 0, 0, 0.5],
    729: [0, 0.67937, 0, 0, 0.27778],
    730: [0, 0.69444, 0, 0, 0.66667],
    732: [0, 0.67659, 0, 0, 0.5],
    733: [0, 0.69444, 0, 0, 0.5],
    915: [0, 0.69444, 0, 0, 0.54167],
    916: [0, 0.69444, 0, 0, 0.83334],
    920: [0, 0.69444, 0, 0, 0.77778],
    923: [0, 0.69444, 0, 0, 0.61111],
    926: [0, 0.69444, 0, 0, 0.66667],
    928: [0, 0.69444, 0, 0, 0.70834],
    931: [0, 0.69444, 0, 0, 0.72222],
    933: [0, 0.69444, 0, 0, 0.77778],
    934: [0, 0.69444, 0, 0, 0.72222],
    936: [0, 0.69444, 0, 0, 0.77778],
    937: [0, 0.69444, 0, 0, 0.72222],
    8211: [0, 0.44444, 0.02778, 0, 0.5],
    8212: [0, 0.44444, 0.02778, 0, 1],
    8216: [0, 0.69444, 0, 0, 0.27778],
    8217: [0, 0.69444, 0, 0, 0.27778],
    8220: [0, 0.69444, 0, 0, 0.5],
    8221: [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    32: [0, 0, 0, 0, 0.25],
    65: [0, 0.7, 0.22925, 0, 0.80253],
    66: [0, 0.7, 0.04087, 0, 0.90757],
    67: [0, 0.7, 0.1689, 0, 0.66619],
    68: [0, 0.7, 0.09371, 0, 0.77443],
    69: [0, 0.7, 0.18583, 0, 0.56162],
    70: [0, 0.7, 0.13634, 0, 0.89544],
    71: [0, 0.7, 0.17322, 0, 0.60961],
    72: [0, 0.7, 0.29694, 0, 0.96919],
    73: [0, 0.7, 0.19189, 0, 0.80907],
    74: [0.27778, 0.7, 0.19189, 0, 1.05159],
    75: [0, 0.7, 0.31259, 0, 0.91364],
    76: [0, 0.7, 0.19189, 0, 0.87373],
    77: [0, 0.7, 0.15981, 0, 1.08031],
    78: [0, 0.7, 0.3525, 0, 0.9015],
    79: [0, 0.7, 0.08078, 0, 0.73787],
    80: [0, 0.7, 0.08078, 0, 1.01262],
    81: [0, 0.7, 0.03305, 0, 0.88282],
    82: [0, 0.7, 0.06259, 0, 0.85],
    83: [0, 0.7, 0.19189, 0, 0.86767],
    84: [0, 0.7, 0.29087, 0, 0.74697],
    85: [0, 0.7, 0.25815, 0, 0.79996],
    86: [0, 0.7, 0.27523, 0, 0.62204],
    87: [0, 0.7, 0.27523, 0, 0.80532],
    88: [0, 0.7, 0.26006, 0, 0.94445],
    89: [0, 0.7, 0.2939, 0, 0.70961],
    90: [0, 0.7, 0.24037, 0, 0.8212],
    160: [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.35001, 0.85, 0, 0, 0.45834],
    41: [0.35001, 0.85, 0, 0, 0.45834],
    47: [0.35001, 0.85, 0, 0, 0.57778],
    91: [0.35001, 0.85, 0, 0, 0.41667],
    92: [0.35001, 0.85, 0, 0, 0.57778],
    93: [0.35001, 0.85, 0, 0, 0.41667],
    123: [0.35001, 0.85, 0, 0, 0.58334],
    125: [0.35001, 0.85, 0, 0, 0.58334],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.72222, 0, 0, 0.55556],
    732: [0, 0.72222, 0, 0, 0.55556],
    770: [0, 0.72222, 0, 0, 0.55556],
    771: [0, 0.72222, 0, 0, 0.55556],
    8214: [-99e-5, 0.601, 0, 0, 0.77778],
    8593: [1e-5, 0.6, 0, 0, 0.66667],
    8595: [1e-5, 0.6, 0, 0, 0.66667],
    8657: [1e-5, 0.6, 0, 0, 0.77778],
    8659: [1e-5, 0.6, 0, 0, 0.77778],
    8719: [0.25001, 0.75, 0, 0, 0.94445],
    8720: [0.25001, 0.75, 0, 0, 0.94445],
    8721: [0.25001, 0.75, 0, 0, 1.05556],
    8730: [0.35001, 0.85, 0, 0, 1],
    8739: [-599e-5, 0.606, 0, 0, 0.33333],
    8741: [-599e-5, 0.606, 0, 0, 0.55556],
    8747: [0.30612, 0.805, 0.19445, 0, 0.47222],
    8748: [0.306, 0.805, 0.19445, 0, 0.47222],
    8749: [0.306, 0.805, 0.19445, 0, 0.47222],
    8750: [0.30612, 0.805, 0.19445, 0, 0.47222],
    8896: [0.25001, 0.75, 0, 0, 0.83334],
    8897: [0.25001, 0.75, 0, 0, 0.83334],
    8898: [0.25001, 0.75, 0, 0, 0.83334],
    8899: [0.25001, 0.75, 0, 0, 0.83334],
    8968: [0.35001, 0.85, 0, 0, 0.47222],
    8969: [0.35001, 0.85, 0, 0, 0.47222],
    8970: [0.35001, 0.85, 0, 0, 0.47222],
    8971: [0.35001, 0.85, 0, 0, 0.47222],
    9168: [-99e-5, 0.601, 0, 0, 0.66667],
    10216: [0.35001, 0.85, 0, 0, 0.47222],
    10217: [0.35001, 0.85, 0, 0, 0.47222],
    10752: [0.25001, 0.75, 0, 0, 1.11111],
    10753: [0.25001, 0.75, 0, 0, 1.11111],
    10754: [0.25001, 0.75, 0, 0, 1.11111],
    10756: [0.25001, 0.75, 0, 0, 0.83334],
    10758: [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.65002, 1.15, 0, 0, 0.59722],
    41: [0.65002, 1.15, 0, 0, 0.59722],
    47: [0.65002, 1.15, 0, 0, 0.81111],
    91: [0.65002, 1.15, 0, 0, 0.47222],
    92: [0.65002, 1.15, 0, 0, 0.81111],
    93: [0.65002, 1.15, 0, 0, 0.47222],
    123: [0.65002, 1.15, 0, 0, 0.66667],
    125: [0.65002, 1.15, 0, 0, 0.66667],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.75, 0, 0, 1],
    732: [0, 0.75, 0, 0, 1],
    770: [0, 0.75, 0, 0, 1],
    771: [0, 0.75, 0, 0, 1],
    8719: [0.55001, 1.05, 0, 0, 1.27778],
    8720: [0.55001, 1.05, 0, 0, 1.27778],
    8721: [0.55001, 1.05, 0, 0, 1.44445],
    8730: [0.65002, 1.15, 0, 0, 1],
    8747: [0.86225, 1.36, 0.44445, 0, 0.55556],
    8748: [0.862, 1.36, 0.44445, 0, 0.55556],
    8749: [0.862, 1.36, 0.44445, 0, 0.55556],
    8750: [0.86225, 1.36, 0.44445, 0, 0.55556],
    8896: [0.55001, 1.05, 0, 0, 1.11111],
    8897: [0.55001, 1.05, 0, 0, 1.11111],
    8898: [0.55001, 1.05, 0, 0, 1.11111],
    8899: [0.55001, 1.05, 0, 0, 1.11111],
    8968: [0.65002, 1.15, 0, 0, 0.52778],
    8969: [0.65002, 1.15, 0, 0, 0.52778],
    8970: [0.65002, 1.15, 0, 0, 0.52778],
    8971: [0.65002, 1.15, 0, 0, 0.52778],
    10216: [0.65002, 1.15, 0, 0, 0.61111],
    10217: [0.65002, 1.15, 0, 0, 0.61111],
    10752: [0.55001, 1.05, 0, 0, 1.51112],
    10753: [0.55001, 1.05, 0, 0, 1.51112],
    10754: [0.55001, 1.05, 0, 0, 1.51112],
    10756: [0.55001, 1.05, 0, 0, 1.11111],
    10758: [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [0.95003, 1.45, 0, 0, 0.73611],
    41: [0.95003, 1.45, 0, 0, 0.73611],
    47: [0.95003, 1.45, 0, 0, 1.04445],
    91: [0.95003, 1.45, 0, 0, 0.52778],
    92: [0.95003, 1.45, 0, 0, 1.04445],
    93: [0.95003, 1.45, 0, 0, 0.52778],
    123: [0.95003, 1.45, 0, 0, 0.75],
    125: [0.95003, 1.45, 0, 0, 0.75],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.75, 0, 0, 1.44445],
    732: [0, 0.75, 0, 0, 1.44445],
    770: [0, 0.75, 0, 0, 1.44445],
    771: [0, 0.75, 0, 0, 1.44445],
    8730: [0.95003, 1.45, 0, 0, 1],
    8968: [0.95003, 1.45, 0, 0, 0.58334],
    8969: [0.95003, 1.45, 0, 0, 0.58334],
    8970: [0.95003, 1.45, 0, 0, 0.58334],
    8971: [0.95003, 1.45, 0, 0, 0.58334],
    10216: [0.95003, 1.45, 0, 0, 0.75],
    10217: [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    32: [0, 0, 0, 0, 0.25],
    40: [1.25003, 1.75, 0, 0, 0.79167],
    41: [1.25003, 1.75, 0, 0, 0.79167],
    47: [1.25003, 1.75, 0, 0, 1.27778],
    91: [1.25003, 1.75, 0, 0, 0.58334],
    92: [1.25003, 1.75, 0, 0, 1.27778],
    93: [1.25003, 1.75, 0, 0, 0.58334],
    123: [1.25003, 1.75, 0, 0, 0.80556],
    125: [1.25003, 1.75, 0, 0, 0.80556],
    160: [0, 0, 0, 0, 0.25],
    710: [0, 0.825, 0, 0, 1.8889],
    732: [0, 0.825, 0, 0, 1.8889],
    770: [0, 0.825, 0, 0, 1.8889],
    771: [0, 0.825, 0, 0, 1.8889],
    8730: [1.25003, 1.75, 0, 0, 1],
    8968: [1.25003, 1.75, 0, 0, 0.63889],
    8969: [1.25003, 1.75, 0, 0, 0.63889],
    8970: [1.25003, 1.75, 0, 0, 0.63889],
    8971: [1.25003, 1.75, 0, 0, 0.63889],
    9115: [0.64502, 1.155, 0, 0, 0.875],
    9116: [1e-5, 0.6, 0, 0, 0.875],
    9117: [0.64502, 1.155, 0, 0, 0.875],
    9118: [0.64502, 1.155, 0, 0, 0.875],
    9119: [1e-5, 0.6, 0, 0, 0.875],
    9120: [0.64502, 1.155, 0, 0, 0.875],
    9121: [0.64502, 1.155, 0, 0, 0.66667],
    9122: [-99e-5, 0.601, 0, 0, 0.66667],
    9123: [0.64502, 1.155, 0, 0, 0.66667],
    9124: [0.64502, 1.155, 0, 0, 0.66667],
    9125: [-99e-5, 0.601, 0, 0, 0.66667],
    9126: [0.64502, 1.155, 0, 0, 0.66667],
    9127: [1e-5, 0.9, 0, 0, 0.88889],
    9128: [0.65002, 1.15, 0, 0, 0.88889],
    9129: [0.90001, 0, 0, 0, 0.88889],
    9130: [0, 0.3, 0, 0, 0.88889],
    9131: [1e-5, 0.9, 0, 0, 0.88889],
    9132: [0.65002, 1.15, 0, 0, 0.88889],
    9133: [0.90001, 0, 0, 0, 0.88889],
    9143: [0.88502, 0.915, 0, 0, 1.05556],
    10216: [1.25003, 1.75, 0, 0, 0.80556],
    10217: [1.25003, 1.75, 0, 0, 0.80556],
    57344: [-499e-5, 0.605, 0, 0, 1.05556],
    57345: [-499e-5, 0.605, 0, 0, 1.05556],
    57680: [0, 0.12, 0, 0, 0.45],
    57681: [0, 0.12, 0, 0, 0.45],
    57682: [0, 0.12, 0, 0, 0.45],
    57683: [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    32: [0, 0, 0, 0, 0.525],
    33: [0, 0.61111, 0, 0, 0.525],
    34: [0, 0.61111, 0, 0, 0.525],
    35: [0, 0.61111, 0, 0, 0.525],
    36: [0.08333, 0.69444, 0, 0, 0.525],
    37: [0.08333, 0.69444, 0, 0, 0.525],
    38: [0, 0.61111, 0, 0, 0.525],
    39: [0, 0.61111, 0, 0, 0.525],
    40: [0.08333, 0.69444, 0, 0, 0.525],
    41: [0.08333, 0.69444, 0, 0, 0.525],
    42: [0, 0.52083, 0, 0, 0.525],
    43: [-0.08056, 0.53055, 0, 0, 0.525],
    44: [0.13889, 0.125, 0, 0, 0.525],
    45: [-0.08056, 0.53055, 0, 0, 0.525],
    46: [0, 0.125, 0, 0, 0.525],
    47: [0.08333, 0.69444, 0, 0, 0.525],
    48: [0, 0.61111, 0, 0, 0.525],
    49: [0, 0.61111, 0, 0, 0.525],
    50: [0, 0.61111, 0, 0, 0.525],
    51: [0, 0.61111, 0, 0, 0.525],
    52: [0, 0.61111, 0, 0, 0.525],
    53: [0, 0.61111, 0, 0, 0.525],
    54: [0, 0.61111, 0, 0, 0.525],
    55: [0, 0.61111, 0, 0, 0.525],
    56: [0, 0.61111, 0, 0, 0.525],
    57: [0, 0.61111, 0, 0, 0.525],
    58: [0, 0.43056, 0, 0, 0.525],
    59: [0.13889, 0.43056, 0, 0, 0.525],
    60: [-0.05556, 0.55556, 0, 0, 0.525],
    61: [-0.19549, 0.41562, 0, 0, 0.525],
    62: [-0.05556, 0.55556, 0, 0, 0.525],
    63: [0, 0.61111, 0, 0, 0.525],
    64: [0, 0.61111, 0, 0, 0.525],
    65: [0, 0.61111, 0, 0, 0.525],
    66: [0, 0.61111, 0, 0, 0.525],
    67: [0, 0.61111, 0, 0, 0.525],
    68: [0, 0.61111, 0, 0, 0.525],
    69: [0, 0.61111, 0, 0, 0.525],
    70: [0, 0.61111, 0, 0, 0.525],
    71: [0, 0.61111, 0, 0, 0.525],
    72: [0, 0.61111, 0, 0, 0.525],
    73: [0, 0.61111, 0, 0, 0.525],
    74: [0, 0.61111, 0, 0, 0.525],
    75: [0, 0.61111, 0, 0, 0.525],
    76: [0, 0.61111, 0, 0, 0.525],
    77: [0, 0.61111, 0, 0, 0.525],
    78: [0, 0.61111, 0, 0, 0.525],
    79: [0, 0.61111, 0, 0, 0.525],
    80: [0, 0.61111, 0, 0, 0.525],
    81: [0.13889, 0.61111, 0, 0, 0.525],
    82: [0, 0.61111, 0, 0, 0.525],
    83: [0, 0.61111, 0, 0, 0.525],
    84: [0, 0.61111, 0, 0, 0.525],
    85: [0, 0.61111, 0, 0, 0.525],
    86: [0, 0.61111, 0, 0, 0.525],
    87: [0, 0.61111, 0, 0, 0.525],
    88: [0, 0.61111, 0, 0, 0.525],
    89: [0, 0.61111, 0, 0, 0.525],
    90: [0, 0.61111, 0, 0, 0.525],
    91: [0.08333, 0.69444, 0, 0, 0.525],
    92: [0.08333, 0.69444, 0, 0, 0.525],
    93: [0.08333, 0.69444, 0, 0, 0.525],
    94: [0, 0.61111, 0, 0, 0.525],
    95: [0.09514, 0, 0, 0, 0.525],
    96: [0, 0.61111, 0, 0, 0.525],
    97: [0, 0.43056, 0, 0, 0.525],
    98: [0, 0.61111, 0, 0, 0.525],
    99: [0, 0.43056, 0, 0, 0.525],
    100: [0, 0.61111, 0, 0, 0.525],
    101: [0, 0.43056, 0, 0, 0.525],
    102: [0, 0.61111, 0, 0, 0.525],
    103: [0.22222, 0.43056, 0, 0, 0.525],
    104: [0, 0.61111, 0, 0, 0.525],
    105: [0, 0.61111, 0, 0, 0.525],
    106: [0.22222, 0.61111, 0, 0, 0.525],
    107: [0, 0.61111, 0, 0, 0.525],
    108: [0, 0.61111, 0, 0, 0.525],
    109: [0, 0.43056, 0, 0, 0.525],
    110: [0, 0.43056, 0, 0, 0.525],
    111: [0, 0.43056, 0, 0, 0.525],
    112: [0.22222, 0.43056, 0, 0, 0.525],
    113: [0.22222, 0.43056, 0, 0, 0.525],
    114: [0, 0.43056, 0, 0, 0.525],
    115: [0, 0.43056, 0, 0, 0.525],
    116: [0, 0.55358, 0, 0, 0.525],
    117: [0, 0.43056, 0, 0, 0.525],
    118: [0, 0.43056, 0, 0, 0.525],
    119: [0, 0.43056, 0, 0, 0.525],
    120: [0, 0.43056, 0, 0, 0.525],
    121: [0.22222, 0.43056, 0, 0, 0.525],
    122: [0, 0.43056, 0, 0, 0.525],
    123: [0.08333, 0.69444, 0, 0, 0.525],
    124: [0.08333, 0.69444, 0, 0, 0.525],
    125: [0.08333, 0.69444, 0, 0, 0.525],
    126: [0, 0.61111, 0, 0, 0.525],
    127: [0, 0.61111, 0, 0, 0.525],
    160: [0, 0, 0, 0, 0.525],
    176: [0, 0.61111, 0, 0, 0.525],
    184: [0.19445, 0, 0, 0, 0.525],
    305: [0, 0.43056, 0, 0, 0.525],
    567: [0.22222, 0.43056, 0, 0, 0.525],
    711: [0, 0.56597, 0, 0, 0.525],
    713: [0, 0.56555, 0, 0, 0.525],
    714: [0, 0.61111, 0, 0, 0.525],
    715: [0, 0.61111, 0, 0, 0.525],
    728: [0, 0.61111, 0, 0, 0.525],
    730: [0, 0.61111, 0, 0, 0.525],
    770: [0, 0.61111, 0, 0, 0.525],
    771: [0, 0.61111, 0, 0, 0.525],
    776: [0, 0.61111, 0, 0, 0.525],
    915: [0, 0.61111, 0, 0, 0.525],
    916: [0, 0.61111, 0, 0, 0.525],
    920: [0, 0.61111, 0, 0, 0.525],
    923: [0, 0.61111, 0, 0, 0.525],
    926: [0, 0.61111, 0, 0, 0.525],
    928: [0, 0.61111, 0, 0, 0.525],
    931: [0, 0.61111, 0, 0, 0.525],
    933: [0, 0.61111, 0, 0, 0.525],
    934: [0, 0.61111, 0, 0, 0.525],
    936: [0, 0.61111, 0, 0, 0.525],
    937: [0, 0.61111, 0, 0, 0.525],
    8216: [0, 0.61111, 0, 0, 0.525],
    8217: [0, 0.61111, 0, 0, 0.525],
    8242: [0, 0.61111, 0, 0, 0.525],
    9251: [0.11111, 0.21944, 0, 0, 0.525]
  }
}, U0 = {
  slant: [0.25, 0.25, 0.25],
  // sigma1
  space: [0, 0, 0],
  // sigma2
  stretch: [0, 0, 0],
  // sigma3
  shrink: [0, 0, 0],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1, 1.171, 1.472],
  // sigma6
  extraSpace: [0, 0, 0],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.15, 0.143, 0.2],
  // sigma16
  sub2: [0.247, 0.286, 0.4],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.05, 0.071, 0.1],
  // sigma19
  delim1: [2.39, 1.7, 1.98],
  // sigma20
  delim2: [1.01, 1.157, 1.42],
  // sigma21
  axisHeight: [0.25, 0.25, 0.25],
  // sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness: [0.04, 0.049, 0.049],
  // xi8; cmex7: 0.049
  bigOpSpacing1: [0.111, 0.111, 0.111],
  // xi9
  bigOpSpacing2: [0.166, 0.166, 0.166],
  // xi10
  bigOpSpacing3: [0.2, 0.2, 0.2],
  // xi11
  bigOpSpacing4: [0.6, 0.611, 0.611],
  // xi12; cmex7: 0.611
  bigOpSpacing5: [0.1, 0.143, 0.143],
  // xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  // This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.scss; if you change it make sure the
  // values match.
  ptPerEm: [10, 10, 10],
  // The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep: [0.2, 0.2, 0.2],
  // The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth: [0.04, 0.04, 0.04],
  // Two values from LaTeX source2e:
  fboxsep: [0.3, 0.3, 0.3],
  //        3 pt / ptPerEm
  fboxrule: [0.04, 0.04, 0.04]
  // 0.4 pt / ptPerEm
}, ea = {
  // Latin-1
  Å: "A",
  Ð: "D",
  Þ: "o",
  å: "a",
  ð: "d",
  þ: "o",
  // Cyrillic
  А: "A",
  Б: "B",
  В: "B",
  Г: "F",
  Д: "A",
  Е: "E",
  Ж: "K",
  З: "3",
  И: "N",
  Й: "N",
  К: "K",
  Л: "N",
  М: "M",
  Н: "H",
  О: "O",
  П: "N",
  Р: "P",
  С: "C",
  Т: "T",
  У: "y",
  Ф: "O",
  Х: "X",
  Ц: "U",
  Ч: "h",
  Ш: "W",
  Щ: "W",
  Ъ: "B",
  Ы: "X",
  Ь: "B",
  Э: "3",
  Ю: "X",
  Я: "R",
  а: "a",
  б: "b",
  в: "a",
  г: "r",
  д: "y",
  е: "e",
  ж: "m",
  з: "e",
  и: "n",
  й: "n",
  к: "n",
  л: "n",
  м: "m",
  н: "n",
  о: "o",
  п: "n",
  р: "p",
  с: "c",
  т: "o",
  у: "y",
  ф: "b",
  х: "x",
  ц: "n",
  ч: "n",
  ш: "w",
  щ: "w",
  ъ: "a",
  ы: "m",
  ь: "a",
  э: "e",
  ю: "m",
  я: "r"
};
function dr(a, e, t) {
  if (!We[e])
    throw new Error("Font metrics not found for font: " + e + ".");
  var r = a.charCodeAt(0), n = We[e][r];
  if (!n && a[0] in ea && (r = ea[a[0]].charCodeAt(0), n = We[e][r]), !n && t === "text" && tn(r) && (n = We[e][77]), n)
    return {
      depth: n[0],
      height: n[1],
      italic: n[2],
      skew: n[3],
      width: n[4]
    };
}
var Rt = {};
function Ks(a) {
  var e;
  if (a >= 5 ? e = 0 : a >= 3 ? e = 1 : e = 2, !Rt[e]) {
    var t = Rt[e] = {
      cssEmPerMu: U0.quad[e] / 18
    };
    for (var r in U0)
      U0.hasOwnProperty(r) && (t[r] = U0[r][e]);
  }
  return Rt[e];
}
var Js = [
  // Each element contains [textsize, scriptsize, scriptscriptsize].
  // The size mappings are taken from TeX with \normalsize=10pt.
  [1, 1, 1],
  // size1: [5, 5, 5]              \tiny
  [2, 1, 1],
  // size2: [6, 5, 5]
  [3, 1, 1],
  // size3: [7, 5, 5]              \scriptsize
  [4, 2, 1],
  // size4: [8, 6, 5]              \footnotesize
  [5, 2, 1],
  // size5: [9, 6, 5]              \small
  [6, 3, 1],
  // size6: [10, 7, 5]             \normalsize
  [7, 4, 2],
  // size7: [12, 8, 6]             \large
  [8, 6, 3],
  // size8: [14.4, 10, 7]          \Large
  [9, 7, 6],
  // size9: [17.28, 12, 10]        \LARGE
  [10, 8, 7],
  // size10: [20.74, 14.4, 12]     \huge
  [11, 10, 9]
  // size11: [24.88, 20.74, 17.28] \HUGE
], ta = [
  // fontMetrics.js:getGlobalMetrics also uses size indexes, so if
  // you change size indexes, change that function.
  0.5,
  0.6,
  0.7,
  0.8,
  0.9,
  1,
  1.2,
  1.44,
  1.728,
  2.074,
  2.488
], ra = function(e, t) {
  return t.size < 2 ? e : Js[e - 1][t.size - 1];
};
class je {
  // A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
  /**
   * The base size index.
   */
  constructor(e) {
    this.style = void 0, this.color = void 0, this.size = void 0, this.textSize = void 0, this.phantom = void 0, this.font = void 0, this.fontFamily = void 0, this.fontWeight = void 0, this.fontShape = void 0, this.sizeMultiplier = void 0, this.maxSize = void 0, this.minRuleThickness = void 0, this._fontMetrics = void 0, this.style = e.style, this.color = e.color, this.size = e.size || je.BASESIZE, this.textSize = e.textSize || this.size, this.phantom = !!e.phantom, this.font = e.font || "", this.fontFamily = e.fontFamily || "", this.fontWeight = e.fontWeight || "", this.fontShape = e.fontShape || "", this.sizeMultiplier = ta[this.size - 1], this.maxSize = e.maxSize, this.minRuleThickness = e.minRuleThickness, this._fontMetrics = void 0;
  }
  /**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */
  extend(e) {
    var t = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };
    for (var r in e)
      e.hasOwnProperty(r) && (t[r] = e[r]);
    return new je(t);
  }
  /**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */
  havingStyle(e) {
    return this.style === e ? this : this.extend({
      style: e,
      size: ra(this.textSize, e)
    });
  }
  /**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */
  havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  /**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */
  havingSize(e) {
    return this.size === e && this.textSize === e ? this : this.extend({
      style: this.style.text(),
      size: e,
      textSize: e,
      sizeMultiplier: ta[e - 1]
    });
  }
  /**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */
  havingBaseStyle(e) {
    e = e || this.style.text();
    var t = ra(je.BASESIZE, e);
    return this.size === t && this.textSize === je.BASESIZE && this.style === e ? this : this.extend({
      style: e,
      size: t
    });
  }
  /**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */
  havingBaseSizing() {
    var e;
    switch (this.style.id) {
      case 4:
      case 5:
        e = 3;
        break;
      case 6:
      case 7:
        e = 1;
        break;
      default:
        e = 6;
    }
    return this.extend({
      style: this.style.text(),
      size: e
    });
  }
  /**
   * Create a new options object with the given color.
   */
  withColor(e) {
    return this.extend({
      color: e
    });
  }
  /**
   * Create a new options object with "phantom" set to true.
   */
  withPhantom() {
    return this.extend({
      phantom: !0
    });
  }
  /**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */
  withFont(e) {
    return this.extend({
      font: e
    });
  }
  /**
   * Create a new options objects with the given fontFamily.
   */
  withTextFontFamily(e) {
    return this.extend({
      fontFamily: e,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontWeight(e) {
    return this.extend({
      fontWeight: e,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontShape(e) {
    return this.extend({
      fontShape: e,
      font: ""
    });
  }
  /**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */
  sizingClasses(e) {
    return e.size !== this.size ? ["sizing", "reset-size" + e.size, "size" + this.size] : [];
  }
  /**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */
  baseSizingClasses() {
    return this.size !== je.BASESIZE ? ["sizing", "reset-size" + this.size, "size" + je.BASESIZE] : [];
  }
  /**
   * Return the font metrics for this size.
   */
  fontMetrics() {
    return this._fontMetrics || (this._fontMetrics = Ks(this.size)), this._fontMetrics;
  }
  /**
   * Gets the CSS color of the current options object
   */
  getColor() {
    return this.phantom ? "transparent" : this.color;
  }
}
je.BASESIZE = 6;
var ar = {
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  pt: 1,
  // TeX point
  mm: 7227 / 2540,
  // millimeter
  cm: 7227 / 254,
  // centimeter
  in: 72.27,
  // inch
  bp: 803 / 800,
  // big (PostScript) points
  pc: 12,
  // pica
  dd: 1238 / 1157,
  // didot
  cc: 14856 / 1157,
  // cicero (12 didot)
  nd: 685 / 642,
  // new didot
  nc: 1370 / 107,
  // new cicero (12 new didot)
  sp: 1 / 65536,
  // scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  px: 803 / 800
  // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
}, Qs = {
  ex: !0,
  em: !0,
  mu: !0
}, rn = function(e) {
  return typeof e != "string" && (e = e.unit), e in ar || e in Qs || e === "ex";
}, se = function(e, t) {
  var r;
  if (e.unit in ar)
    r = ar[e.unit] / t.fontMetrics().ptPerEm / t.sizeMultiplier;
  else if (e.unit === "mu")
    r = t.fontMetrics().cssEmPerMu;
  else {
    var n;
    if (t.style.isTight() ? n = t.havingStyle(t.style.text()) : n = t, e.unit === "ex")
      r = n.fontMetrics().xHeight;
    else if (e.unit === "em")
      r = n.fontMetrics().quad;
    else
      throw new I("Invalid unit: '" + e.unit + "'");
    n !== t && (r *= n.sizeMultiplier / t.sizeMultiplier);
  }
  return Math.min(e.number * r, t.maxSize);
}, L = function(e) {
  return +e.toFixed(4) + "em";
}, i0 = function(e) {
  return e.filter((t) => t).join(" ");
}, an = function(e, t, r) {
  if (this.classes = e || [], this.attributes = {}, this.height = 0, this.depth = 0, this.maxFontSize = 0, this.style = r || {}, t) {
    t.style.isTight() && this.classes.push("mtight");
    var n = t.getColor();
    n && (this.style.color = n);
  }
}, nn = function(e) {
  var t = document.createElement(e);
  t.className = i0(this.classes);
  for (var r in this.style)
    this.style.hasOwnProperty(r) && (t.style[r] = this.style[r]);
  for (var n in this.attributes)
    this.attributes.hasOwnProperty(n) && t.setAttribute(n, this.attributes[n]);
  for (var i = 0; i < this.children.length; i++)
    t.appendChild(this.children[i].toNode());
  return t;
}, el = /[\s"'>/=\x00-\x1f]/, sn = function(e) {
  var t = "<" + e;
  this.classes.length && (t += ' class="' + H.escape(i0(this.classes)) + '"');
  var r = "";
  for (var n in this.style)
    this.style.hasOwnProperty(n) && (r += H.hyphenate(n) + ":" + this.style[n] + ";");
  r && (t += ' style="' + H.escape(r) + '"');
  for (var i in this.attributes)
    if (this.attributes.hasOwnProperty(i)) {
      if (el.test(i))
        throw new I("Invalid attribute name '" + i + "'");
      t += " " + i + '="' + H.escape(this.attributes[i]) + '"';
    }
  t += ">";
  for (var s = 0; s < this.children.length; s++)
    t += this.children[s].toMarkup();
  return t += "</" + e + ">", t;
};
class vt {
  constructor(e, t, r, n) {
    this.children = void 0, this.attributes = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.width = void 0, this.maxFontSize = void 0, this.style = void 0, an.call(this, e, r, n), this.children = t || [];
  }
  /**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */
  setAttribute(e, t) {
    this.attributes[e] = t;
  }
  hasClass(e) {
    return H.contains(this.classes, e);
  }
  toNode() {
    return nn.call(this, "span");
  }
  toMarkup() {
    return sn.call(this, "span");
  }
}
class ln {
  constructor(e, t, r, n) {
    this.children = void 0, this.attributes = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, an.call(this, t, n), this.children = r || [], this.setAttribute("href", e);
  }
  setAttribute(e, t) {
    this.attributes[e] = t;
  }
  hasClass(e) {
    return H.contains(this.classes, e);
  }
  toNode() {
    return nn.call(this, "a");
  }
  toMarkup() {
    return sn.call(this, "a");
  }
}
class tl {
  constructor(e, t, r) {
    this.src = void 0, this.alt = void 0, this.classes = void 0, this.height = void 0, this.depth = void 0, this.maxFontSize = void 0, this.style = void 0, this.alt = t, this.src = e, this.classes = ["mord"], this.style = r;
  }
  hasClass(e) {
    return H.contains(this.classes, e);
  }
  toNode() {
    var e = document.createElement("img");
    e.src = this.src, e.alt = this.alt, e.className = "mord";
    for (var t in this.style)
      this.style.hasOwnProperty(t) && (e.style[t] = this.style[t]);
    return e;
  }
  toMarkup() {
    var e = '<img src="' + H.escape(this.src) + '"' + (' alt="' + H.escape(this.alt) + '"'), t = "";
    for (var r in this.style)
      this.style.hasOwnProperty(r) && (t += H.hyphenate(r) + ":" + this.style[r] + ";");
    return t && (e += ' style="' + H.escape(t) + '"'), e += "'/>", e;
  }
}
var rl = {
  î: "ı̂",
  ï: "ı̈",
  í: "ı́",
  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
  ì: "ı̀"
};
class Oe {
  constructor(e, t, r, n, i, s, u, c) {
    this.text = void 0, this.height = void 0, this.depth = void 0, this.italic = void 0, this.skew = void 0, this.width = void 0, this.maxFontSize = void 0, this.classes = void 0, this.style = void 0, this.text = e, this.height = t || 0, this.depth = r || 0, this.italic = n || 0, this.skew = i || 0, this.width = s || 0, this.classes = u || [], this.style = c || {}, this.maxFontSize = 0;
    var m = Hs(this.text.charCodeAt(0));
    m && this.classes.push(m + "_fallback"), /[îïíì]/.test(this.text) && (this.text = rl[this.text]);
  }
  hasClass(e) {
    return H.contains(this.classes, e);
  }
  /**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */
  toNode() {
    var e = document.createTextNode(this.text), t = null;
    this.italic > 0 && (t = document.createElement("span"), t.style.marginRight = L(this.italic)), this.classes.length > 0 && (t = t || document.createElement("span"), t.className = i0(this.classes));
    for (var r in this.style)
      this.style.hasOwnProperty(r) && (t = t || document.createElement("span"), t.style[r] = this.style[r]);
    return t ? (t.appendChild(e), t) : e;
  }
  /**
   * Creates markup for a symbol node.
   */
  toMarkup() {
    var e = !1, t = "<span";
    this.classes.length && (e = !0, t += ' class="', t += H.escape(i0(this.classes)), t += '"');
    var r = "";
    this.italic > 0 && (r += "margin-right:" + this.italic + "em;");
    for (var n in this.style)
      this.style.hasOwnProperty(n) && (r += H.hyphenate(n) + ":" + this.style[n] + ";");
    r && (e = !0, t += ' style="' + H.escape(r) + '"');
    var i = H.escape(this.text);
    return e ? (t += ">", t += i, t += "</span>", t) : i;
  }
}
class s0 {
  constructor(e, t) {
    this.children = void 0, this.attributes = void 0, this.children = e || [], this.attributes = t || {};
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", t = document.createElementNS(e, "svg");
    for (var r in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r) && t.setAttribute(r, this.attributes[r]);
    for (var n = 0; n < this.children.length; n++)
      t.appendChild(this.children[n].toNode());
    return t;
  }
  toMarkup() {
    var e = '<svg xmlns="http://www.w3.org/2000/svg"';
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && (e += " " + t + '="' + H.escape(this.attributes[t]) + '"');
    e += ">";
    for (var r = 0; r < this.children.length; r++)
      e += this.children[r].toMarkup();
    return e += "</svg>", e;
  }
}
class f0 {
  constructor(e, t) {
    this.pathName = void 0, this.alternate = void 0, this.pathName = e, this.alternate = t;
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", t = document.createElementNS(e, "path");
    return this.alternate ? t.setAttribute("d", this.alternate) : t.setAttribute("d", Qr[this.pathName]), t;
  }
  toMarkup() {
    return this.alternate ? '<path d="' + H.escape(this.alternate) + '"/>' : '<path d="' + H.escape(Qr[this.pathName]) + '"/>';
  }
}
class aa {
  constructor(e) {
    this.attributes = void 0, this.attributes = e || {};
  }
  toNode() {
    var e = "http://www.w3.org/2000/svg", t = document.createElementNS(e, "line");
    for (var r in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, r) && t.setAttribute(r, this.attributes[r]);
    return t;
  }
  toMarkup() {
    var e = "<line";
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && (e += " " + t + '="' + H.escape(this.attributes[t]) + '"');
    return e += "/>", e;
  }
}
function na(a) {
  if (a instanceof Oe)
    return a;
  throw new Error("Expected symbolNode but got " + String(a) + ".");
}
function al(a) {
  if (a instanceof vt)
    return a;
  throw new Error("Expected span<HtmlDomNode> but got " + String(a) + ".");
}
var nl = {
  bin: 1,
  close: 1,
  inner: 1,
  open: 1,
  punct: 1,
  rel: 1
}, il = {
  "accent-token": 1,
  mathord: 1,
  "op-token": 1,
  spacing: 1,
  textord: 1
}, ee = {
  math: {},
  text: {}
};
function l(a, e, t, r, n, i) {
  ee[a][n] = {
    font: e,
    group: t,
    replace: r
  }, i && r && (ee[a][r] = ee[a][n]);
}
var o = "math", z = "text", h = "main", f = "ams", ne = "accent-token", P = "bin", be = "close", S0 = "inner", $ = "mathord", ce = "op-token", Ae = "open", bt = "punct", v = "rel", Je = "spacing", y = "textord";
l(o, h, v, "≡", "\\equiv", !0);
l(o, h, v, "≺", "\\prec", !0);
l(o, h, v, "≻", "\\succ", !0);
l(o, h, v, "∼", "\\sim", !0);
l(o, h, v, "⊥", "\\perp");
l(o, h, v, "⪯", "\\preceq", !0);
l(o, h, v, "⪰", "\\succeq", !0);
l(o, h, v, "≃", "\\simeq", !0);
l(o, h, v, "∣", "\\mid", !0);
l(o, h, v, "≪", "\\ll", !0);
l(o, h, v, "≫", "\\gg", !0);
l(o, h, v, "≍", "\\asymp", !0);
l(o, h, v, "∥", "\\parallel");
l(o, h, v, "⋈", "\\bowtie", !0);
l(o, h, v, "⌣", "\\smile", !0);
l(o, h, v, "⊑", "\\sqsubseteq", !0);
l(o, h, v, "⊒", "\\sqsupseteq", !0);
l(o, h, v, "≐", "\\doteq", !0);
l(o, h, v, "⌢", "\\frown", !0);
l(o, h, v, "∋", "\\ni", !0);
l(o, h, v, "∝", "\\propto", !0);
l(o, h, v, "⊢", "\\vdash", !0);
l(o, h, v, "⊣", "\\dashv", !0);
l(o, h, v, "∋", "\\owns");
l(o, h, bt, ".", "\\ldotp");
l(o, h, bt, "⋅", "\\cdotp");
l(o, h, y, "#", "\\#");
l(z, h, y, "#", "\\#");
l(o, h, y, "&", "\\&");
l(z, h, y, "&", "\\&");
l(o, h, y, "ℵ", "\\aleph", !0);
l(o, h, y, "∀", "\\forall", !0);
l(o, h, y, "ℏ", "\\hbar", !0);
l(o, h, y, "∃", "\\exists", !0);
l(o, h, y, "∇", "\\nabla", !0);
l(o, h, y, "♭", "\\flat", !0);
l(o, h, y, "ℓ", "\\ell", !0);
l(o, h, y, "♮", "\\natural", !0);
l(o, h, y, "♣", "\\clubsuit", !0);
l(o, h, y, "℘", "\\wp", !0);
l(o, h, y, "♯", "\\sharp", !0);
l(o, h, y, "♢", "\\diamondsuit", !0);
l(o, h, y, "ℜ", "\\Re", !0);
l(o, h, y, "♡", "\\heartsuit", !0);
l(o, h, y, "ℑ", "\\Im", !0);
l(o, h, y, "♠", "\\spadesuit", !0);
l(o, h, y, "§", "\\S", !0);
l(z, h, y, "§", "\\S");
l(o, h, y, "¶", "\\P", !0);
l(z, h, y, "¶", "\\P");
l(o, h, y, "†", "\\dag");
l(z, h, y, "†", "\\dag");
l(z, h, y, "†", "\\textdagger");
l(o, h, y, "‡", "\\ddag");
l(z, h, y, "‡", "\\ddag");
l(z, h, y, "‡", "\\textdaggerdbl");
l(o, h, be, "⎱", "\\rmoustache", !0);
l(o, h, Ae, "⎰", "\\lmoustache", !0);
l(o, h, be, "⟯", "\\rgroup", !0);
l(o, h, Ae, "⟮", "\\lgroup", !0);
l(o, h, P, "∓", "\\mp", !0);
l(o, h, P, "⊖", "\\ominus", !0);
l(o, h, P, "⊎", "\\uplus", !0);
l(o, h, P, "⊓", "\\sqcap", !0);
l(o, h, P, "∗", "\\ast");
l(o, h, P, "⊔", "\\sqcup", !0);
l(o, h, P, "◯", "\\bigcirc", !0);
l(o, h, P, "∙", "\\bullet", !0);
l(o, h, P, "‡", "\\ddagger");
l(o, h, P, "≀", "\\wr", !0);
l(o, h, P, "⨿", "\\amalg");
l(o, h, P, "&", "\\And");
l(o, h, v, "⟵", "\\longleftarrow", !0);
l(o, h, v, "⇐", "\\Leftarrow", !0);
l(o, h, v, "⟸", "\\Longleftarrow", !0);
l(o, h, v, "⟶", "\\longrightarrow", !0);
l(o, h, v, "⇒", "\\Rightarrow", !0);
l(o, h, v, "⟹", "\\Longrightarrow", !0);
l(o, h, v, "↔", "\\leftrightarrow", !0);
l(o, h, v, "⟷", "\\longleftrightarrow", !0);
l(o, h, v, "⇔", "\\Leftrightarrow", !0);
l(o, h, v, "⟺", "\\Longleftrightarrow", !0);
l(o, h, v, "↦", "\\mapsto", !0);
l(o, h, v, "⟼", "\\longmapsto", !0);
l(o, h, v, "↗", "\\nearrow", !0);
l(o, h, v, "↩", "\\hookleftarrow", !0);
l(o, h, v, "↪", "\\hookrightarrow", !0);
l(o, h, v, "↘", "\\searrow", !0);
l(o, h, v, "↼", "\\leftharpoonup", !0);
l(o, h, v, "⇀", "\\rightharpoonup", !0);
l(o, h, v, "↙", "\\swarrow", !0);
l(o, h, v, "↽", "\\leftharpoondown", !0);
l(o, h, v, "⇁", "\\rightharpoondown", !0);
l(o, h, v, "↖", "\\nwarrow", !0);
l(o, h, v, "⇌", "\\rightleftharpoons", !0);
l(o, f, v, "≮", "\\nless", !0);
l(o, f, v, "", "\\@nleqslant");
l(o, f, v, "", "\\@nleqq");
l(o, f, v, "⪇", "\\lneq", !0);
l(o, f, v, "≨", "\\lneqq", !0);
l(o, f, v, "", "\\@lvertneqq");
l(o, f, v, "⋦", "\\lnsim", !0);
l(o, f, v, "⪉", "\\lnapprox", !0);
l(o, f, v, "⊀", "\\nprec", !0);
l(o, f, v, "⋠", "\\npreceq", !0);
l(o, f, v, "⋨", "\\precnsim", !0);
l(o, f, v, "⪹", "\\precnapprox", !0);
l(o, f, v, "≁", "\\nsim", !0);
l(o, f, v, "", "\\@nshortmid");
l(o, f, v, "∤", "\\nmid", !0);
l(o, f, v, "⊬", "\\nvdash", !0);
l(o, f, v, "⊭", "\\nvDash", !0);
l(o, f, v, "⋪", "\\ntriangleleft");
l(o, f, v, "⋬", "\\ntrianglelefteq", !0);
l(o, f, v, "⊊", "\\subsetneq", !0);
l(o, f, v, "", "\\@varsubsetneq");
l(o, f, v, "⫋", "\\subsetneqq", !0);
l(o, f, v, "", "\\@varsubsetneqq");
l(o, f, v, "≯", "\\ngtr", !0);
l(o, f, v, "", "\\@ngeqslant");
l(o, f, v, "", "\\@ngeqq");
l(o, f, v, "⪈", "\\gneq", !0);
l(o, f, v, "≩", "\\gneqq", !0);
l(o, f, v, "", "\\@gvertneqq");
l(o, f, v, "⋧", "\\gnsim", !0);
l(o, f, v, "⪊", "\\gnapprox", !0);
l(o, f, v, "⊁", "\\nsucc", !0);
l(o, f, v, "⋡", "\\nsucceq", !0);
l(o, f, v, "⋩", "\\succnsim", !0);
l(o, f, v, "⪺", "\\succnapprox", !0);
l(o, f, v, "≆", "\\ncong", !0);
l(o, f, v, "", "\\@nshortparallel");
l(o, f, v, "∦", "\\nparallel", !0);
l(o, f, v, "⊯", "\\nVDash", !0);
l(o, f, v, "⋫", "\\ntriangleright");
l(o, f, v, "⋭", "\\ntrianglerighteq", !0);
l(o, f, v, "", "\\@nsupseteqq");
l(o, f, v, "⊋", "\\supsetneq", !0);
l(o, f, v, "", "\\@varsupsetneq");
l(o, f, v, "⫌", "\\supsetneqq", !0);
l(o, f, v, "", "\\@varsupsetneqq");
l(o, f, v, "⊮", "\\nVdash", !0);
l(o, f, v, "⪵", "\\precneqq", !0);
l(o, f, v, "⪶", "\\succneqq", !0);
l(o, f, v, "", "\\@nsubseteqq");
l(o, f, P, "⊴", "\\unlhd");
l(o, f, P, "⊵", "\\unrhd");
l(o, f, v, "↚", "\\nleftarrow", !0);
l(o, f, v, "↛", "\\nrightarrow", !0);
l(o, f, v, "⇍", "\\nLeftarrow", !0);
l(o, f, v, "⇏", "\\nRightarrow", !0);
l(o, f, v, "↮", "\\nleftrightarrow", !0);
l(o, f, v, "⇎", "\\nLeftrightarrow", !0);
l(o, f, v, "△", "\\vartriangle");
l(o, f, y, "ℏ", "\\hslash");
l(o, f, y, "▽", "\\triangledown");
l(o, f, y, "◊", "\\lozenge");
l(o, f, y, "Ⓢ", "\\circledS");
l(o, f, y, "®", "\\circledR");
l(z, f, y, "®", "\\circledR");
l(o, f, y, "∡", "\\measuredangle", !0);
l(o, f, y, "∄", "\\nexists");
l(o, f, y, "℧", "\\mho");
l(o, f, y, "Ⅎ", "\\Finv", !0);
l(o, f, y, "⅁", "\\Game", !0);
l(o, f, y, "‵", "\\backprime");
l(o, f, y, "▲", "\\blacktriangle");
l(o, f, y, "▼", "\\blacktriangledown");
l(o, f, y, "■", "\\blacksquare");
l(o, f, y, "⧫", "\\blacklozenge");
l(o, f, y, "★", "\\bigstar");
l(o, f, y, "∢", "\\sphericalangle", !0);
l(o, f, y, "∁", "\\complement", !0);
l(o, f, y, "ð", "\\eth", !0);
l(z, h, y, "ð", "ð");
l(o, f, y, "╱", "\\diagup");
l(o, f, y, "╲", "\\diagdown");
l(o, f, y, "□", "\\square");
l(o, f, y, "□", "\\Box");
l(o, f, y, "◊", "\\Diamond");
l(o, f, y, "¥", "\\yen", !0);
l(z, f, y, "¥", "\\yen", !0);
l(o, f, y, "✓", "\\checkmark", !0);
l(z, f, y, "✓", "\\checkmark");
l(o, f, y, "ℶ", "\\beth", !0);
l(o, f, y, "ℸ", "\\daleth", !0);
l(o, f, y, "ℷ", "\\gimel", !0);
l(o, f, y, "ϝ", "\\digamma", !0);
l(o, f, y, "ϰ", "\\varkappa");
l(o, f, Ae, "┌", "\\@ulcorner", !0);
l(o, f, be, "┐", "\\@urcorner", !0);
l(o, f, Ae, "└", "\\@llcorner", !0);
l(o, f, be, "┘", "\\@lrcorner", !0);
l(o, f, v, "≦", "\\leqq", !0);
l(o, f, v, "⩽", "\\leqslant", !0);
l(o, f, v, "⪕", "\\eqslantless", !0);
l(o, f, v, "≲", "\\lesssim", !0);
l(o, f, v, "⪅", "\\lessapprox", !0);
l(o, f, v, "≊", "\\approxeq", !0);
l(o, f, P, "⋖", "\\lessdot");
l(o, f, v, "⋘", "\\lll", !0);
l(o, f, v, "≶", "\\lessgtr", !0);
l(o, f, v, "⋚", "\\lesseqgtr", !0);
l(o, f, v, "⪋", "\\lesseqqgtr", !0);
l(o, f, v, "≑", "\\doteqdot");
l(o, f, v, "≓", "\\risingdotseq", !0);
l(o, f, v, "≒", "\\fallingdotseq", !0);
l(o, f, v, "∽", "\\backsim", !0);
l(o, f, v, "⋍", "\\backsimeq", !0);
l(o, f, v, "⫅", "\\subseteqq", !0);
l(o, f, v, "⋐", "\\Subset", !0);
l(o, f, v, "⊏", "\\sqsubset", !0);
l(o, f, v, "≼", "\\preccurlyeq", !0);
l(o, f, v, "⋞", "\\curlyeqprec", !0);
l(o, f, v, "≾", "\\precsim", !0);
l(o, f, v, "⪷", "\\precapprox", !0);
l(o, f, v, "⊲", "\\vartriangleleft");
l(o, f, v, "⊴", "\\trianglelefteq");
l(o, f, v, "⊨", "\\vDash", !0);
l(o, f, v, "⊪", "\\Vvdash", !0);
l(o, f, v, "⌣", "\\smallsmile");
l(o, f, v, "⌢", "\\smallfrown");
l(o, f, v, "≏", "\\bumpeq", !0);
l(o, f, v, "≎", "\\Bumpeq", !0);
l(o, f, v, "≧", "\\geqq", !0);
l(o, f, v, "⩾", "\\geqslant", !0);
l(o, f, v, "⪖", "\\eqslantgtr", !0);
l(o, f, v, "≳", "\\gtrsim", !0);
l(o, f, v, "⪆", "\\gtrapprox", !0);
l(o, f, P, "⋗", "\\gtrdot");
l(o, f, v, "⋙", "\\ggg", !0);
l(o, f, v, "≷", "\\gtrless", !0);
l(o, f, v, "⋛", "\\gtreqless", !0);
l(o, f, v, "⪌", "\\gtreqqless", !0);
l(o, f, v, "≖", "\\eqcirc", !0);
l(o, f, v, "≗", "\\circeq", !0);
l(o, f, v, "≜", "\\triangleq", !0);
l(o, f, v, "∼", "\\thicksim");
l(o, f, v, "≈", "\\thickapprox");
l(o, f, v, "⫆", "\\supseteqq", !0);
l(o, f, v, "⋑", "\\Supset", !0);
l(o, f, v, "⊐", "\\sqsupset", !0);
l(o, f, v, "≽", "\\succcurlyeq", !0);
l(o, f, v, "⋟", "\\curlyeqsucc", !0);
l(o, f, v, "≿", "\\succsim", !0);
l(o, f, v, "⪸", "\\succapprox", !0);
l(o, f, v, "⊳", "\\vartriangleright");
l(o, f, v, "⊵", "\\trianglerighteq");
l(o, f, v, "⊩", "\\Vdash", !0);
l(o, f, v, "∣", "\\shortmid");
l(o, f, v, "∥", "\\shortparallel");
l(o, f, v, "≬", "\\between", !0);
l(o, f, v, "⋔", "\\pitchfork", !0);
l(o, f, v, "∝", "\\varpropto");
l(o, f, v, "◀", "\\blacktriangleleft");
l(o, f, v, "∴", "\\therefore", !0);
l(o, f, v, "∍", "\\backepsilon");
l(o, f, v, "▶", "\\blacktriangleright");
l(o, f, v, "∵", "\\because", !0);
l(o, f, v, "⋘", "\\llless");
l(o, f, v, "⋙", "\\gggtr");
l(o, f, P, "⊲", "\\lhd");
l(o, f, P, "⊳", "\\rhd");
l(o, f, v, "≂", "\\eqsim", !0);
l(o, h, v, "⋈", "\\Join");
l(o, f, v, "≑", "\\Doteq", !0);
l(o, f, P, "∔", "\\dotplus", !0);
l(o, f, P, "∖", "\\smallsetminus");
l(o, f, P, "⋒", "\\Cap", !0);
l(o, f, P, "⋓", "\\Cup", !0);
l(o, f, P, "⩞", "\\doublebarwedge", !0);
l(o, f, P, "⊟", "\\boxminus", !0);
l(o, f, P, "⊞", "\\boxplus", !0);
l(o, f, P, "⋇", "\\divideontimes", !0);
l(o, f, P, "⋉", "\\ltimes", !0);
l(o, f, P, "⋊", "\\rtimes", !0);
l(o, f, P, "⋋", "\\leftthreetimes", !0);
l(o, f, P, "⋌", "\\rightthreetimes", !0);
l(o, f, P, "⋏", "\\curlywedge", !0);
l(o, f, P, "⋎", "\\curlyvee", !0);
l(o, f, P, "⊝", "\\circleddash", !0);
l(o, f, P, "⊛", "\\circledast", !0);
l(o, f, P, "⋅", "\\centerdot");
l(o, f, P, "⊺", "\\intercal", !0);
l(o, f, P, "⋒", "\\doublecap");
l(o, f, P, "⋓", "\\doublecup");
l(o, f, P, "⊠", "\\boxtimes", !0);
l(o, f, v, "⇢", "\\dashrightarrow", !0);
l(o, f, v, "⇠", "\\dashleftarrow", !0);
l(o, f, v, "⇇", "\\leftleftarrows", !0);
l(o, f, v, "⇆", "\\leftrightarrows", !0);
l(o, f, v, "⇚", "\\Lleftarrow", !0);
l(o, f, v, "↞", "\\twoheadleftarrow", !0);
l(o, f, v, "↢", "\\leftarrowtail", !0);
l(o, f, v, "↫", "\\looparrowleft", !0);
l(o, f, v, "⇋", "\\leftrightharpoons", !0);
l(o, f, v, "↶", "\\curvearrowleft", !0);
l(o, f, v, "↺", "\\circlearrowleft", !0);
l(o, f, v, "↰", "\\Lsh", !0);
l(o, f, v, "⇈", "\\upuparrows", !0);
l(o, f, v, "↿", "\\upharpoonleft", !0);
l(o, f, v, "⇃", "\\downharpoonleft", !0);
l(o, h, v, "⊶", "\\origof", !0);
l(o, h, v, "⊷", "\\imageof", !0);
l(o, f, v, "⊸", "\\multimap", !0);
l(o, f, v, "↭", "\\leftrightsquigarrow", !0);
l(o, f, v, "⇉", "\\rightrightarrows", !0);
l(o, f, v, "⇄", "\\rightleftarrows", !0);
l(o, f, v, "↠", "\\twoheadrightarrow", !0);
l(o, f, v, "↣", "\\rightarrowtail", !0);
l(o, f, v, "↬", "\\looparrowright", !0);
l(o, f, v, "↷", "\\curvearrowright", !0);
l(o, f, v, "↻", "\\circlearrowright", !0);
l(o, f, v, "↱", "\\Rsh", !0);
l(o, f, v, "⇊", "\\downdownarrows", !0);
l(o, f, v, "↾", "\\upharpoonright", !0);
l(o, f, v, "⇂", "\\downharpoonright", !0);
l(o, f, v, "⇝", "\\rightsquigarrow", !0);
l(o, f, v, "⇝", "\\leadsto");
l(o, f, v, "⇛", "\\Rrightarrow", !0);
l(o, f, v, "↾", "\\restriction");
l(o, h, y, "‘", "`");
l(o, h, y, "$", "\\$");
l(z, h, y, "$", "\\$");
l(z, h, y, "$", "\\textdollar");
l(o, h, y, "%", "\\%");
l(z, h, y, "%", "\\%");
l(o, h, y, "_", "\\_");
l(z, h, y, "_", "\\_");
l(z, h, y, "_", "\\textunderscore");
l(o, h, y, "∠", "\\angle", !0);
l(o, h, y, "∞", "\\infty", !0);
l(o, h, y, "′", "\\prime");
l(o, h, y, "△", "\\triangle");
l(o, h, y, "Γ", "\\Gamma", !0);
l(o, h, y, "Δ", "\\Delta", !0);
l(o, h, y, "Θ", "\\Theta", !0);
l(o, h, y, "Λ", "\\Lambda", !0);
l(o, h, y, "Ξ", "\\Xi", !0);
l(o, h, y, "Π", "\\Pi", !0);
l(o, h, y, "Σ", "\\Sigma", !0);
l(o, h, y, "Υ", "\\Upsilon", !0);
l(o, h, y, "Φ", "\\Phi", !0);
l(o, h, y, "Ψ", "\\Psi", !0);
l(o, h, y, "Ω", "\\Omega", !0);
l(o, h, y, "A", "Α");
l(o, h, y, "B", "Β");
l(o, h, y, "E", "Ε");
l(o, h, y, "Z", "Ζ");
l(o, h, y, "H", "Η");
l(o, h, y, "I", "Ι");
l(o, h, y, "K", "Κ");
l(o, h, y, "M", "Μ");
l(o, h, y, "N", "Ν");
l(o, h, y, "O", "Ο");
l(o, h, y, "P", "Ρ");
l(o, h, y, "T", "Τ");
l(o, h, y, "X", "Χ");
l(o, h, y, "¬", "\\neg", !0);
l(o, h, y, "¬", "\\lnot");
l(o, h, y, "⊤", "\\top");
l(o, h, y, "⊥", "\\bot");
l(o, h, y, "∅", "\\emptyset");
l(o, f, y, "∅", "\\varnothing");
l(o, h, $, "α", "\\alpha", !0);
l(o, h, $, "β", "\\beta", !0);
l(o, h, $, "γ", "\\gamma", !0);
l(o, h, $, "δ", "\\delta", !0);
l(o, h, $, "ϵ", "\\epsilon", !0);
l(o, h, $, "ζ", "\\zeta", !0);
l(o, h, $, "η", "\\eta", !0);
l(o, h, $, "θ", "\\theta", !0);
l(o, h, $, "ι", "\\iota", !0);
l(o, h, $, "κ", "\\kappa", !0);
l(o, h, $, "λ", "\\lambda", !0);
l(o, h, $, "μ", "\\mu", !0);
l(o, h, $, "ν", "\\nu", !0);
l(o, h, $, "ξ", "\\xi", !0);
l(o, h, $, "ο", "\\omicron", !0);
l(o, h, $, "π", "\\pi", !0);
l(o, h, $, "ρ", "\\rho", !0);
l(o, h, $, "σ", "\\sigma", !0);
l(o, h, $, "τ", "\\tau", !0);
l(o, h, $, "υ", "\\upsilon", !0);
l(o, h, $, "ϕ", "\\phi", !0);
l(o, h, $, "χ", "\\chi", !0);
l(o, h, $, "ψ", "\\psi", !0);
l(o, h, $, "ω", "\\omega", !0);
l(o, h, $, "ε", "\\varepsilon", !0);
l(o, h, $, "ϑ", "\\vartheta", !0);
l(o, h, $, "ϖ", "\\varpi", !0);
l(o, h, $, "ϱ", "\\varrho", !0);
l(o, h, $, "ς", "\\varsigma", !0);
l(o, h, $, "φ", "\\varphi", !0);
l(o, h, P, "∗", "*", !0);
l(o, h, P, "+", "+");
l(o, h, P, "−", "-", !0);
l(o, h, P, "⋅", "\\cdot", !0);
l(o, h, P, "∘", "\\circ", !0);
l(o, h, P, "÷", "\\div", !0);
l(o, h, P, "±", "\\pm", !0);
l(o, h, P, "×", "\\times", !0);
l(o, h, P, "∩", "\\cap", !0);
l(o, h, P, "∪", "\\cup", !0);
l(o, h, P, "∖", "\\setminus", !0);
l(o, h, P, "∧", "\\land");
l(o, h, P, "∨", "\\lor");
l(o, h, P, "∧", "\\wedge", !0);
l(o, h, P, "∨", "\\vee", !0);
l(o, h, y, "√", "\\surd");
l(o, h, Ae, "⟨", "\\langle", !0);
l(o, h, Ae, "∣", "\\lvert");
l(o, h, Ae, "∥", "\\lVert");
l(o, h, be, "?", "?");
l(o, h, be, "!", "!");
l(o, h, be, "⟩", "\\rangle", !0);
l(o, h, be, "∣", "\\rvert");
l(o, h, be, "∥", "\\rVert");
l(o, h, v, "=", "=");
l(o, h, v, ":", ":");
l(o, h, v, "≈", "\\approx", !0);
l(o, h, v, "≅", "\\cong", !0);
l(o, h, v, "≥", "\\ge");
l(o, h, v, "≥", "\\geq", !0);
l(o, h, v, "←", "\\gets");
l(o, h, v, ">", "\\gt", !0);
l(o, h, v, "∈", "\\in", !0);
l(o, h, v, "", "\\@not");
l(o, h, v, "⊂", "\\subset", !0);
l(o, h, v, "⊃", "\\supset", !0);
l(o, h, v, "⊆", "\\subseteq", !0);
l(o, h, v, "⊇", "\\supseteq", !0);
l(o, f, v, "⊈", "\\nsubseteq", !0);
l(o, f, v, "⊉", "\\nsupseteq", !0);
l(o, h, v, "⊨", "\\models");
l(o, h, v, "←", "\\leftarrow", !0);
l(o, h, v, "≤", "\\le");
l(o, h, v, "≤", "\\leq", !0);
l(o, h, v, "<", "\\lt", !0);
l(o, h, v, "→", "\\rightarrow", !0);
l(o, h, v, "→", "\\to");
l(o, f, v, "≱", "\\ngeq", !0);
l(o, f, v, "≰", "\\nleq", !0);
l(o, h, Je, " ", "\\ ");
l(o, h, Je, " ", "\\space");
l(o, h, Je, " ", "\\nobreakspace");
l(z, h, Je, " ", "\\ ");
l(z, h, Je, " ", " ");
l(z, h, Je, " ", "\\space");
l(z, h, Je, " ", "\\nobreakspace");
l(o, h, Je, null, "\\nobreak");
l(o, h, Je, null, "\\allowbreak");
l(o, h, bt, ",", ",");
l(o, h, bt, ";", ";");
l(o, f, P, "⊼", "\\barwedge", !0);
l(o, f, P, "⊻", "\\veebar", !0);
l(o, h, P, "⊙", "\\odot", !0);
l(o, h, P, "⊕", "\\oplus", !0);
l(o, h, P, "⊗", "\\otimes", !0);
l(o, h, y, "∂", "\\partial", !0);
l(o, h, P, "⊘", "\\oslash", !0);
l(o, f, P, "⊚", "\\circledcirc", !0);
l(o, f, P, "⊡", "\\boxdot", !0);
l(o, h, P, "△", "\\bigtriangleup");
l(o, h, P, "▽", "\\bigtriangledown");
l(o, h, P, "†", "\\dagger");
l(o, h, P, "⋄", "\\diamond");
l(o, h, P, "⋆", "\\star");
l(o, h, P, "◃", "\\triangleleft");
l(o, h, P, "▹", "\\triangleright");
l(o, h, Ae, "{", "\\{");
l(z, h, y, "{", "\\{");
l(z, h, y, "{", "\\textbraceleft");
l(o, h, be, "}", "\\}");
l(z, h, y, "}", "\\}");
l(z, h, y, "}", "\\textbraceright");
l(o, h, Ae, "{", "\\lbrace");
l(o, h, be, "}", "\\rbrace");
l(o, h, Ae, "[", "\\lbrack", !0);
l(z, h, y, "[", "\\lbrack", !0);
l(o, h, be, "]", "\\rbrack", !0);
l(z, h, y, "]", "\\rbrack", !0);
l(o, h, Ae, "(", "\\lparen", !0);
l(o, h, be, ")", "\\rparen", !0);
l(z, h, y, "<", "\\textless", !0);
l(z, h, y, ">", "\\textgreater", !0);
l(o, h, Ae, "⌊", "\\lfloor", !0);
l(o, h, be, "⌋", "\\rfloor", !0);
l(o, h, Ae, "⌈", "\\lceil", !0);
l(o, h, be, "⌉", "\\rceil", !0);
l(o, h, y, "\\", "\\backslash");
l(o, h, y, "∣", "|");
l(o, h, y, "∣", "\\vert");
l(z, h, y, "|", "\\textbar", !0);
l(o, h, y, "∥", "\\|");
l(o, h, y, "∥", "\\Vert");
l(z, h, y, "∥", "\\textbardbl");
l(z, h, y, "~", "\\textasciitilde");
l(z, h, y, "\\", "\\textbackslash");
l(z, h, y, "^", "\\textasciicircum");
l(o, h, v, "↑", "\\uparrow", !0);
l(o, h, v, "⇑", "\\Uparrow", !0);
l(o, h, v, "↓", "\\downarrow", !0);
l(o, h, v, "⇓", "\\Downarrow", !0);
l(o, h, v, "↕", "\\updownarrow", !0);
l(o, h, v, "⇕", "\\Updownarrow", !0);
l(o, h, ce, "∐", "\\coprod");
l(o, h, ce, "⋁", "\\bigvee");
l(o, h, ce, "⋀", "\\bigwedge");
l(o, h, ce, "⨄", "\\biguplus");
l(o, h, ce, "⋂", "\\bigcap");
l(o, h, ce, "⋃", "\\bigcup");
l(o, h, ce, "∫", "\\int");
l(o, h, ce, "∫", "\\intop");
l(o, h, ce, "∬", "\\iint");
l(o, h, ce, "∭", "\\iiint");
l(o, h, ce, "∏", "\\prod");
l(o, h, ce, "∑", "\\sum");
l(o, h, ce, "⨂", "\\bigotimes");
l(o, h, ce, "⨁", "\\bigoplus");
l(o, h, ce, "⨀", "\\bigodot");
l(o, h, ce, "∮", "\\oint");
l(o, h, ce, "∯", "\\oiint");
l(o, h, ce, "∰", "\\oiiint");
l(o, h, ce, "⨆", "\\bigsqcup");
l(o, h, ce, "∫", "\\smallint");
l(z, h, S0, "…", "\\textellipsis");
l(o, h, S0, "…", "\\mathellipsis");
l(z, h, S0, "…", "\\ldots", !0);
l(o, h, S0, "…", "\\ldots", !0);
l(o, h, S0, "⋯", "\\@cdots", !0);
l(o, h, S0, "⋱", "\\ddots", !0);
l(o, h, y, "⋮", "\\varvdots");
l(z, h, y, "⋮", "\\varvdots");
l(o, h, ne, "ˊ", "\\acute");
l(o, h, ne, "ˋ", "\\grave");
l(o, h, ne, "¨", "\\ddot");
l(o, h, ne, "~", "\\tilde");
l(o, h, ne, "ˉ", "\\bar");
l(o, h, ne, "˘", "\\breve");
l(o, h, ne, "ˇ", "\\check");
l(o, h, ne, "^", "\\hat");
l(o, h, ne, "⃗", "\\vec");
l(o, h, ne, "˙", "\\dot");
l(o, h, ne, "˚", "\\mathring");
l(o, h, $, "", "\\@imath");
l(o, h, $, "", "\\@jmath");
l(o, h, y, "ı", "ı");
l(o, h, y, "ȷ", "ȷ");
l(z, h, y, "ı", "\\i", !0);
l(z, h, y, "ȷ", "\\j", !0);
l(z, h, y, "ß", "\\ss", !0);
l(z, h, y, "æ", "\\ae", !0);
l(z, h, y, "œ", "\\oe", !0);
l(z, h, y, "ø", "\\o", !0);
l(z, h, y, "Æ", "\\AE", !0);
l(z, h, y, "Œ", "\\OE", !0);
l(z, h, y, "Ø", "\\O", !0);
l(z, h, ne, "ˊ", "\\'");
l(z, h, ne, "ˋ", "\\`");
l(z, h, ne, "ˆ", "\\^");
l(z, h, ne, "˜", "\\~");
l(z, h, ne, "ˉ", "\\=");
l(z, h, ne, "˘", "\\u");
l(z, h, ne, "˙", "\\.");
l(z, h, ne, "¸", "\\c");
l(z, h, ne, "˚", "\\r");
l(z, h, ne, "ˇ", "\\v");
l(z, h, ne, "¨", '\\"');
l(z, h, ne, "˝", "\\H");
l(z, h, ne, "◯", "\\textcircled");
var un = {
  "--": !0,
  "---": !0,
  "``": !0,
  "''": !0
};
l(z, h, y, "–", "--", !0);
l(z, h, y, "–", "\\textendash");
l(z, h, y, "—", "---", !0);
l(z, h, y, "—", "\\textemdash");
l(z, h, y, "‘", "`", !0);
l(z, h, y, "‘", "\\textquoteleft");
l(z, h, y, "’", "'", !0);
l(z, h, y, "’", "\\textquoteright");
l(z, h, y, "“", "``", !0);
l(z, h, y, "“", "\\textquotedblleft");
l(z, h, y, "”", "''", !0);
l(z, h, y, "”", "\\textquotedblright");
l(o, h, y, "°", "\\degree", !0);
l(z, h, y, "°", "\\degree");
l(z, h, y, "°", "\\textdegree", !0);
l(o, h, y, "£", "\\pounds");
l(o, h, y, "£", "\\mathsterling", !0);
l(z, h, y, "£", "\\pounds");
l(z, h, y, "£", "\\textsterling", !0);
l(o, f, y, "✠", "\\maltese");
l(z, f, y, "✠", "\\maltese");
var ia = '0123456789/@."';
for (var It = 0; It < ia.length; It++) {
  var sa = ia.charAt(It);
  l(o, h, y, sa, sa);
}
var la = '0123456789!@*()-=+";:?/.,';
for (var Nt = 0; Nt < la.length; Nt++) {
  var ua = la.charAt(Nt);
  l(z, h, y, ua, ua);
}
var ot = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
for (var Lt = 0; Lt < ot.length; Lt++) {
  var V0 = ot.charAt(Lt);
  l(o, h, $, V0, V0), l(z, h, y, V0, V0);
}
l(o, f, y, "C", "ℂ");
l(z, f, y, "C", "ℂ");
l(o, f, y, "H", "ℍ");
l(z, f, y, "H", "ℍ");
l(o, f, y, "N", "ℕ");
l(z, f, y, "N", "ℕ");
l(o, f, y, "P", "ℙ");
l(z, f, y, "P", "ℙ");
l(o, f, y, "Q", "ℚ");
l(z, f, y, "Q", "ℚ");
l(o, f, y, "R", "ℝ");
l(z, f, y, "R", "ℝ");
l(o, f, y, "Z", "ℤ");
l(z, f, y, "Z", "ℤ");
l(o, h, $, "h", "ℎ");
l(z, h, $, "h", "ℎ");
var G = "";
for (var fe = 0; fe < ot.length; fe++) {
  var le = ot.charAt(fe);
  G = String.fromCharCode(55349, 56320 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56372 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56424 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56580 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56684 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56736 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56788 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56840 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56944 + fe), l(o, h, $, le, G), l(z, h, y, le, G), fe < 26 && (G = String.fromCharCode(55349, 56632 + fe), l(o, h, $, le, G), l(z, h, y, le, G), G = String.fromCharCode(55349, 56476 + fe), l(o, h, $, le, G), l(z, h, y, le, G));
}
G = "𝕜";
l(o, h, $, "k", G);
l(z, h, y, "k", G);
for (var m0 = 0; m0 < 10; m0++) {
  var t0 = m0.toString();
  G = String.fromCharCode(55349, 57294 + m0), l(o, h, $, t0, G), l(z, h, y, t0, G), G = String.fromCharCode(55349, 57314 + m0), l(o, h, $, t0, G), l(z, h, y, t0, G), G = String.fromCharCode(55349, 57324 + m0), l(o, h, $, t0, G), l(z, h, y, t0, G), G = String.fromCharCode(55349, 57334 + m0), l(o, h, $, t0, G), l(z, h, y, t0, G);
}
var nr = "ÐÞþ";
for (var Ot = 0; Ot < nr.length; Ot++) {
  var j0 = nr.charAt(Ot);
  l(o, h, $, j0, j0), l(z, h, y, j0, j0);
}
var W0 = [
  ["mathbf", "textbf", "Main-Bold"],
  // A-Z bold upright
  ["mathbf", "textbf", "Main-Bold"],
  // a-z bold upright
  ["mathnormal", "textit", "Math-Italic"],
  // A-Z italic
  ["mathnormal", "textit", "Math-Italic"],
  // a-z italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // A-Z bold italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // a-z bold italic
  // Map fancy A-Z letters to script, not calligraphic.
  // This aligns with unicode-math and math fonts (except Cambria Math).
  ["mathscr", "textscr", "Script-Regular"],
  // A-Z script
  ["", "", ""],
  // a-z script.  No font
  ["", "", ""],
  // A-Z bold script. No font
  ["", "", ""],
  // a-z bold script. No font
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // A-Z Fraktur
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // a-z Fraktur
  ["mathbb", "textbb", "AMS-Regular"],
  // A-Z double-struck
  ["mathbb", "textbb", "AMS-Regular"],
  // k double-struck
  // Note that we are using a bold font, but font metrics for regular Fraktur.
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // A-Z bold Fraktur
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // a-z bold Fraktur
  ["mathsf", "textsf", "SansSerif-Regular"],
  // A-Z sans-serif
  ["mathsf", "textsf", "SansSerif-Regular"],
  // a-z sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // A-Z bold sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // a-z bold sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // A-Z italic sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // a-z italic sans-serif
  ["", "", ""],
  // A-Z bold italic sans. No font
  ["", "", ""],
  // a-z bold italic sans. No font
  ["mathtt", "texttt", "Typewriter-Regular"],
  // A-Z monospace
  ["mathtt", "texttt", "Typewriter-Regular"]
  // a-z monospace
], oa = [
  ["mathbf", "textbf", "Main-Bold"],
  // 0-9 bold
  ["", "", ""],
  // 0-9 double-struck. No KaTeX font.
  ["mathsf", "textsf", "SansSerif-Regular"],
  // 0-9 sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // 0-9 bold sans-serif
  ["mathtt", "texttt", "Typewriter-Regular"]
  // 0-9 monospace
], sl = function(e, t) {
  var r = e.charCodeAt(0), n = e.charCodeAt(1), i = (r - 55296) * 1024 + (n - 56320) + 65536, s = t === "math" ? 0 : 1;
  if (119808 <= i && i < 120484) {
    var u = Math.floor((i - 119808) / 26);
    return [W0[u][2], W0[u][s]];
  } else if (120782 <= i && i <= 120831) {
    var c = Math.floor((i - 120782) / 10);
    return [oa[c][2], oa[c][s]];
  } else {
    if (i === 120485 || i === 120486)
      return [W0[0][2], W0[0][s]];
    if (120486 < i && i < 120782)
      return ["", ""];
    throw new I("Unsupported character: " + e);
  }
}, yt = function(e, t, r) {
  return ee[r][e] && ee[r][e].replace && (e = ee[r][e].replace), {
    value: e,
    metrics: dr(e, t, r)
  };
}, Ne = function(e, t, r, n, i) {
  var s = yt(e, t, r), u = s.metrics;
  e = s.value;
  var c;
  if (u) {
    var m = u.italic;
    (r === "text" || n && n.font === "mathit") && (m = 0), c = new Oe(e, u.height, u.depth, m, u.skew, u.width, i);
  } else
    typeof console < "u" && console.warn("No character metrics " + ("for '" + e + "' in style '" + t + "' and mode '" + r + "'")), c = new Oe(e, 0, 0, 0, 0, 0, i);
  if (n) {
    c.maxFontSize = n.sizeMultiplier, n.style.isTight() && c.classes.push("mtight");
    var p = n.getColor();
    p && (c.style.color = p);
  }
  return c;
}, ll = function(e, t, r, n) {
  return n === void 0 && (n = []), r.font === "boldsymbol" && yt(e, "Main-Bold", t).metrics ? Ne(e, "Main-Bold", t, r, n.concat(["mathbf"])) : e === "\\" || ee[t][e].font === "main" ? Ne(e, "Main-Regular", t, r, n) : Ne(e, "AMS-Regular", t, r, n.concat(["amsrm"]));
}, ul = function(e, t, r, n, i) {
  return i !== "textord" && yt(e, "Math-BoldItalic", t).metrics ? {
    fontName: "Math-BoldItalic",
    fontClass: "boldsymbol"
  } : {
    fontName: "Main-Bold",
    fontClass: "mathbf"
  };
}, ol = function(e, t, r) {
  var n = e.mode, i = e.text, s = ["mord"], u = n === "math" || n === "text" && t.font, c = u ? t.font : t.fontFamily, m = "", p = "";
  if (i.charCodeAt(0) === 55349 && ([m, p] = sl(i, n)), m.length > 0)
    return Ne(i, m, n, t, s.concat(p));
  if (c) {
    var g, x;
    if (c === "boldsymbol") {
      var b = ul(i, n, t, s, r);
      g = b.fontName, x = [b.fontClass];
    } else u ? (g = hn[c].fontName, x = [c]) : (g = X0(c, t.fontWeight, t.fontShape), x = [c, t.fontWeight, t.fontShape]);
    if (yt(i, g, n).metrics)
      return Ne(i, g, n, t, s.concat(x));
    if (un.hasOwnProperty(i) && g.slice(0, 10) === "Typewriter") {
      for (var T = [], S = 0; S < i.length; S++)
        T.push(Ne(i[S], g, n, t, s.concat(x)));
      return cn(T);
    }
  }
  if (r === "mathord")
    return Ne(i, "Math-Italic", n, t, s.concat(["mathnormal"]));
  if (r === "textord") {
    var C = ee[n][i] && ee[n][i].font;
    if (C === "ams") {
      var M = X0("amsrm", t.fontWeight, t.fontShape);
      return Ne(i, M, n, t, s.concat("amsrm", t.fontWeight, t.fontShape));
    } else if (C === "main" || !C) {
      var w = X0("textrm", t.fontWeight, t.fontShape);
      return Ne(i, w, n, t, s.concat(t.fontWeight, t.fontShape));
    } else {
      var k = X0(C, t.fontWeight, t.fontShape);
      return Ne(i, k, n, t, s.concat(k, t.fontWeight, t.fontShape));
    }
  } else
    throw new Error("unexpected type: " + r + " in makeOrd");
}, cl = (a, e) => {
  if (i0(a.classes) !== i0(e.classes) || a.skew !== e.skew || a.maxFontSize !== e.maxFontSize)
    return !1;
  if (a.classes.length === 1) {
    var t = a.classes[0];
    if (t === "mbin" || t === "mord")
      return !1;
  }
  for (var r in a.style)
    if (a.style.hasOwnProperty(r) && a.style[r] !== e.style[r])
      return !1;
  for (var n in e.style)
    if (e.style.hasOwnProperty(n) && a.style[n] !== e.style[n])
      return !1;
  return !0;
}, hl = (a) => {
  for (var e = 0; e < a.length - 1; e++) {
    var t = a[e], r = a[e + 1];
    t instanceof Oe && r instanceof Oe && cl(t, r) && (t.text += r.text, t.height = Math.max(t.height, r.height), t.depth = Math.max(t.depth, r.depth), t.italic = r.italic, a.splice(e + 1, 1), e--);
  }
  return a;
}, pr = function(e) {
  for (var t = 0, r = 0, n = 0, i = 0; i < e.children.length; i++) {
    var s = e.children[i];
    s.height > t && (t = s.height), s.depth > r && (r = s.depth), s.maxFontSize > n && (n = s.maxFontSize);
  }
  e.height = t, e.depth = r, e.maxFontSize = n;
}, xe = function(e, t, r, n) {
  var i = new vt(e, t, r, n);
  return pr(i), i;
}, on = (a, e, t, r) => new vt(a, e, t, r), ml = function(e, t, r) {
  var n = xe([e], [], t);
  return n.height = Math.max(r || t.fontMetrics().defaultRuleThickness, t.minRuleThickness), n.style.borderBottomWidth = L(n.height), n.maxFontSize = 1, n;
}, dl = function(e, t, r, n) {
  var i = new ln(e, t, r, n);
  return pr(i), i;
}, cn = function(e) {
  var t = new q0(e);
  return pr(t), t;
}, pl = function(e, t) {
  return e instanceof q0 ? xe([], [e], t) : e;
}, fl = function(e) {
  if (e.positionType === "individualShift") {
    for (var t = e.children, r = [t[0]], n = -t[0].shift - t[0].elem.depth, i = n, s = 1; s < t.length; s++) {
      var u = -t[s].shift - i - t[s].elem.depth, c = u - (t[s - 1].elem.height + t[s - 1].elem.depth);
      i = i + u, r.push({
        type: "kern",
        size: c
      }), r.push(t[s]);
    }
    return {
      children: r,
      depth: n
    };
  }
  var m;
  if (e.positionType === "top") {
    for (var p = e.positionData, g = 0; g < e.children.length; g++) {
      var x = e.children[g];
      p -= x.type === "kern" ? x.size : x.elem.height + x.elem.depth;
    }
    m = p;
  } else if (e.positionType === "bottom")
    m = -e.positionData;
  else {
    var b = e.children[0];
    if (b.type !== "elem")
      throw new Error('First child must have type "elem".');
    if (e.positionType === "shift")
      m = -b.elem.depth - e.positionData;
    else if (e.positionType === "firstBaseline")
      m = -b.elem.depth;
    else
      throw new Error("Invalid positionType " + e.positionType + ".");
  }
  return {
    children: e.children,
    depth: m
  };
}, gl = function(e, t) {
  for (var {
    children: r,
    depth: n
  } = fl(e), i = 0, s = 0; s < r.length; s++) {
    var u = r[s];
    if (u.type === "elem") {
      var c = u.elem;
      i = Math.max(i, c.maxFontSize, c.height);
    }
  }
  i += 2;
  var m = xe(["pstrut"], []);
  m.style.height = L(i);
  for (var p = [], g = n, x = n, b = n, T = 0; T < r.length; T++) {
    var S = r[T];
    if (S.type === "kern")
      b += S.size;
    else {
      var C = S.elem, M = S.wrapperClasses || [], w = S.wrapperStyle || {}, k = xe(M, [m, C], void 0, w);
      k.style.top = L(-i - b - C.depth), S.marginLeft && (k.style.marginLeft = S.marginLeft), S.marginRight && (k.style.marginRight = S.marginRight), p.push(k), b += C.height + C.depth;
    }
    g = Math.min(g, b), x = Math.max(x, b);
  }
  var A = xe(["vlist"], p);
  A.style.height = L(x);
  var E;
  if (g < 0) {
    var F = xe([], []), B = xe(["vlist"], [F]);
    B.style.height = L(-g);
    var O = xe(["vlist-s"], [new Oe("​")]);
    E = [xe(["vlist-r"], [A, O]), xe(["vlist-r"], [B])];
  } else
    E = [xe(["vlist-r"], [A])];
  var N = xe(["vlist-t"], E);
  return E.length === 2 && N.classes.push("vlist-t2"), N.height = x, N.depth = -g, N;
}, vl = (a, e) => {
  var t = xe(["mspace"], [], e), r = se(a, e);
  return t.style.marginRight = L(r), t;
}, X0 = function(e, t, r) {
  var n = "";
  switch (e) {
    case "amsrm":
      n = "AMS";
      break;
    case "textrm":
      n = "Main";
      break;
    case "textsf":
      n = "SansSerif";
      break;
    case "texttt":
      n = "Typewriter";
      break;
    default:
      n = e;
  }
  var i;
  return t === "textbf" && r === "textit" ? i = "BoldItalic" : t === "textbf" ? i = "Bold" : t === "textit" ? i = "Italic" : i = "Regular", n + "-" + i;
}, hn = {
  // styles
  mathbf: {
    variant: "bold",
    fontName: "Main-Bold"
  },
  mathrm: {
    variant: "normal",
    fontName: "Main-Regular"
  },
  textit: {
    variant: "italic",
    fontName: "Main-Italic"
  },
  mathit: {
    variant: "italic",
    fontName: "Main-Italic"
  },
  mathnormal: {
    variant: "italic",
    fontName: "Math-Italic"
  },
  mathsfit: {
    variant: "sans-serif-italic",
    fontName: "SansSerif-Italic"
  },
  // "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  mathbb: {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  mathcal: {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  mathfrak: {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  mathscr: {
    variant: "script",
    fontName: "Script-Regular"
  },
  mathsf: {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  mathtt: {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
}, mn = {
  //   path, width, height
  vec: ["vec", 0.471, 0.714],
  // values from the font glyph
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  // oval to overlay the integrand
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
}, bl = function(e, t) {
  var [r, n, i] = mn[e], s = new f0(r), u = new s0([s], {
    width: L(n),
    height: L(i),
    // Override CSS rule `.katex svg { width: 100% }`
    style: "width:" + L(n),
    viewBox: "0 0 " + 1e3 * n + " " + 1e3 * i,
    preserveAspectRatio: "xMinYMin"
  }), c = on(["overlay"], [u], t);
  return c.height = i, c.style.height = L(i), c.style.width = L(n), c;
}, D = {
  fontMap: hn,
  makeSymbol: Ne,
  mathsym: ll,
  makeSpan: xe,
  makeSvgSpan: on,
  makeLineSpan: ml,
  makeAnchor: dl,
  makeFragment: cn,
  wrapFragment: pl,
  makeVList: gl,
  makeOrd: ol,
  makeGlue: vl,
  staticSvg: bl,
  svgData: mn,
  tryCombineChars: hl
}, ie = {
  number: 3,
  unit: "mu"
}, d0 = {
  number: 4,
  unit: "mu"
}, Ve = {
  number: 5,
  unit: "mu"
}, yl = {
  mord: {
    mop: ie,
    mbin: d0,
    mrel: Ve,
    minner: ie
  },
  mop: {
    mord: ie,
    mop: ie,
    mrel: Ve,
    minner: ie
  },
  mbin: {
    mord: d0,
    mop: d0,
    mopen: d0,
    minner: d0
  },
  mrel: {
    mord: Ve,
    mop: Ve,
    mopen: Ve,
    minner: Ve
  },
  mopen: {},
  mclose: {
    mop: ie,
    mbin: d0,
    mrel: Ve,
    minner: ie
  },
  mpunct: {
    mord: ie,
    mop: ie,
    mrel: Ve,
    mopen: ie,
    mclose: ie,
    mpunct: ie,
    minner: ie
  },
  minner: {
    mord: ie,
    mop: ie,
    mbin: d0,
    mrel: Ve,
    mopen: ie,
    mpunct: ie,
    minner: ie
  }
}, xl = {
  mord: {
    mop: ie
  },
  mop: {
    mord: ie,
    mop: ie
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: ie
  },
  mpunct: {},
  minner: {
    mop: ie
  }
}, dn = {}, ct = {}, ht = {};
function q(a) {
  for (var {
    type: e,
    names: t,
    props: r,
    handler: n,
    htmlBuilder: i,
    mathmlBuilder: s
  } = a, u = {
    type: e,
    numArgs: r.numArgs,
    argTypes: r.argTypes,
    allowedInArgument: !!r.allowedInArgument,
    allowedInText: !!r.allowedInText,
    allowedInMath: r.allowedInMath === void 0 ? !0 : r.allowedInMath,
    numOptionalArgs: r.numOptionalArgs || 0,
    infix: !!r.infix,
    primitive: !!r.primitive,
    handler: n
  }, c = 0; c < t.length; ++c)
    dn[t[c]] = u;
  e && (i && (ct[e] = i), s && (ht[e] = s));
}
function v0(a) {
  var {
    type: e,
    htmlBuilder: t,
    mathmlBuilder: r
  } = a;
  q({
    type: e,
    names: [],
    props: {
      numArgs: 0
    },
    handler() {
      throw new Error("Should never be called.");
    },
    htmlBuilder: t,
    mathmlBuilder: r
  });
}
var mt = function(e) {
  return e.type === "ordgroup" && e.body.length === 1 ? e.body[0] : e;
}, ue = function(e) {
  return e.type === "ordgroup" ? e.body : [e];
}, Ze = D.makeSpan, wl = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"], kl = ["rightmost", "mrel", "mclose", "mpunct"], Dl = {
  display: _.DISPLAY,
  text: _.TEXT,
  script: _.SCRIPT,
  scriptscript: _.SCRIPTSCRIPT
}, Al = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
}, he = function(e, t, r, n) {
  n === void 0 && (n = [null, null]);
  for (var i = [], s = 0; s < e.length; s++) {
    var u = Y(e[s], t);
    if (u instanceof q0) {
      var c = u.children;
      i.push(...c);
    } else
      i.push(u);
  }
  if (D.tryCombineChars(i), !r)
    return i;
  var m = t;
  if (e.length === 1) {
    var p = e[0];
    p.type === "sizing" ? m = t.havingSize(p.size) : p.type === "styling" && (m = t.havingStyle(Dl[p.style]));
  }
  var g = Ze([n[0] || "leftmost"], [], t), x = Ze([n[1] || "rightmost"], [], t), b = r === "root";
  return ca(i, (T, S) => {
    var C = S.classes[0], M = T.classes[0];
    C === "mbin" && H.contains(kl, M) ? S.classes[0] = "mord" : M === "mbin" && H.contains(wl, C) && (T.classes[0] = "mord");
  }, {
    node: g
  }, x, b), ca(i, (T, S) => {
    var C = ir(S), M = ir(T), w = C && M ? T.hasClass("mtight") ? xl[C][M] : yl[C][M] : null;
    if (w)
      return D.makeGlue(w, m);
  }, {
    node: g
  }, x, b), i;
}, ca = function a(e, t, r, n, i) {
  n && e.push(n);
  for (var s = 0; s < e.length; s++) {
    var u = e[s], c = pn(u);
    if (c) {
      a(c.children, t, r, null, i);
      continue;
    }
    var m = !u.hasClass("mspace");
    if (m) {
      var p = t(u, r.node);
      p && (r.insertAfter ? r.insertAfter(p) : (e.unshift(p), s++));
    }
    m ? r.node = u : i && u.hasClass("newline") && (r.node = Ze(["leftmost"])), r.insertAfter = /* @__PURE__ */ ((g) => (x) => {
      e.splice(g + 1, 0, x), s++;
    })(s);
  }
  n && e.pop();
}, pn = function(e) {
  return e instanceof q0 || e instanceof ln || e instanceof vt && e.hasClass("enclosing") ? e : null;
}, Sl = function a(e, t) {
  var r = pn(e);
  if (r) {
    var n = r.children;
    if (n.length) {
      if (t === "right")
        return a(n[n.length - 1], "right");
      if (t === "left")
        return a(n[0], "left");
    }
  }
  return e;
}, ir = function(e, t) {
  return e ? (t && (e = Sl(e, t)), Al[e.classes[0]] || null) : null;
}, O0 = function(e, t) {
  var r = ["nulldelimiter"].concat(e.baseSizingClasses());
  return Ze(t.concat(r));
}, Y = function(e, t, r) {
  if (!e)
    return Ze();
  if (ct[e.type]) {
    var n = ct[e.type](e, t);
    if (r && t.size !== r.size) {
      n = Ze(t.sizingClasses(r), [n], t);
      var i = t.sizeMultiplier / r.sizeMultiplier;
      n.height *= i, n.depth *= i;
    }
    return n;
  } else
    throw new I("Got group of unknown type: '" + e.type + "'");
};
function Y0(a, e) {
  var t = Ze(["base"], a, e), r = Ze(["strut"]);
  return r.style.height = L(t.height + t.depth), t.depth && (r.style.verticalAlign = L(-t.depth)), t.children.unshift(r), t;
}
function ha(a, e) {
  var t = null;
  a.length === 1 && a[0].type === "tag" && (t = a[0].tag, a = a[0].body);
  var r = he(a, e, "root"), n;
  r.length === 2 && r[1].hasClass("tag") && (n = r.pop());
  for (var i = [], s = [], u = 0; u < r.length; u++)
    if (s.push(r[u]), r[u].hasClass("mbin") || r[u].hasClass("mrel") || r[u].hasClass("allowbreak")) {
      for (var c = !1; u < r.length - 1 && r[u + 1].hasClass("mspace") && !r[u + 1].hasClass("newline"); )
        u++, s.push(r[u]), r[u].hasClass("nobreak") && (c = !0);
      c || (i.push(Y0(s, e)), s = []);
    } else r[u].hasClass("newline") && (s.pop(), s.length > 0 && (i.push(Y0(s, e)), s = []), i.push(r[u]));
  s.length > 0 && i.push(Y0(s, e));
  var m;
  t ? (m = Y0(he(t, e, !0)), m.classes = ["tag"], i.push(m)) : n && i.push(n);
  var p = Ze(["katex-html"], i);
  if (p.setAttribute("aria-hidden", "true"), m) {
    var g = m.children[0];
    g.style.height = L(p.height + p.depth), p.depth && (g.style.verticalAlign = L(-p.depth));
  }
  return p;
}
function fn(a) {
  return new q0(a);
}
class De {
  constructor(e, t, r) {
    this.type = void 0, this.attributes = void 0, this.children = void 0, this.classes = void 0, this.type = e, this.attributes = {}, this.children = t || [], this.classes = r || [];
  }
  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */
  setAttribute(e, t) {
    this.attributes[e] = t;
  }
  /**
   * Gets an attribute on a MathML node.
   */
  getAttribute(e) {
    return this.attributes[e];
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    var e = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && e.setAttribute(t, this.attributes[t]);
    this.classes.length > 0 && (e.className = i0(this.classes));
    for (var r = 0; r < this.children.length; r++)
      if (this.children[r] instanceof $e && this.children[r + 1] instanceof $e) {
        for (var n = this.children[r].toText() + this.children[++r].toText(); this.children[r + 1] instanceof $e; )
          n += this.children[++r].toText();
        e.appendChild(new $e(n).toNode());
      } else
        e.appendChild(this.children[r].toNode());
    return e;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    var e = "<" + this.type;
    for (var t in this.attributes)
      Object.prototype.hasOwnProperty.call(this.attributes, t) && (e += " " + t + '="', e += H.escape(this.attributes[t]), e += '"');
    this.classes.length > 0 && (e += ' class ="' + H.escape(i0(this.classes)) + '"'), e += ">";
    for (var r = 0; r < this.children.length; r++)
      e += this.children[r].toMarkup();
    return e += "</" + this.type + ">", e;
  }
  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  toText() {
    return this.children.map((e) => e.toText()).join("");
  }
}
class $e {
  constructor(e) {
    this.text = void 0, this.text = e;
  }
  /**
   * Converts the text node into a DOM text node.
   */
  toNode() {
    return document.createTextNode(this.text);
  }
  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  toMarkup() {
    return H.escape(this.toText());
  }
  /**
   * Converts the text node into a string
   * (representing the text itself).
   */
  toText() {
    return this.text;
  }
}
class Fl {
  /**
   * Create a Space node with width given in CSS ems.
   */
  constructor(e) {
    this.width = void 0, this.character = void 0, this.width = e, e >= 0.05555 && e <= 0.05556 ? this.character = " " : e >= 0.1666 && e <= 0.1667 ? this.character = " " : e >= 0.2222 && e <= 0.2223 ? this.character = " " : e >= 0.2777 && e <= 0.2778 ? this.character = "  " : e >= -0.05556 && e <= -0.05555 ? this.character = " ⁣" : e >= -0.1667 && e <= -0.1666 ? this.character = " ⁣" : e >= -0.2223 && e <= -0.2222 ? this.character = " ⁣" : e >= -0.2778 && e <= -0.2777 ? this.character = " ⁣" : this.character = null;
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    if (this.character)
      return document.createTextNode(this.character);
    var e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
    return e.setAttribute("width", L(this.width)), e;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    return this.character ? "<mtext>" + this.character + "</mtext>" : '<mspace width="' + L(this.width) + '"/>';
  }
  /**
   * Converts the math node into a string, similar to innerText.
   */
  toText() {
    return this.character ? this.character : " ";
  }
}
var R = {
  MathNode: De,
  TextNode: $e,
  SpaceNode: Fl,
  newDocumentFragment: fn
}, Be = function(e, t, r) {
  return ee[t][e] && ee[t][e].replace && e.charCodeAt(0) !== 55349 && !(un.hasOwnProperty(e) && r && (r.fontFamily && r.fontFamily.slice(4, 6) === "tt" || r.font && r.font.slice(4, 6) === "tt")) && (e = ee[t][e].replace), new R.TextNode(e);
}, fr = function(e) {
  return e.length === 1 ? e[0] : new R.MathNode("mrow", e);
}, gr = function(e, t) {
  if (t.fontFamily === "texttt")
    return "monospace";
  if (t.fontFamily === "textsf")
    return t.fontShape === "textit" && t.fontWeight === "textbf" ? "sans-serif-bold-italic" : t.fontShape === "textit" ? "sans-serif-italic" : t.fontWeight === "textbf" ? "bold-sans-serif" : "sans-serif";
  if (t.fontShape === "textit" && t.fontWeight === "textbf")
    return "bold-italic";
  if (t.fontShape === "textit")
    return "italic";
  if (t.fontWeight === "textbf")
    return "bold";
  var r = t.font;
  if (!r || r === "mathnormal")
    return null;
  var n = e.mode;
  if (r === "mathit")
    return "italic";
  if (r === "boldsymbol")
    return e.type === "textord" ? "bold" : "bold-italic";
  if (r === "mathbf")
    return "bold";
  if (r === "mathbb")
    return "double-struck";
  if (r === "mathsfit")
    return "sans-serif-italic";
  if (r === "mathfrak")
    return "fraktur";
  if (r === "mathscr" || r === "mathcal")
    return "script";
  if (r === "mathsf")
    return "sans-serif";
  if (r === "mathtt")
    return "monospace";
  var i = e.text;
  if (H.contains(["\\imath", "\\jmath"], i))
    return null;
  ee[n][i] && ee[n][i].replace && (i = ee[n][i].replace);
  var s = D.fontMap[r].fontName;
  return dr(i, s, n) ? D.fontMap[r].variant : null;
};
function qt(a) {
  if (!a)
    return !1;
  if (a.type === "mi" && a.children.length === 1) {
    var e = a.children[0];
    return e instanceof $e && e.text === ".";
  } else if (a.type === "mo" && a.children.length === 1 && a.getAttribute("separator") === "true" && a.getAttribute("lspace") === "0em" && a.getAttribute("rspace") === "0em") {
    var t = a.children[0];
    return t instanceof $e && t.text === ",";
  } else
    return !1;
}
var we = function(e, t, r) {
  if (e.length === 1) {
    var n = Q(e[0], t);
    return r && n instanceof De && n.type === "mo" && (n.setAttribute("lspace", "0em"), n.setAttribute("rspace", "0em")), [n];
  }
  for (var i = [], s, u = 0; u < e.length; u++) {
    var c = Q(e[u], t);
    if (c instanceof De && s instanceof De) {
      if (c.type === "mtext" && s.type === "mtext" && c.getAttribute("mathvariant") === s.getAttribute("mathvariant")) {
        s.children.push(...c.children);
        continue;
      } else if (c.type === "mn" && s.type === "mn") {
        s.children.push(...c.children);
        continue;
      } else if (qt(c) && s.type === "mn") {
        s.children.push(...c.children);
        continue;
      } else if (c.type === "mn" && qt(s))
        c.children = [...s.children, ...c.children], i.pop();
      else if ((c.type === "msup" || c.type === "msub") && c.children.length >= 1 && (s.type === "mn" || qt(s))) {
        var m = c.children[0];
        m instanceof De && m.type === "mn" && (m.children = [...s.children, ...m.children], i.pop());
      } else if (s.type === "mi" && s.children.length === 1) {
        var p = s.children[0];
        if (p instanceof $e && p.text === "̸" && (c.type === "mo" || c.type === "mi" || c.type === "mn")) {
          var g = c.children[0];
          g instanceof $e && g.text.length > 0 && (g.text = g.text.slice(0, 1) + "̸" + g.text.slice(1), i.pop());
        }
      }
    }
    i.push(c), s = c;
  }
  return i;
}, l0 = function(e, t, r) {
  return fr(we(e, t, r));
}, Q = function(e, t) {
  if (!e)
    return new R.MathNode("mrow");
  if (ht[e.type]) {
    var r = ht[e.type](e, t);
    return r;
  } else
    throw new I("Got group of unknown type: '" + e.type + "'");
};
function ma(a, e, t, r, n) {
  var i = we(a, t), s;
  i.length === 1 && i[0] instanceof De && H.contains(["mrow", "mtable"], i[0].type) ? s = i[0] : s = new R.MathNode("mrow", i);
  var u = new R.MathNode("annotation", [new R.TextNode(e)]);
  u.setAttribute("encoding", "application/x-tex");
  var c = new R.MathNode("semantics", [s, u]), m = new R.MathNode("math", [c]);
  m.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML"), r && m.setAttribute("display", "block");
  var p = n ? "katex" : "katex-mathml";
  return D.makeSpan([p], [m]);
}
var El = function(e) {
  return new je({
    style: e.displayMode ? _.DISPLAY : _.TEXT,
    maxSize: e.maxSize,
    minRuleThickness: e.minRuleThickness
  });
}, Cl = function(e, t) {
  if (t.displayMode) {
    var r = ["katex-display"];
    t.leqno && r.push("leqno"), t.fleqn && r.push("fleqn"), e = D.makeSpan(r, [e]);
  }
  return e;
}, Tl = function(e, t, r) {
  var n = El(r), i;
  if (r.output === "mathml")
    return ma(e, t, n, r.displayMode, !0);
  if (r.output === "html") {
    var s = ha(e, n);
    i = D.makeSpan(["katex"], [s]);
  } else {
    var u = ma(e, t, n, r.displayMode, !1), c = ha(e, n);
    i = D.makeSpan(["katex"], [u, c]);
  }
  return Cl(i, r);
}, Ml = {
  widehat: "^",
  widecheck: "ˇ",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "←",
  underleftarrow: "←",
  xleftarrow: "←",
  overrightarrow: "→",
  underrightarrow: "→",
  xrightarrow: "→",
  underbrace: "⏟",
  overbrace: "⏞",
  overgroup: "⏠",
  undergroup: "⏡",
  overleftrightarrow: "↔",
  underleftrightarrow: "↔",
  xleftrightarrow: "↔",
  Overrightarrow: "⇒",
  xRightarrow: "⇒",
  overleftharpoon: "↼",
  xleftharpoonup: "↼",
  overrightharpoon: "⇀",
  xrightharpoonup: "⇀",
  xLeftarrow: "⇐",
  xLeftrightarrow: "⇔",
  xhookleftarrow: "↩",
  xhookrightarrow: "↪",
  xmapsto: "↦",
  xrightharpoondown: "⇁",
  xleftharpoondown: "↽",
  xrightleftharpoons: "⇌",
  xleftrightharpoons: "⇋",
  xtwoheadleftarrow: "↞",
  xtwoheadrightarrow: "↠",
  xlongequal: "=",
  xtofrom: "⇄",
  xrightleftarrows: "⇄",
  xrightequilibrium: "⇌",
  // Not a perfect match.
  xleftequilibrium: "⇋",
  // None better available.
  "\\cdrightarrow": "→",
  "\\cdleftarrow": "←",
  "\\cdlongequal": "="
}, zl = function(e) {
  var t = new R.MathNode("mo", [new R.TextNode(Ml[e.replace(/^\\/, "")])]);
  return t.setAttribute("stretchy", "true"), t;
}, Bl = {
  //   path(s), minWidth, height, align
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3, 522, "xMaxYMin"],
  // CD minwwidth2.5pc
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  // The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
}, Rl = function(e) {
  return e.type === "ordgroup" ? e.body.length : 1;
}, Il = function(e, t) {
  function r() {
    var u = 4e5, c = e.label.slice(1);
    if (H.contains(["widehat", "widecheck", "widetilde", "utilde"], c)) {
      var m = e, p = Rl(m.base), g, x, b;
      if (p > 5)
        c === "widehat" || c === "widecheck" ? (g = 420, u = 2364, b = 0.42, x = c + "4") : (g = 312, u = 2340, b = 0.34, x = "tilde4");
      else {
        var T = [1, 1, 2, 2, 3, 3][p];
        c === "widehat" || c === "widecheck" ? (u = [0, 1062, 2364, 2364, 2364][T], g = [0, 239, 300, 360, 420][T], b = [0, 0.24, 0.3, 0.3, 0.36, 0.42][T], x = c + T) : (u = [0, 600, 1033, 2339, 2340][T], g = [0, 260, 286, 306, 312][T], b = [0, 0.26, 0.286, 0.3, 0.306, 0.34][T], x = "tilde" + T);
      }
      var S = new f0(x), C = new s0([S], {
        width: "100%",
        height: L(b),
        viewBox: "0 0 " + u + " " + g,
        preserveAspectRatio: "none"
      });
      return {
        span: D.makeSvgSpan([], [C], t),
        minWidth: 0,
        height: b
      };
    } else {
      var M = [], w = Bl[c], [k, A, E] = w, F = E / 1e3, B = k.length, O, N;
      if (B === 1) {
        var U = w[3];
        O = ["hide-tail"], N = [U];
      } else if (B === 2)
        O = ["halfarrow-left", "halfarrow-right"], N = ["xMinYMin", "xMaxYMin"];
      else if (B === 3)
        O = ["brace-left", "brace-center", "brace-right"], N = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      else
        throw new Error(`Correct katexImagesData or update code here to support
                    ` + B + " children.");
      for (var j = 0; j < B; j++) {
        var X = new f0(k[j]), te = new s0([X], {
          width: "400em",
          height: L(F),
          viewBox: "0 0 " + u + " " + E,
          preserveAspectRatio: N[j] + " slice"
        }), W = D.makeSvgSpan([O[j]], [te], t);
        if (B === 1)
          return {
            span: W,
            minWidth: A,
            height: F
          };
        W.style.height = L(F), M.push(W);
      }
      return {
        span: D.makeSpan(["stretchy"], M, t),
        minWidth: A,
        height: F
      };
    }
  }
  var {
    span: n,
    minWidth: i,
    height: s
  } = r();
  return n.height = s, n.style.height = L(s), i > 0 && (n.style.minWidth = L(i)), n;
}, Nl = function(e, t, r, n, i) {
  var s, u = e.height + e.depth + r + n;
  if (/fbox|color|angl/.test(t)) {
    if (s = D.makeSpan(["stretchy", t], [], i), t === "fbox") {
      var c = i.color && i.getColor();
      c && (s.style.borderColor = c);
    }
  } else {
    var m = [];
    /^[bx]cancel$/.test(t) && m.push(new aa({
      x1: "0",
      y1: "0",
      x2: "100%",
      y2: "100%",
      "stroke-width": "0.046em"
    })), /^x?cancel$/.test(t) && m.push(new aa({
      x1: "0",
      y1: "100%",
      x2: "100%",
      y2: "0",
      "stroke-width": "0.046em"
    }));
    var p = new s0(m, {
      width: "100%",
      height: L(u)
    });
    s = D.makeSvgSpan([], [p], i);
  }
  return s.height = u, s.style.height = L(u), s;
}, Ke = {
  encloseSpan: Nl,
  mathMLnode: zl,
  svgSpan: Il
};
function V(a, e) {
  if (!a || a.type !== e)
    throw new Error("Expected node of type " + e + ", but got " + (a ? "node of type " + a.type : String(a)));
  return a;
}
function vr(a) {
  var e = xt(a);
  if (!e)
    throw new Error("Expected node of symbol group type, but got " + (a ? "node of type " + a.type : String(a)));
  return e;
}
function xt(a) {
  return a && (a.type === "atom" || il.hasOwnProperty(a.type)) ? a : null;
}
var br = (a, e) => {
  var t, r, n;
  a && a.type === "supsub" ? (r = V(a.base, "accent"), t = r.base, a.base = t, n = al(Y(a, e)), a.base = r) : (r = V(a, "accent"), t = r.base);
  var i = Y(t, e.havingCrampedStyle()), s = r.isShifty && H.isCharacterBox(t), u = 0;
  if (s) {
    var c = H.getBaseElem(t), m = Y(c, e.havingCrampedStyle());
    u = na(m).skew;
  }
  var p = r.label === "\\c", g = p ? i.height + i.depth : Math.min(i.height, e.fontMetrics().xHeight), x;
  if (r.isStretchy)
    x = Ke.svgSpan(r, e), x = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: i
      }, {
        type: "elem",
        elem: x,
        wrapperClasses: ["svg-align"],
        wrapperStyle: u > 0 ? {
          width: "calc(100% - " + L(2 * u) + ")",
          marginLeft: L(2 * u)
        } : void 0
      }]
    }, e);
  else {
    var b, T;
    r.label === "\\vec" ? (b = D.staticSvg("vec", e), T = D.svgData.vec[1]) : (b = D.makeOrd({
      mode: r.mode,
      text: r.label
    }, e, "textord"), b = na(b), b.italic = 0, T = b.width, p && (g += b.depth)), x = D.makeSpan(["accent-body"], [b]);
    var S = r.label === "\\textcircled";
    S && (x.classes.push("accent-full"), g = i.height);
    var C = u;
    S || (C -= T / 2), x.style.left = L(C), r.label === "\\textcircled" && (x.style.top = ".2em"), x = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: i
      }, {
        type: "kern",
        size: -g
      }, {
        type: "elem",
        elem: x
      }]
    }, e);
  }
  var M = D.makeSpan(["mord", "accent"], [x], e);
  return n ? (n.children[0] = M, n.height = Math.max(M.height, n.height), n.classes[0] = "mord", n) : M;
}, gn = (a, e) => {
  var t = a.isStretchy ? Ke.mathMLnode(a.label) : new R.MathNode("mo", [Be(a.label, a.mode)]), r = new R.MathNode("mover", [Q(a.base, e), t]);
  return r.setAttribute("accent", "true"), r;
}, Ll = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map((a) => "\\" + a).join("|"));
q({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: (a, e) => {
    var t = mt(e[0]), r = !Ll.test(a.funcName), n = !r || a.funcName === "\\widehat" || a.funcName === "\\widetilde" || a.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: a.parser.mode,
      label: a.funcName,
      isStretchy: r,
      isShifty: n,
      base: t
    };
  },
  htmlBuilder: br,
  mathmlBuilder: gn
});
q({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: !0,
    allowedInMath: !0,
    // unless in strict mode
    argTypes: ["primitive"]
  },
  handler: (a, e) => {
    var t = e[0], r = a.parser.mode;
    return r === "math" && (a.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + a.funcName + " works only in text mode"), r = "text"), {
      type: "accent",
      mode: r,
      label: a.funcName,
      isStretchy: !1,
      isShifty: !0,
      base: t
    };
  },
  htmlBuilder: br,
  mathmlBuilder: gn
});
q({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    return {
      type: "accentUnder",
      mode: t.mode,
      label: r,
      base: n
    };
  },
  htmlBuilder: (a, e) => {
    var t = Y(a.base, e), r = Ke.svgSpan(a, e), n = a.label === "\\utilde" ? 0.12 : 0, i = D.makeVList({
      positionType: "top",
      positionData: t.height,
      children: [{
        type: "elem",
        elem: r,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: n
      }, {
        type: "elem",
        elem: t
      }]
    }, e);
    return D.makeSpan(["mord", "accentunder"], [i], e);
  },
  mathmlBuilder: (a, e) => {
    var t = Ke.mathMLnode(a.label), r = new R.MathNode("munder", [Q(a.base, e), t]);
    return r.setAttribute("accentunder", "true"), r;
  }
});
var Z0 = (a) => {
  var e = new R.MathNode("mpadded", a ? [a] : []);
  return e.setAttribute("width", "+0.6em"), e.setAttribute("lspace", "0.3em"), e;
};
q({
  type: "xArrow",
  names: [
    "\\xleftarrow",
    "\\xrightarrow",
    "\\xLeftarrow",
    "\\xRightarrow",
    "\\xleftrightarrow",
    "\\xLeftrightarrow",
    "\\xhookleftarrow",
    "\\xhookrightarrow",
    "\\xmapsto",
    "\\xrightharpoondown",
    "\\xrightharpoonup",
    "\\xleftharpoondown",
    "\\xleftharpoonup",
    "\\xrightleftharpoons",
    "\\xleftrightharpoons",
    "\\xlongequal",
    "\\xtwoheadrightarrow",
    "\\xtwoheadleftarrow",
    "\\xtofrom",
    // The next 3 functions are here to support the mhchem extension.
    // Direct use of these functions is discouraged and may break someday.
    "\\xrightleftarrows",
    "\\xrightequilibrium",
    "\\xleftequilibrium",
    // The next 3 functions are here only to support the {CD} environment.
    "\\\\cdrightarrow",
    "\\\\cdleftarrow",
    "\\\\cdlongequal"
  ],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(a, e, t) {
    var {
      parser: r,
      funcName: n
    } = a;
    return {
      type: "xArrow",
      mode: r.mode,
      label: n,
      body: e[0],
      below: t[0]
    };
  },
  // Flow is unable to correctly infer the type of `group`, even though it's
  // unambiguously determined from the passed-in `type` above.
  htmlBuilder(a, e) {
    var t = e.style, r = e.havingStyle(t.sup()), n = D.wrapFragment(Y(a.body, r, e), e), i = a.label.slice(0, 2) === "\\x" ? "x" : "cd";
    n.classes.push(i + "-arrow-pad");
    var s;
    a.below && (r = e.havingStyle(t.sub()), s = D.wrapFragment(Y(a.below, r, e), e), s.classes.push(i + "-arrow-pad"));
    var u = Ke.svgSpan(a, e), c = -e.fontMetrics().axisHeight + 0.5 * u.height, m = -e.fontMetrics().axisHeight - 0.5 * u.height - 0.111;
    (n.depth > 0.25 || a.label === "\\xleftequilibrium") && (m -= n.depth);
    var p;
    if (s) {
      var g = -e.fontMetrics().axisHeight + s.height + 0.5 * u.height + 0.111;
      p = D.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: n,
          shift: m
        }, {
          type: "elem",
          elem: u,
          shift: c
        }, {
          type: "elem",
          elem: s,
          shift: g
        }]
      }, e);
    } else
      p = D.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: n,
          shift: m
        }, {
          type: "elem",
          elem: u,
          shift: c
        }]
      }, e);
    return p.children[0].children[0].children[1].classes.push("svg-align"), D.makeSpan(["mrel", "x-arrow"], [p], e);
  },
  mathmlBuilder(a, e) {
    var t = Ke.mathMLnode(a.label);
    t.setAttribute("minsize", a.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var r;
    if (a.body) {
      var n = Z0(Q(a.body, e));
      if (a.below) {
        var i = Z0(Q(a.below, e));
        r = new R.MathNode("munderover", [t, i, n]);
      } else
        r = new R.MathNode("mover", [t, n]);
    } else if (a.below) {
      var s = Z0(Q(a.below, e));
      r = new R.MathNode("munder", [t, s]);
    } else
      r = Z0(), r = new R.MathNode("mover", [t, r]);
    return r;
  }
});
var Ol = D.makeSpan;
function vn(a, e) {
  var t = he(a.body, e, !0);
  return Ol([a.mclass], t, e);
}
function bn(a, e) {
  var t, r = we(a.body, e);
  return a.mclass === "minner" ? t = new R.MathNode("mpadded", r) : a.mclass === "mord" ? a.isCharacterBox ? (t = r[0], t.type = "mi") : t = new R.MathNode("mi", r) : (a.isCharacterBox ? (t = r[0], t.type = "mo") : t = new R.MathNode("mo", r), a.mclass === "mbin" ? (t.attributes.lspace = "0.22em", t.attributes.rspace = "0.22em") : a.mclass === "mpunct" ? (t.attributes.lspace = "0em", t.attributes.rspace = "0.17em") : a.mclass === "mopen" || a.mclass === "mclose" ? (t.attributes.lspace = "0em", t.attributes.rspace = "0em") : a.mclass === "minner" && (t.attributes.lspace = "0.0556em", t.attributes.width = "+0.1111em")), t;
}
q({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    return {
      type: "mclass",
      mode: t.mode,
      mclass: "m" + r.slice(5),
      // TODO(kevinb): don't prefix with 'm'
      body: ue(n),
      isCharacterBox: H.isCharacterBox(n)
    };
  },
  htmlBuilder: vn,
  mathmlBuilder: bn
});
var wt = (a) => {
  var e = a.type === "ordgroup" && a.body.length ? a.body[0] : a;
  return e.type === "atom" && (e.family === "bin" || e.family === "rel") ? "m" + e.family : "mord";
};
q({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "mclass",
      mode: t.mode,
      mclass: wt(e[0]),
      body: ue(e[1]),
      isCharacterBox: H.isCharacterBox(e[1])
    };
  }
});
q({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a, n = e[1], i = e[0], s;
    r !== "\\stackrel" ? s = wt(n) : s = "mrel";
    var u = {
      type: "op",
      mode: n.mode,
      limits: !0,
      alwaysHandleSupSub: !0,
      parentIsSupSub: !1,
      symbol: !1,
      suppressBaseShift: r !== "\\stackrel",
      body: ue(n)
    }, c = {
      type: "supsub",
      mode: i.mode,
      base: u,
      sup: r === "\\underset" ? null : i,
      sub: r === "\\underset" ? i : null
    };
    return {
      type: "mclass",
      mode: t.mode,
      mclass: s,
      body: [c],
      isCharacterBox: H.isCharacterBox(c)
    };
  },
  htmlBuilder: vn,
  mathmlBuilder: bn
});
q({
  type: "pmb",
  names: ["\\pmb"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "pmb",
      mode: t.mode,
      mclass: wt(e[0]),
      body: ue(e[0])
    };
  },
  htmlBuilder(a, e) {
    var t = he(a.body, e, !0), r = D.makeSpan([a.mclass], t, e);
    return r.style.textShadow = "0.02em 0.01em 0.04px", r;
  },
  mathmlBuilder(a, e) {
    var t = we(a.body, e), r = new R.MathNode("mstyle", t);
    return r.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px"), r;
  }
});
var ql = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  A: "\\uparrow",
  V: "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
}, da = () => ({
  type: "styling",
  body: [],
  mode: "math",
  style: "display"
}), pa = (a) => a.type === "textord" && a.text === "@", Pl = (a, e) => (a.type === "mathord" || a.type === "atom") && a.text === e;
function Hl(a, e, t) {
  var r = ql[a];
  switch (r) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return t.callFunction(r, [e[0]], [e[1]]);
    case "\\uparrow":
    case "\\downarrow": {
      var n = t.callFunction("\\\\cdleft", [e[0]], []), i = {
        type: "atom",
        text: r,
        mode: "math",
        family: "rel"
      }, s = t.callFunction("\\Big", [i], []), u = t.callFunction("\\\\cdright", [e[1]], []), c = {
        type: "ordgroup",
        mode: "math",
        body: [n, s, u]
      };
      return t.callFunction("\\\\cdparent", [c], []);
    }
    case "\\\\cdlongequal":
      return t.callFunction("\\\\cdlongequal", [], []);
    case "\\Vert": {
      var m = {
        type: "textord",
        text: "\\Vert",
        mode: "math"
      };
      return t.callFunction("\\Big", [m], []);
    }
    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}
function $l(a) {
  var e = [];
  for (a.gullet.beginGroup(), a.gullet.macros.set("\\cr", "\\\\\\relax"), a.gullet.beginGroup(); ; ) {
    e.push(a.parseExpression(!1, "\\\\")), a.gullet.endGroup(), a.gullet.beginGroup();
    var t = a.fetch().text;
    if (t === "&" || t === "\\\\")
      a.consume();
    else if (t === "\\end") {
      e[e.length - 1].length === 0 && e.pop();
      break;
    } else
      throw new I("Expected \\\\ or \\cr or \\end", a.nextToken);
  }
  for (var r = [], n = [r], i = 0; i < e.length; i++) {
    for (var s = e[i], u = da(), c = 0; c < s.length; c++)
      if (!pa(s[c]))
        u.body.push(s[c]);
      else {
        r.push(u), c += 1;
        var m = vr(s[c]).text, p = new Array(2);
        if (p[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }, p[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }, !("=|.".indexOf(m) > -1)) if ("<>AV".indexOf(m) > -1)
          for (var g = 0; g < 2; g++) {
            for (var x = !0, b = c + 1; b < s.length; b++) {
              if (Pl(s[b], m)) {
                x = !1, c = b;
                break;
              }
              if (pa(s[b]))
                throw new I("Missing a " + m + " character to complete a CD arrow.", s[b]);
              p[g].body.push(s[b]);
            }
            if (x)
              throw new I("Missing a " + m + " character to complete a CD arrow.", s[c]);
          }
        else
          throw new I('Expected one of "<>AV=|." after @', s[c]);
        var T = Hl(m, p, a), S = {
          type: "styling",
          body: [T],
          mode: "math",
          style: "display"
          // CD is always displaystyle.
        };
        r.push(S), u = da();
      }
    i % 2 === 0 ? r.push(u) : r.shift(), r = [], n.push(r);
  }
  a.gullet.endGroup(), a.gullet.endGroup();
  var C = new Array(n[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    // CD package sets \enskip between columns.
    postgap: 0.25
    // So pre and post each get half an \enskip, i.e. 0.25em.
  });
  return {
    type: "array",
    mode: "math",
    body: n,
    arraystretch: 1,
    addJot: !0,
    rowGaps: [null],
    cols: C,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(n.length + 1).fill([])
  };
}
q({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a;
    return {
      type: "cdlabel",
      mode: t.mode,
      side: r.slice(4),
      label: e[0]
    };
  },
  htmlBuilder(a, e) {
    var t = e.havingStyle(e.style.sup()), r = D.wrapFragment(Y(a.label, t, e), e);
    return r.classes.push("cd-label-" + a.side), r.style.bottom = L(0.8 - r.depth), r.height = 0, r.depth = 0, r;
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mrow", [Q(a.label, e)]);
    return t = new R.MathNode("mpadded", [t]), t.setAttribute("width", "0"), a.side === "left" && t.setAttribute("lspace", "-1width"), t.setAttribute("voffset", "0.7em"), t = new R.MathNode("mstyle", [t]), t.setAttribute("displaystyle", "false"), t.setAttribute("scriptlevel", "1"), t;
  }
});
q({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "cdlabelparent",
      mode: t.mode,
      fragment: e[0]
    };
  },
  htmlBuilder(a, e) {
    var t = D.wrapFragment(Y(a.fragment, e), e);
    return t.classes.push("cd-vert-arrow"), t;
  },
  mathmlBuilder(a, e) {
    return new R.MathNode("mrow", [Q(a.fragment, e)]);
  }
});
q({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(a, e) {
    for (var {
      parser: t
    } = a, r = V(e[0], "ordgroup"), n = r.body, i = "", s = 0; s < n.length; s++) {
      var u = V(n[s], "textord");
      i += u.text;
    }
    var c = parseInt(i), m;
    if (isNaN(c))
      throw new I("\\@char has non-numeric argument " + i);
    if (c < 0 || c >= 1114111)
      throw new I("\\@char with invalid code point " + i);
    return c <= 65535 ? m = String.fromCharCode(c) : (c -= 65536, m = String.fromCharCode((c >> 10) + 55296, (c & 1023) + 56320)), {
      type: "textord",
      mode: t.mode,
      text: m
    };
  }
});
var yn = (a, e) => {
  var t = he(a.body, e.withColor(a.color), !1);
  return D.makeFragment(t);
}, xn = (a, e) => {
  var t = we(a.body, e.withColor(a.color)), r = new R.MathNode("mstyle", t);
  return r.setAttribute("mathcolor", a.color), r;
};
q({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: !0,
    argTypes: ["color", "original"]
  },
  handler(a, e) {
    var {
      parser: t
    } = a, r = V(e[0], "color-token").color, n = e[1];
    return {
      type: "color",
      mode: t.mode,
      color: r,
      body: ue(n)
    };
  },
  htmlBuilder: yn,
  mathmlBuilder: xn
});
q({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: !0,
    argTypes: ["color"]
  },
  handler(a, e) {
    var {
      parser: t,
      breakOnTokenText: r
    } = a, n = V(e[0], "color-token").color;
    t.gullet.macros.set("\\current@color", n);
    var i = t.parseExpression(!0, r);
    return {
      type: "color",
      mode: t.mode,
      color: n,
      body: i
    };
  },
  htmlBuilder: yn,
  mathmlBuilder: xn
});
q({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 0,
    allowedInText: !0
  },
  handler(a, e, t) {
    var {
      parser: r
    } = a, n = r.gullet.future().text === "[" ? r.parseSizeGroup(!0) : null, i = !r.settings.displayMode || !r.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline does nothing in display mode");
    return {
      type: "cr",
      mode: r.mode,
      newLine: i,
      size: n && V(n, "size").value
    };
  },
  // The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder(a, e) {
    var t = D.makeSpan(["mspace"], [], e);
    return a.newLine && (t.classes.push("newline"), a.size && (t.style.marginTop = L(se(a.size, e)))), t;
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mspace");
    return a.newLine && (t.setAttribute("linebreak", "newline"), a.size && t.setAttribute("height", L(se(a.size, e)))), t;
  }
});
var sr = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
}, wn = (a) => {
  var e = a.text;
  if (/^(?:[\\{}$&#^_]|EOF)$/.test(e))
    throw new I("Expected a control sequence", a);
  return e;
}, _l = (a) => {
  var e = a.gullet.popToken();
  return e.text === "=" && (e = a.gullet.popToken(), e.text === " " && (e = a.gullet.popToken())), e;
}, kn = (a, e, t, r) => {
  var n = a.gullet.macros.get(t.text);
  n == null && (t.noexpand = !0, n = {
    tokens: [t],
    numArgs: 0,
    // reproduce the same behavior in expansion
    unexpandable: !a.gullet.isExpandable(t.text)
  }), a.gullet.macros.set(e, n, r);
};
q({
  type: "internal",
  names: [
    "\\global",
    "\\long",
    "\\\\globallong"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a;
    e.consumeSpaces();
    var r = e.fetch();
    if (sr[r.text])
      return (t === "\\global" || t === "\\\\globallong") && (r.text = sr[r.text]), V(e.parseFunction(), "internal");
    throw new I("Invalid token after macro prefix", r);
  }
});
q({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a, r = e.gullet.popToken(), n = r.text;
    if (/^(?:[\\{}$&#^_]|EOF)$/.test(n))
      throw new I("Expected a control sequence", r);
    for (var i = 0, s, u = [[]]; e.gullet.future().text !== "{"; )
      if (r = e.gullet.popToken(), r.text === "#") {
        if (e.gullet.future().text === "{") {
          s = e.gullet.future(), u[i].push("{");
          break;
        }
        if (r = e.gullet.popToken(), !/^[1-9]$/.test(r.text))
          throw new I('Invalid argument number "' + r.text + '"');
        if (parseInt(r.text) !== i + 1)
          throw new I('Argument number "' + r.text + '" out of order');
        i++, u.push([]);
      } else {
        if (r.text === "EOF")
          throw new I("Expected a macro definition");
        u[i].push(r.text);
      }
    var {
      tokens: c
    } = e.gullet.consumeArg();
    return s && c.unshift(s), (t === "\\edef" || t === "\\xdef") && (c = e.gullet.expandTokens(c), c.reverse()), e.gullet.macros.set(n, {
      tokens: c,
      numArgs: i,
      delimiters: u
    }, t === sr[t]), {
      type: "internal",
      mode: e.mode
    };
  }
});
q({
  type: "internal",
  names: [
    "\\let",
    "\\\\globallet"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a, r = wn(e.gullet.popToken());
    e.gullet.consumeSpaces();
    var n = _l(e);
    return kn(e, r, n, t === "\\\\globallet"), {
      type: "internal",
      mode: e.mode
    };
  }
});
q({
  type: "internal",
  names: [
    "\\futurelet",
    "\\\\globalfuture"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a, r = wn(e.gullet.popToken()), n = e.gullet.popToken(), i = e.gullet.popToken();
    return kn(e, r, i, t === "\\\\globalfuture"), e.gullet.pushToken(i), e.gullet.pushToken(n), {
      type: "internal",
      mode: e.mode
    };
  }
});
var z0 = function(e, t, r) {
  var n = ee.math[e] && ee.math[e].replace, i = dr(n || e, t, r);
  if (!i)
    throw new Error("Unsupported symbol " + e + " and font size " + t + ".");
  return i;
}, yr = function(e, t, r, n) {
  var i = r.havingBaseStyle(t), s = D.makeSpan(n.concat(i.sizingClasses(r)), [e], r), u = i.sizeMultiplier / r.sizeMultiplier;
  return s.height *= u, s.depth *= u, s.maxFontSize = i.sizeMultiplier, s;
}, Dn = function(e, t, r) {
  var n = t.havingBaseStyle(r), i = (1 - t.sizeMultiplier / n.sizeMultiplier) * t.fontMetrics().axisHeight;
  e.classes.push("delimcenter"), e.style.top = L(i), e.height -= i, e.depth += i;
}, Gl = function(e, t, r, n, i, s) {
  var u = D.makeSymbol(e, "Main-Regular", i, n), c = yr(u, t, n, s);
  return r && Dn(c, n, t), c;
}, Ul = function(e, t, r, n) {
  return D.makeSymbol(e, "Size" + t + "-Regular", r, n);
}, An = function(e, t, r, n, i, s) {
  var u = Ul(e, t, i, n), c = yr(D.makeSpan(["delimsizing", "size" + t], [u], n), _.TEXT, n, s);
  return r && Dn(c, n, _.TEXT), c;
}, Pt = function(e, t, r) {
  var n;
  t === "Size1-Regular" ? n = "delim-size1" : n = "delim-size4";
  var i = D.makeSpan(["delimsizinginner", n], [D.makeSpan([], [D.makeSymbol(e, t, r)])]);
  return {
    type: "elem",
    elem: i
  };
}, Ht = function(e, t, r) {
  var n = We["Size4-Regular"][e.charCodeAt(0)] ? We["Size4-Regular"][e.charCodeAt(0)][4] : We["Size1-Regular"][e.charCodeAt(0)][4], i = new f0("inner", Ys(e, Math.round(1e3 * t))), s = new s0([i], {
    width: L(n),
    height: L(t),
    // Override CSS rule `.katex svg { width: 100% }`
    style: "width:" + L(n),
    viewBox: "0 0 " + 1e3 * n + " " + Math.round(1e3 * t),
    preserveAspectRatio: "xMinYMin"
  }), u = D.makeSvgSpan([], [s], r);
  return u.height = t, u.style.height = L(t), u.style.width = L(n), {
    type: "elem",
    elem: u
  };
}, lr = 8e-3, K0 = {
  type: "kern",
  size: -1 * lr
}, Vl = ["|", "\\lvert", "\\rvert", "\\vert"], jl = ["\\|", "\\lVert", "\\rVert", "\\Vert"], Sn = function(e, t, r, n, i, s) {
  var u, c, m, p, g = "", x = 0;
  u = m = p = e, c = null;
  var b = "Size1-Regular";
  e === "\\uparrow" ? m = p = "⏐" : e === "\\Uparrow" ? m = p = "‖" : e === "\\downarrow" ? u = m = "⏐" : e === "\\Downarrow" ? u = m = "‖" : e === "\\updownarrow" ? (u = "\\uparrow", m = "⏐", p = "\\downarrow") : e === "\\Updownarrow" ? (u = "\\Uparrow", m = "‖", p = "\\Downarrow") : H.contains(Vl, e) ? (m = "∣", g = "vert", x = 333) : H.contains(jl, e) ? (m = "∥", g = "doublevert", x = 556) : e === "[" || e === "\\lbrack" ? (u = "⎡", m = "⎢", p = "⎣", b = "Size4-Regular", g = "lbrack", x = 667) : e === "]" || e === "\\rbrack" ? (u = "⎤", m = "⎥", p = "⎦", b = "Size4-Regular", g = "rbrack", x = 667) : e === "\\lfloor" || e === "⌊" ? (m = u = "⎢", p = "⎣", b = "Size4-Regular", g = "lfloor", x = 667) : e === "\\lceil" || e === "⌈" ? (u = "⎡", m = p = "⎢", b = "Size4-Regular", g = "lceil", x = 667) : e === "\\rfloor" || e === "⌋" ? (m = u = "⎥", p = "⎦", b = "Size4-Regular", g = "rfloor", x = 667) : e === "\\rceil" || e === "⌉" ? (u = "⎤", m = p = "⎥", b = "Size4-Regular", g = "rceil", x = 667) : e === "(" || e === "\\lparen" ? (u = "⎛", m = "⎜", p = "⎝", b = "Size4-Regular", g = "lparen", x = 875) : e === ")" || e === "\\rparen" ? (u = "⎞", m = "⎟", p = "⎠", b = "Size4-Regular", g = "rparen", x = 875) : e === "\\{" || e === "\\lbrace" ? (u = "⎧", c = "⎨", p = "⎩", m = "⎪", b = "Size4-Regular") : e === "\\}" || e === "\\rbrace" ? (u = "⎫", c = "⎬", p = "⎭", m = "⎪", b = "Size4-Regular") : e === "\\lgroup" || e === "⟮" ? (u = "⎧", p = "⎩", m = "⎪", b = "Size4-Regular") : e === "\\rgroup" || e === "⟯" ? (u = "⎫", p = "⎭", m = "⎪", b = "Size4-Regular") : e === "\\lmoustache" || e === "⎰" ? (u = "⎧", p = "⎭", m = "⎪", b = "Size4-Regular") : (e === "\\rmoustache" || e === "⎱") && (u = "⎫", p = "⎩", m = "⎪", b = "Size4-Regular");
  var T = z0(u, b, i), S = T.height + T.depth, C = z0(m, b, i), M = C.height + C.depth, w = z0(p, b, i), k = w.height + w.depth, A = 0, E = 1;
  if (c !== null) {
    var F = z0(c, b, i);
    A = F.height + F.depth, E = 2;
  }
  var B = S + k + A, O = Math.max(0, Math.ceil((t - B) / (E * M))), N = B + O * E * M, U = n.fontMetrics().axisHeight;
  r && (U *= n.sizeMultiplier);
  var j = N / 2 - U, X = [];
  if (g.length > 0) {
    var te = N - S - k, W = Math.round(N * 1e3), oe = Zs(g, Math.round(te * 1e3)), ye = new f0(g, oe), Se = (x / 1e3).toFixed(3) + "em", re = (W / 1e3).toFixed(3) + "em", de = new s0([ye], {
      width: Se,
      height: re,
      viewBox: "0 0 " + x + " " + W
    }), me = D.makeSvgSpan([], [de], n);
    me.height = W / 1e3, me.style.width = Se, me.style.height = re, X.push({
      type: "elem",
      elem: me
    });
  } else {
    if (X.push(Pt(p, b, i)), X.push(K0), c === null) {
      var pe = N - S - k + 2 * lr;
      X.push(Ht(m, pe, n));
    } else {
      var ae = (N - S - k - A) / 2 + 2 * lr;
      X.push(Ht(m, ae, n)), X.push(K0), X.push(Pt(c, b, i)), X.push(K0), X.push(Ht(m, ae, n));
    }
    X.push(K0), X.push(Pt(u, b, i));
  }
  var o0 = n.havingBaseStyle(_.TEXT), Fe = D.makeVList({
    positionType: "bottom",
    positionData: j,
    children: X
  }, o0);
  return yr(D.makeSpan(["delimsizing", "mult"], [Fe], o0), _.TEXT, n, s);
}, $t = 80, _t = 0.08, Gt = function(e, t, r, n, i) {
  var s = Xs(e, n, r), u = new f0(e, s), c = new s0([u], {
    // Note: 1000:1 ratio of viewBox to document em width.
    width: "400em",
    height: L(t),
    viewBox: "0 0 400000 " + r,
    preserveAspectRatio: "xMinYMin slice"
  });
  return D.makeSvgSpan(["hide-tail"], [c], i);
}, Wl = function(e, t) {
  var r = t.havingBaseSizing(), n = Tn("\\surd", e * r.sizeMultiplier, Cn, r), i = r.sizeMultiplier, s = Math.max(0, t.minRuleThickness - t.fontMetrics().sqrtRuleThickness), u, c = 0, m = 0, p = 0, g;
  return n.type === "small" ? (p = 1e3 + 1e3 * s + $t, e < 1 ? i = 1 : e < 1.4 && (i = 0.7), c = (1 + s + _t) / i, m = (1 + s) / i, u = Gt("sqrtMain", c, p, s, t), u.style.minWidth = "0.853em", g = 0.833 / i) : n.type === "large" ? (p = (1e3 + $t) * R0[n.size], m = (R0[n.size] + s) / i, c = (R0[n.size] + s + _t) / i, u = Gt("sqrtSize" + n.size, c, p, s, t), u.style.minWidth = "1.02em", g = 1 / i) : (c = e + s + _t, m = e + s, p = Math.floor(1e3 * e + s) + $t, u = Gt("sqrtTall", c, p, s, t), u.style.minWidth = "0.742em", g = 1.056), u.height = m, u.style.height = L(c), {
    span: u,
    advanceWidth: g,
    // Calculate the actual line width.
    // This actually should depend on the chosen font -- e.g. \boldmath
    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
    // have thicker rules.
    ruleWidth: (t.fontMetrics().sqrtRuleThickness + s) * i
  };
}, Fn = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "\\surd"], Xl = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱"], En = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"], R0 = [0, 1.2, 1.8, 2.4, 3], Yl = function(e, t, r, n, i) {
  if (e === "<" || e === "\\lt" || e === "⟨" ? e = "\\langle" : (e === ">" || e === "\\gt" || e === "⟩") && (e = "\\rangle"), H.contains(Fn, e) || H.contains(En, e))
    return An(e, t, !1, r, n, i);
  if (H.contains(Xl, e))
    return Sn(e, R0[t], !1, r, n, i);
  throw new I("Illegal delimiter: '" + e + "'");
}, Zl = [{
  type: "small",
  style: _.SCRIPTSCRIPT
}, {
  type: "small",
  style: _.SCRIPT
}, {
  type: "small",
  style: _.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}], Kl = [{
  type: "small",
  style: _.SCRIPTSCRIPT
}, {
  type: "small",
  style: _.SCRIPT
}, {
  type: "small",
  style: _.TEXT
}, {
  type: "stack"
}], Cn = [{
  type: "small",
  style: _.SCRIPTSCRIPT
}, {
  type: "small",
  style: _.SCRIPT
}, {
  type: "small",
  style: _.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}], Jl = function(e) {
  if (e.type === "small")
    return "Main-Regular";
  if (e.type === "large")
    return "Size" + e.size + "-Regular";
  if (e.type === "stack")
    return "Size4-Regular";
  throw new Error("Add support for delim type '" + e.type + "' here.");
}, Tn = function(e, t, r, n) {
  for (var i = Math.min(2, 3 - n.style.size), s = i; s < r.length && r[s].type !== "stack"; s++) {
    var u = z0(e, Jl(r[s]), "math"), c = u.height + u.depth;
    if (r[s].type === "small") {
      var m = n.havingBaseStyle(r[s].style);
      c *= m.sizeMultiplier;
    }
    if (c > t)
      return r[s];
  }
  return r[r.length - 1];
}, Mn = function(e, t, r, n, i, s) {
  e === "<" || e === "\\lt" || e === "⟨" ? e = "\\langle" : (e === ">" || e === "\\gt" || e === "⟩") && (e = "\\rangle");
  var u;
  H.contains(En, e) ? u = Zl : H.contains(Fn, e) ? u = Cn : u = Kl;
  var c = Tn(e, t, u, n);
  return c.type === "small" ? Gl(e, c.style, r, n, i, s) : c.type === "large" ? An(e, c.size, r, n, i, s) : Sn(e, t, r, n, i, s);
}, Ql = function(e, t, r, n, i, s) {
  var u = n.fontMetrics().axisHeight * n.sizeMultiplier, c = 901, m = 5 / n.fontMetrics().ptPerEm, p = Math.max(t - u, r + u), g = Math.max(
    // In real TeX, calculations are done using integral values which are
    // 65536 per pt, or 655360 per em. So, the division here truncates in
    // TeX but doesn't here, producing different results. If we wanted to
    // exactly match TeX's calculation, we could do
    //   Math.floor(655360 * maxDistFromAxis / 500) *
    //    delimiterFactor / 655360
    // (To see the difference, compare
    //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
    // in TeX and KaTeX)
    p / 500 * c,
    2 * p - m
  );
  return Mn(e, g, !0, n, i, s);
}, Ye = {
  sqrtImage: Wl,
  sizedDelim: Yl,
  sizeToMaxHeight: R0,
  customSizedDelim: Mn,
  leftRightDelim: Ql
}, fa = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
}, e1 = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "⌊", "⌋", "\\lceil", "\\rceil", "⌈", "⌉", "<", ">", "\\langle", "⟨", "\\rangle", "⟩", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "⟮", "⟯", "\\lmoustache", "\\rmoustache", "⎰", "⎱", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];
function kt(a, e) {
  var t = xt(a);
  if (t && H.contains(e1, t.text))
    return t;
  throw t ? new I("Invalid delimiter '" + t.text + "' after '" + e.funcName + "'", a) : new I("Invalid delimiter type '" + a.type + "'", a);
}
q({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (a, e) => {
    var t = kt(e[0], a);
    return {
      type: "delimsizing",
      mode: a.parser.mode,
      size: fa[a.funcName].size,
      mclass: fa[a.funcName].mclass,
      delim: t.text
    };
  },
  htmlBuilder: (a, e) => a.delim === "." ? D.makeSpan([a.mclass]) : Ye.sizedDelim(a.delim, a.size, e, a.mode, [a.mclass]),
  mathmlBuilder: (a) => {
    var e = [];
    a.delim !== "." && e.push(Be(a.delim, a.mode));
    var t = new R.MathNode("mo", e);
    a.mclass === "mopen" || a.mclass === "mclose" ? t.setAttribute("fence", "true") : t.setAttribute("fence", "false"), t.setAttribute("stretchy", "true");
    var r = L(Ye.sizeToMaxHeight[a.size]);
    return t.setAttribute("minsize", r), t.setAttribute("maxsize", r), t;
  }
});
function ga(a) {
  if (!a.body)
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
}
q({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (a, e) => {
    var t = a.parser.gullet.macros.get("\\current@color");
    if (t && typeof t != "string")
      throw new I("\\current@color set to non-string in \\right");
    return {
      type: "leftright-right",
      mode: a.parser.mode,
      delim: kt(e[0], a).text,
      color: t
      // undefined if not set via \color
    };
  }
});
q({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (a, e) => {
    var t = kt(e[0], a), r = a.parser;
    ++r.leftrightDepth;
    var n = r.parseExpression(!1);
    --r.leftrightDepth, r.expect("\\right", !1);
    var i = V(r.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: r.mode,
      body: n,
      left: t.text,
      right: i.delim,
      rightColor: i.color
    };
  },
  htmlBuilder: (a, e) => {
    ga(a);
    for (var t = he(a.body, e, !0, ["mopen", "mclose"]), r = 0, n = 0, i = !1, s = 0; s < t.length; s++)
      t[s].isMiddle ? i = !0 : (r = Math.max(t[s].height, r), n = Math.max(t[s].depth, n));
    r *= e.sizeMultiplier, n *= e.sizeMultiplier;
    var u;
    if (a.left === "." ? u = O0(e, ["mopen"]) : u = Ye.leftRightDelim(a.left, r, n, e, a.mode, ["mopen"]), t.unshift(u), i)
      for (var c = 1; c < t.length; c++) {
        var m = t[c], p = m.isMiddle;
        p && (t[c] = Ye.leftRightDelim(p.delim, r, n, p.options, a.mode, []));
      }
    var g;
    if (a.right === ".")
      g = O0(e, ["mclose"]);
    else {
      var x = a.rightColor ? e.withColor(a.rightColor) : e;
      g = Ye.leftRightDelim(a.right, r, n, x, a.mode, ["mclose"]);
    }
    return t.push(g), D.makeSpan(["minner"], t, e);
  },
  mathmlBuilder: (a, e) => {
    ga(a);
    var t = we(a.body, e);
    if (a.left !== ".") {
      var r = new R.MathNode("mo", [Be(a.left, a.mode)]);
      r.setAttribute("fence", "true"), t.unshift(r);
    }
    if (a.right !== ".") {
      var n = new R.MathNode("mo", [Be(a.right, a.mode)]);
      n.setAttribute("fence", "true"), a.rightColor && n.setAttribute("mathcolor", a.rightColor), t.push(n);
    }
    return fr(t);
  }
});
q({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (a, e) => {
    var t = kt(e[0], a);
    if (!a.parser.leftrightDepth)
      throw new I("\\middle without preceding \\left", t);
    return {
      type: "middle",
      mode: a.parser.mode,
      delim: t.text
    };
  },
  htmlBuilder: (a, e) => {
    var t;
    if (a.delim === ".")
      t = O0(e, []);
    else {
      t = Ye.sizedDelim(a.delim, 1, e, a.mode, []);
      var r = {
        delim: a.delim,
        options: e
      };
      t.isMiddle = r;
    }
    return t;
  },
  mathmlBuilder: (a, e) => {
    var t = a.delim === "\\vert" || a.delim === "|" ? Be("|", "text") : Be(a.delim, a.mode), r = new R.MathNode("mo", [t]);
    return r.setAttribute("fence", "true"), r.setAttribute("lspace", "0.05em"), r.setAttribute("rspace", "0.05em"), r;
  }
});
var xr = (a, e) => {
  var t = D.wrapFragment(Y(a.body, e), e), r = a.label.slice(1), n = e.sizeMultiplier, i, s = 0, u = H.isCharacterBox(a.body);
  if (r === "sout")
    i = D.makeSpan(["stretchy", "sout"]), i.height = e.fontMetrics().defaultRuleThickness / n, s = -0.5 * e.fontMetrics().xHeight;
  else if (r === "phase") {
    var c = se({
      number: 0.6,
      unit: "pt"
    }, e), m = se({
      number: 0.35,
      unit: "ex"
    }, e), p = e.havingBaseSizing();
    n = n / p.sizeMultiplier;
    var g = t.height + t.depth + c + m;
    t.style.paddingLeft = L(g / 2 + c);
    var x = Math.floor(1e3 * g * n), b = js(x), T = new s0([new f0("phase", b)], {
      width: "400em",
      height: L(x / 1e3),
      viewBox: "0 0 400000 " + x,
      preserveAspectRatio: "xMinYMin slice"
    });
    i = D.makeSvgSpan(["hide-tail"], [T], e), i.style.height = L(g), s = t.depth + c + m;
  } else {
    /cancel/.test(r) ? u || t.classes.push("cancel-pad") : r === "angl" ? t.classes.push("anglpad") : t.classes.push("boxpad");
    var S = 0, C = 0, M = 0;
    /box/.test(r) ? (M = Math.max(
      e.fontMetrics().fboxrule,
      // default
      e.minRuleThickness
      // User override.
    ), S = e.fontMetrics().fboxsep + (r === "colorbox" ? 0 : M), C = S) : r === "angl" ? (M = Math.max(e.fontMetrics().defaultRuleThickness, e.minRuleThickness), S = 4 * M, C = Math.max(0, 0.25 - t.depth)) : (S = u ? 0.2 : 0, C = S), i = Ke.encloseSpan(t, r, S, C, e), /fbox|boxed|fcolorbox/.test(r) ? (i.style.borderStyle = "solid", i.style.borderWidth = L(M)) : r === "angl" && M !== 0.049 && (i.style.borderTopWidth = L(M), i.style.borderRightWidth = L(M)), s = t.depth + C, a.backgroundColor && (i.style.backgroundColor = a.backgroundColor, a.borderColor && (i.style.borderColor = a.borderColor));
  }
  var w;
  if (a.backgroundColor)
    w = D.makeVList({
      positionType: "individualShift",
      children: [
        // Put the color background behind inner;
        {
          type: "elem",
          elem: i,
          shift: s
        },
        {
          type: "elem",
          elem: t,
          shift: 0
        }
      ]
    }, e);
  else {
    var k = /cancel|phase/.test(r) ? ["svg-align"] : [];
    w = D.makeVList({
      positionType: "individualShift",
      children: [
        // Write the \cancel stroke on top of inner.
        {
          type: "elem",
          elem: t,
          shift: 0
        },
        {
          type: "elem",
          elem: i,
          shift: s,
          wrapperClasses: k
        }
      ]
    }, e);
  }
  return /cancel/.test(r) && (w.height = t.height, w.depth = t.depth), /cancel/.test(r) && !u ? D.makeSpan(["mord", "cancel-lap"], [w], e) : D.makeSpan(["mord"], [w], e);
}, wr = (a, e) => {
  var t = 0, r = new R.MathNode(a.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [Q(a.body, e)]);
  switch (a.label) {
    case "\\cancel":
      r.setAttribute("notation", "updiagonalstrike");
      break;
    case "\\bcancel":
      r.setAttribute("notation", "downdiagonalstrike");
      break;
    case "\\phase":
      r.setAttribute("notation", "phasorangle");
      break;
    case "\\sout":
      r.setAttribute("notation", "horizontalstrike");
      break;
    case "\\fbox":
      r.setAttribute("notation", "box");
      break;
    case "\\angl":
      r.setAttribute("notation", "actuarial");
      break;
    case "\\fcolorbox":
    case "\\colorbox":
      if (t = e.fontMetrics().fboxsep * e.fontMetrics().ptPerEm, r.setAttribute("width", "+" + 2 * t + "pt"), r.setAttribute("height", "+" + 2 * t + "pt"), r.setAttribute("lspace", t + "pt"), r.setAttribute("voffset", t + "pt"), a.label === "\\fcolorbox") {
        var n = Math.max(
          e.fontMetrics().fboxrule,
          // default
          e.minRuleThickness
          // user override
        );
        r.setAttribute("style", "border: " + n + "em solid " + String(a.borderColor));
      }
      break;
    case "\\xcancel":
      r.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }
  return a.backgroundColor && r.setAttribute("mathbackground", a.backgroundColor), r;
};
q({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: !0,
    argTypes: ["color", "text"]
  },
  handler(a, e, t) {
    var {
      parser: r,
      funcName: n
    } = a, i = V(e[0], "color-token").color, s = e[1];
    return {
      type: "enclose",
      mode: r.mode,
      label: n,
      backgroundColor: i,
      body: s
    };
  },
  htmlBuilder: xr,
  mathmlBuilder: wr
});
q({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: !0,
    argTypes: ["color", "color", "text"]
  },
  handler(a, e, t) {
    var {
      parser: r,
      funcName: n
    } = a, i = V(e[0], "color-token").color, s = V(e[1], "color-token").color, u = e[2];
    return {
      type: "enclose",
      mode: r.mode,
      label: n,
      backgroundColor: s,
      borderColor: i,
      body: u
    };
  },
  htmlBuilder: xr,
  mathmlBuilder: wr
});
q({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: !0
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "enclose",
      mode: t.mode,
      label: "\\fbox",
      body: e[0]
    };
  }
});
q({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    return {
      type: "enclose",
      mode: t.mode,
      label: r,
      body: n
    };
  },
  htmlBuilder: xr,
  mathmlBuilder: wr
});
q({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: !1
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "enclose",
      mode: t.mode,
      label: "\\angl",
      body: e[0]
    };
  }
});
var zn = {};
function _e(a) {
  for (var {
    type: e,
    names: t,
    props: r,
    handler: n,
    htmlBuilder: i,
    mathmlBuilder: s
  } = a, u = {
    type: e,
    numArgs: r.numArgs || 0,
    allowedInText: !1,
    numOptionalArgs: 0,
    handler: n
  }, c = 0; c < t.length; ++c)
    zn[t[c]] = u;
  i && (ct[e] = i), s && (ht[e] = s);
}
var Bn = {};
function d(a, e) {
  Bn[a] = e;
}
function va(a) {
  var e = [];
  a.consumeSpaces();
  var t = a.fetch().text;
  for (t === "\\relax" && (a.consume(), a.consumeSpaces(), t = a.fetch().text); t === "\\hline" || t === "\\hdashline"; )
    a.consume(), e.push(t === "\\hdashline"), a.consumeSpaces(), t = a.fetch().text;
  return e;
}
var Dt = (a) => {
  var e = a.parser.settings;
  if (!e.displayMode)
    throw new I("{" + a.envName + "} can be used only in display mode.");
};
function kr(a) {
  if (a.indexOf("ed") === -1)
    return a.indexOf("*") === -1;
}
function u0(a, e, t) {
  var {
    hskipBeforeAndAfter: r,
    addJot: n,
    cols: i,
    arraystretch: s,
    colSeparationType: u,
    autoTag: c,
    singleRow: m,
    emptySingleRow: p,
    maxNumCols: g,
    leqno: x
  } = e;
  if (a.gullet.beginGroup(), m || a.gullet.macros.set("\\cr", "\\\\\\relax"), !s) {
    var b = a.gullet.expandMacroAsText("\\arraystretch");
    if (b == null)
      s = 1;
    else if (s = parseFloat(b), !s || s < 0)
      throw new I("Invalid \\arraystretch: " + b);
  }
  a.gullet.beginGroup();
  var T = [], S = [T], C = [], M = [], w = c != null ? [] : void 0;
  function k() {
    c && a.gullet.macros.set("\\@eqnsw", "1", !0);
  }
  function A() {
    w && (a.gullet.macros.get("\\df@tag") ? (w.push(a.subparse([new ze("\\df@tag")])), a.gullet.macros.set("\\df@tag", void 0, !0)) : w.push(!!c && a.gullet.macros.get("\\@eqnsw") === "1"));
  }
  for (k(), M.push(va(a)); ; ) {
    var E = a.parseExpression(!1, m ? "\\end" : "\\\\");
    a.gullet.endGroup(), a.gullet.beginGroup(), E = {
      type: "ordgroup",
      mode: a.mode,
      body: E
    }, t && (E = {
      type: "styling",
      mode: a.mode,
      style: t,
      body: [E]
    }), T.push(E);
    var F = a.fetch().text;
    if (F === "&") {
      if (g && T.length === g) {
        if (m || u)
          throw new I("Too many tab characters: &", a.nextToken);
        a.settings.reportNonstrict("textEnv", "Too few columns specified in the {array} column argument.");
      }
      a.consume();
    } else if (F === "\\end") {
      A(), T.length === 1 && E.type === "styling" && E.body[0].body.length === 0 && (S.length > 1 || !p) && S.pop(), M.length < S.length + 1 && M.push([]);
      break;
    } else if (F === "\\\\") {
      a.consume();
      var B = void 0;
      a.gullet.future().text !== " " && (B = a.parseSizeGroup(!0)), C.push(B ? B.value : null), A(), M.push(va(a)), T = [], S.push(T), k();
    } else
      throw new I("Expected & or \\\\ or \\cr or \\end", a.nextToken);
  }
  return a.gullet.endGroup(), a.gullet.endGroup(), {
    type: "array",
    mode: a.mode,
    addJot: n,
    arraystretch: s,
    body: S,
    cols: i,
    rowGaps: C,
    hskipBeforeAndAfter: r,
    hLinesBeforeRow: M,
    colSeparationType: u,
    tags: w,
    leqno: x
  };
}
function Dr(a) {
  return a.slice(0, 1) === "d" ? "display" : "text";
}
var Ge = function(e, t) {
  var r, n, i = e.body.length, s = e.hLinesBeforeRow, u = 0, c = new Array(i), m = [], p = Math.max(
    // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
    t.fontMetrics().arrayRuleWidth,
    t.minRuleThickness
    // User override.
  ), g = 1 / t.fontMetrics().ptPerEm, x = 5 * g;
  if (e.colSeparationType && e.colSeparationType === "small") {
    var b = t.havingStyle(_.SCRIPT).sizeMultiplier;
    x = 0.2778 * (b / t.sizeMultiplier);
  }
  var T = e.colSeparationType === "CD" ? se({
    number: 3,
    unit: "ex"
  }, t) : 12 * g, S = 3 * g, C = e.arraystretch * T, M = 0.7 * C, w = 0.3 * C, k = 0;
  function A($0) {
    for (var _0 = 0; _0 < $0.length; ++_0)
      _0 > 0 && (k += 0.25), m.push({
        pos: k,
        isDashed: $0[_0]
      });
  }
  for (A(s[0]), r = 0; r < e.body.length; ++r) {
    var E = e.body[r], F = M, B = w;
    u < E.length && (u = E.length);
    var O = new Array(E.length);
    for (n = 0; n < E.length; ++n) {
      var N = Y(E[n], t);
      B < N.depth && (B = N.depth), F < N.height && (F = N.height), O[n] = N;
    }
    var U = e.rowGaps[r], j = 0;
    U && (j = se(U, t), j > 0 && (j += w, B < j && (B = j), j = 0)), e.addJot && (B += S), O.height = F, O.depth = B, k += F, O.pos = k, k += B + j, c[r] = O, A(s[r + 1]);
  }
  var X = k / 2 + t.fontMetrics().axisHeight, te = e.cols || [], W = [], oe, ye, Se = [];
  if (e.tags && e.tags.some(($0) => $0))
    for (r = 0; r < i; ++r) {
      var re = c[r], de = re.pos - X, me = e.tags[r], pe = void 0;
      me === !0 ? pe = D.makeSpan(["eqn-num"], [], t) : me === !1 ? pe = D.makeSpan([], [], t) : pe = D.makeSpan([], he(me, t, !0), t), pe.depth = re.depth, pe.height = re.height, Se.push({
        type: "elem",
        elem: pe,
        shift: de
      });
    }
  for (
    n = 0, ye = 0;
    // Continue while either there are more columns or more column
    // descriptions, so trailing separators don't get lost.
    n < u || ye < te.length;
    ++n, ++ye
  ) {
    for (var ae = te[ye] || {}, o0 = !0; ae.type === "separator"; ) {
      if (o0 || (oe = D.makeSpan(["arraycolsep"], []), oe.style.width = L(t.fontMetrics().doubleRuleSep), W.push(oe)), ae.separator === "|" || ae.separator === ":") {
        var Fe = ae.separator === "|" ? "solid" : "dashed", Ee = D.makeSpan(["vertical-separator"], [], t);
        Ee.style.height = L(k), Ee.style.borderRightWidth = L(p), Ee.style.borderRightStyle = Fe, Ee.style.margin = "0 " + L(-p / 2);
        var c0 = k - X;
        c0 && (Ee.style.verticalAlign = L(-c0)), W.push(Ee);
      } else
        throw new I("Invalid separator type: " + ae.separator);
      ye++, ae = te[ye] || {}, o0 = !1;
    }
    if (!(n >= u)) {
      var Re = void 0;
      (n > 0 || e.hskipBeforeAndAfter) && (Re = H.deflt(ae.pregap, x), Re !== 0 && (oe = D.makeSpan(["arraycolsep"], []), oe.style.width = L(Re), W.push(oe)));
      var qe = [];
      for (r = 0; r < i; ++r) {
        var h0 = c[r], Qe = h0[n];
        if (Qe) {
          var y0 = h0.pos - X;
          Qe.depth = h0.depth, Qe.height = h0.height, qe.push({
            type: "elem",
            elem: Qe,
            shift: y0
          });
        }
      }
      qe = D.makeVList({
        positionType: "individualShift",
        children: qe
      }, t), qe = D.makeSpan(["col-align-" + (ae.align || "c")], [qe]), W.push(qe), (n < u - 1 || e.hskipBeforeAndAfter) && (Re = H.deflt(ae.postgap, x), Re !== 0 && (oe = D.makeSpan(["arraycolsep"], []), oe.style.width = L(Re), W.push(oe)));
    }
  }
  if (c = D.makeSpan(["mtable"], W), m.length > 0) {
    for (var Et = D.makeLineSpan("hline", t, p), E0 = D.makeLineSpan("hdashline", t, p), Ct = [{
      type: "elem",
      elem: c,
      shift: 0
    }]; m.length > 0; ) {
      var Pr = m.pop(), Hr = Pr.pos - X;
      Pr.isDashed ? Ct.push({
        type: "elem",
        elem: E0,
        shift: Hr
      }) : Ct.push({
        type: "elem",
        elem: Et,
        shift: Hr
      });
    }
    c = D.makeVList({
      positionType: "individualShift",
      children: Ct
    }, t);
  }
  if (Se.length === 0)
    return D.makeSpan(["mord"], [c], t);
  var Tt = D.makeVList({
    positionType: "individualShift",
    children: Se
  }, t);
  return Tt = D.makeSpan(["tag"], [Tt], t), D.makeFragment([c, Tt]);
}, t1 = {
  c: "center ",
  l: "left ",
  r: "right "
}, Ue = function(e, t) {
  for (var r = [], n = new R.MathNode("mtd", [], ["mtr-glue"]), i = new R.MathNode("mtd", [], ["mml-eqn-num"]), s = 0; s < e.body.length; s++) {
    for (var u = e.body[s], c = [], m = 0; m < u.length; m++)
      c.push(new R.MathNode("mtd", [Q(u[m], t)]));
    e.tags && e.tags[s] && (c.unshift(n), c.push(n), e.leqno ? c.unshift(i) : c.push(i)), r.push(new R.MathNode("mtr", c));
  }
  var p = new R.MathNode("mtable", r), g = e.arraystretch === 0.5 ? 0.1 : 0.16 + e.arraystretch - 1 + (e.addJot ? 0.09 : 0);
  p.setAttribute("rowspacing", L(g));
  var x = "", b = "";
  if (e.cols && e.cols.length > 0) {
    var T = e.cols, S = "", C = !1, M = 0, w = T.length;
    T[0].type === "separator" && (x += "top ", M = 1), T[T.length - 1].type === "separator" && (x += "bottom ", w -= 1);
    for (var k = M; k < w; k++)
      T[k].type === "align" ? (b += t1[T[k].align], C && (S += "none "), C = !0) : T[k].type === "separator" && C && (S += T[k].separator === "|" ? "solid " : "dashed ", C = !1);
    p.setAttribute("columnalign", b.trim()), /[sd]/.test(S) && p.setAttribute("columnlines", S.trim());
  }
  if (e.colSeparationType === "align") {
    for (var A = e.cols || [], E = "", F = 1; F < A.length; F++)
      E += F % 2 ? "0em " : "1em ";
    p.setAttribute("columnspacing", E.trim());
  } else e.colSeparationType === "alignat" || e.colSeparationType === "gather" ? p.setAttribute("columnspacing", "0em") : e.colSeparationType === "small" ? p.setAttribute("columnspacing", "0.2778em") : e.colSeparationType === "CD" ? p.setAttribute("columnspacing", "0.5em") : p.setAttribute("columnspacing", "1em");
  var B = "", O = e.hLinesBeforeRow;
  x += O[0].length > 0 ? "left " : "", x += O[O.length - 1].length > 0 ? "right " : "";
  for (var N = 1; N < O.length - 1; N++)
    B += O[N].length === 0 ? "none " : O[N][0] ? "dashed " : "solid ";
  return /[sd]/.test(B) && p.setAttribute("rowlines", B.trim()), x !== "" && (p = new R.MathNode("menclose", [p]), p.setAttribute("notation", x.trim())), e.arraystretch && e.arraystretch < 1 && (p = new R.MathNode("mstyle", [p]), p.setAttribute("scriptlevel", "1")), p;
}, Rn = function(e, t) {
  e.envName.indexOf("ed") === -1 && Dt(e);
  var r = [], n = e.envName.indexOf("at") > -1 ? "alignat" : "align", i = e.envName === "split", s = u0(e.parser, {
    cols: r,
    addJot: !0,
    autoTag: i ? void 0 : kr(e.envName),
    emptySingleRow: !0,
    colSeparationType: n,
    maxNumCols: i ? 2 : void 0,
    leqno: e.parser.settings.leqno
  }, "display"), u, c = 0, m = {
    type: "ordgroup",
    mode: e.mode,
    body: []
  };
  if (t[0] && t[0].type === "ordgroup") {
    for (var p = "", g = 0; g < t[0].body.length; g++) {
      var x = V(t[0].body[g], "textord");
      p += x.text;
    }
    u = Number(p), c = u * 2;
  }
  var b = !c;
  s.body.forEach(function(M) {
    for (var w = 1; w < M.length; w += 2) {
      var k = V(M[w], "styling"), A = V(k.body[0], "ordgroup");
      A.body.unshift(m);
    }
    if (b)
      c < M.length && (c = M.length);
    else {
      var E = M.length / 2;
      if (u < E)
        throw new I("Too many math in a row: " + ("expected " + u + ", but got " + E), M[0]);
    }
  });
  for (var T = 0; T < c; ++T) {
    var S = "r", C = 0;
    T % 2 === 1 ? S = "l" : T > 0 && b && (C = 1), r[T] = {
      type: "align",
      align: S,
      pregap: C,
      postgap: 0
    };
  }
  return s.colSeparationType = b ? "align" : "alignat", s;
};
_e({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var t = xt(e[0]), r = t ? [e[0]] : V(e[0], "ordgroup").body, n = r.map(function(s) {
      var u = vr(s), c = u.text;
      if ("lcr".indexOf(c) !== -1)
        return {
          type: "align",
          align: c
        };
      if (c === "|")
        return {
          type: "separator",
          separator: "|"
        };
      if (c === ":")
        return {
          type: "separator",
          separator: ":"
        };
      throw new I("Unknown column alignment: " + c, s);
    }), i = {
      cols: n,
      hskipBeforeAndAfter: !0,
      // \@preamble in lttab.dtx
      maxNumCols: n.length
    };
    return u0(a.parser, i, Dr(a.envName));
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler(a) {
    var e = {
      matrix: null,
      pmatrix: ["(", ")"],
      bmatrix: ["[", "]"],
      Bmatrix: ["\\{", "\\}"],
      vmatrix: ["|", "|"],
      Vmatrix: ["\\Vert", "\\Vert"]
    }[a.envName.replace("*", "")], t = "c", r = {
      hskipBeforeAndAfter: !1,
      cols: [{
        type: "align",
        align: t
      }]
    };
    if (a.envName.charAt(a.envName.length - 1) === "*") {
      var n = a.parser;
      if (n.consumeSpaces(), n.fetch().text === "[") {
        if (n.consume(), n.consumeSpaces(), t = n.fetch().text, "lcr".indexOf(t) === -1)
          throw new I("Expected l or c or r", n.nextToken);
        n.consume(), n.consumeSpaces(), n.expect("]"), n.consume(), r.cols = [{
          type: "align",
          align: t
        }];
      }
    }
    var i = u0(a.parser, r, Dr(a.envName)), s = Math.max(0, ...i.body.map((u) => u.length));
    return i.cols = new Array(s).fill({
      type: "align",
      align: t
    }), e ? {
      type: "leftright",
      mode: a.mode,
      body: [i],
      left: e[0],
      right: e[1],
      rightColor: void 0
      // \right uninfluenced by \color in array
    } : i;
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler(a) {
    var e = {
      arraystretch: 0.5
    }, t = u0(a.parser, e, "script");
    return t.colSeparationType = "small", t;
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var t = xt(e[0]), r = t ? [e[0]] : V(e[0], "ordgroup").body, n = r.map(function(s) {
      var u = vr(s), c = u.text;
      if ("lc".indexOf(c) !== -1)
        return {
          type: "align",
          align: c
        };
      throw new I("Unknown column alignment: " + c, s);
    });
    if (n.length > 1)
      throw new I("{subarray} can contain only one column");
    var i = {
      cols: n,
      hskipBeforeAndAfter: !1,
      arraystretch: 0.5
    };
    if (i = u0(a.parser, i, "script"), i.body.length > 0 && i.body[0].length > 1)
      throw new I("{subarray} can contain only one column");
    return i;
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler(a) {
    var e = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        // TODO(kevinb) get the current style.
        // For now we use the metrics for TEXT style which is what we were
        // doing before.  Before attempting to get the current style we
        // should look at TeX's behavior especially for \over and matrices.
        postgap: 1
        /* 1em quad */
      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    }, t = u0(a.parser, e, Dr(a.envName));
    return {
      type: "leftright",
      mode: a.mode,
      body: [t],
      left: a.envName.indexOf("r") > -1 ? "." : "\\{",
      right: a.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: void 0
    };
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: Rn,
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler(a) {
    H.contains(["gather", "gather*"], a.envName) && Dt(a);
    var e = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: !0,
      colSeparationType: "gather",
      autoTag: kr(a.envName),
      emptySingleRow: !0,
      leqno: a.parser.settings.leqno
    };
    return u0(a.parser, e, "display");
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: Rn,
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler(a) {
    Dt(a);
    var e = {
      autoTag: kr(a.envName),
      emptySingleRow: !0,
      singleRow: !0,
      maxNumCols: 1,
      leqno: a.parser.settings.leqno
    };
    return u0(a.parser, e, "display");
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
_e({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler(a) {
    return Dt(a), $l(a.parser);
  },
  htmlBuilder: Ge,
  mathmlBuilder: Ue
});
d("\\nonumber", "\\gdef\\@eqnsw{0}");
d("\\notag", "\\nonumber");
q({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !0
  },
  handler(a, e) {
    throw new I(a.funcName + " valid only within array environment");
  }
});
var ba = zn;
q({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    if (n.type !== "ordgroup")
      throw new I("Invalid environment name", n);
    for (var i = "", s = 0; s < n.body.length; ++s)
      i += V(n.body[s], "textord").text;
    if (r === "\\begin") {
      if (!ba.hasOwnProperty(i))
        throw new I("No such environment: " + i, n);
      var u = ba[i], {
        args: c,
        optArgs: m
      } = t.parseArguments("\\begin{" + i + "}", u), p = {
        mode: t.mode,
        envName: i,
        parser: t
      }, g = u.handler(p, c, m);
      t.expect("\\end", !1);
      var x = t.nextToken, b = V(t.parseFunction(), "environment");
      if (b.name !== i)
        throw new I("Mismatch: \\begin{" + i + "} matched by \\end{" + b.name + "}", x);
      return g;
    }
    return {
      type: "environment",
      mode: t.mode,
      name: i,
      nameGroup: n
    };
  }
});
var In = (a, e) => {
  var t = a.font, r = e.withFont(t);
  return Y(a.body, r);
}, Nn = (a, e) => {
  var t = a.font, r = e.withFont(t);
  return Q(a.body, r);
}, ya = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
q({
  type: "font",
  names: [
    // styles, except \boldsymbol defined below
    "\\mathrm",
    "\\mathit",
    "\\mathbf",
    "\\mathnormal",
    "\\mathsfit",
    // families
    "\\mathbb",
    "\\mathcal",
    "\\mathfrak",
    "\\mathscr",
    "\\mathsf",
    "\\mathtt",
    // aliases, except \bm defined below
    "\\Bbb",
    "\\bold",
    "\\frak"
  ],
  props: {
    numArgs: 1,
    allowedInArgument: !0
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = mt(e[0]), i = r;
    return i in ya && (i = ya[i]), {
      type: "font",
      mode: t.mode,
      font: i.slice(1),
      body: n
    };
  },
  htmlBuilder: In,
  mathmlBuilder: Nn
});
q({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = e[0], n = H.isCharacterBox(r);
    return {
      type: "mclass",
      mode: t.mode,
      mclass: wt(r),
      body: [{
        type: "font",
        mode: t.mode,
        font: "boldsymbol",
        body: r
      }],
      isCharacterBox: n
    };
  }
});
q({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r,
      breakOnTokenText: n
    } = a, {
      mode: i
    } = t, s = t.parseExpression(!0, n), u = "math" + r.slice(1);
    return {
      type: "font",
      mode: i,
      font: u,
      body: {
        type: "ordgroup",
        mode: t.mode,
        body: s
      }
    };
  },
  htmlBuilder: In,
  mathmlBuilder: Nn
});
var Ln = (a, e) => {
  var t = e;
  return a === "display" ? t = t.id >= _.SCRIPT.id ? t.text() : _.DISPLAY : a === "text" && t.size === _.DISPLAY.size ? t = _.TEXT : a === "script" ? t = _.SCRIPT : a === "scriptscript" && (t = _.SCRIPTSCRIPT), t;
}, Ar = (a, e) => {
  var t = Ln(a.size, e.style), r = t.fracNum(), n = t.fracDen(), i;
  i = e.havingStyle(r);
  var s = Y(a.numer, i, e);
  if (a.continued) {
    var u = 8.5 / e.fontMetrics().ptPerEm, c = 3.5 / e.fontMetrics().ptPerEm;
    s.height = s.height < u ? u : s.height, s.depth = s.depth < c ? c : s.depth;
  }
  i = e.havingStyle(n);
  var m = Y(a.denom, i, e), p, g, x;
  a.hasBarLine ? (a.barSize ? (g = se(a.barSize, e), p = D.makeLineSpan("frac-line", e, g)) : p = D.makeLineSpan("frac-line", e), g = p.height, x = p.height) : (p = null, g = 0, x = e.fontMetrics().defaultRuleThickness);
  var b, T, S;
  t.size === _.DISPLAY.size || a.size === "display" ? (b = e.fontMetrics().num1, g > 0 ? T = 3 * x : T = 7 * x, S = e.fontMetrics().denom1) : (g > 0 ? (b = e.fontMetrics().num2, T = x) : (b = e.fontMetrics().num3, T = 3 * x), S = e.fontMetrics().denom2);
  var C;
  if (p) {
    var w = e.fontMetrics().axisHeight;
    b - s.depth - (w + 0.5 * g) < T && (b += T - (b - s.depth - (w + 0.5 * g))), w - 0.5 * g - (m.height - S) < T && (S += T - (w - 0.5 * g - (m.height - S)));
    var k = -(w - 0.5 * g);
    C = D.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: m,
        shift: S
      }, {
        type: "elem",
        elem: p,
        shift: k
      }, {
        type: "elem",
        elem: s,
        shift: -b
      }]
    }, e);
  } else {
    var M = b - s.depth - (m.height - S);
    M < T && (b += 0.5 * (T - M), S += 0.5 * (T - M)), C = D.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: m,
        shift: S
      }, {
        type: "elem",
        elem: s,
        shift: -b
      }]
    }, e);
  }
  i = e.havingStyle(t), C.height *= i.sizeMultiplier / e.sizeMultiplier, C.depth *= i.sizeMultiplier / e.sizeMultiplier;
  var A;
  t.size === _.DISPLAY.size ? A = e.fontMetrics().delim1 : t.size === _.SCRIPTSCRIPT.size ? A = e.havingStyle(_.SCRIPT).fontMetrics().delim2 : A = e.fontMetrics().delim2;
  var E, F;
  return a.leftDelim == null ? E = O0(e, ["mopen"]) : E = Ye.customSizedDelim(a.leftDelim, A, !0, e.havingStyle(t), a.mode, ["mopen"]), a.continued ? F = D.makeSpan([]) : a.rightDelim == null ? F = O0(e, ["mclose"]) : F = Ye.customSizedDelim(a.rightDelim, A, !0, e.havingStyle(t), a.mode, ["mclose"]), D.makeSpan(["mord"].concat(i.sizingClasses(e)), [E, D.makeSpan(["mfrac"], [C]), F], e);
}, Sr = (a, e) => {
  var t = new R.MathNode("mfrac", [Q(a.numer, e), Q(a.denom, e)]);
  if (!a.hasBarLine)
    t.setAttribute("linethickness", "0px");
  else if (a.barSize) {
    var r = se(a.barSize, e);
    t.setAttribute("linethickness", L(r));
  }
  var n = Ln(a.size, e.style);
  if (n.size !== e.style.size) {
    t = new R.MathNode("mstyle", [t]);
    var i = n.size === _.DISPLAY.size ? "true" : "false";
    t.setAttribute("displaystyle", i), t.setAttribute("scriptlevel", "0");
  }
  if (a.leftDelim != null || a.rightDelim != null) {
    var s = [];
    if (a.leftDelim != null) {
      var u = new R.MathNode("mo", [new R.TextNode(a.leftDelim.replace("\\", ""))]);
      u.setAttribute("fence", "true"), s.push(u);
    }
    if (s.push(t), a.rightDelim != null) {
      var c = new R.MathNode("mo", [new R.TextNode(a.rightDelim.replace("\\", ""))]);
      c.setAttribute("fence", "true"), s.push(c);
    }
    return fr(s);
  }
  return t;
};
q({
  type: "genfrac",
  names: [
    "\\dfrac",
    "\\frac",
    "\\tfrac",
    "\\dbinom",
    "\\binom",
    "\\tbinom",
    "\\\\atopfrac",
    // can’t be entered directly
    "\\\\bracefrac",
    "\\\\brackfrac"
    // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: !0
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0], i = e[1], s, u = null, c = null, m = "auto";
    switch (r) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        s = !0;
        break;
      case "\\\\atopfrac":
        s = !1;
        break;
      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        s = !1, u = "(", c = ")";
        break;
      case "\\\\bracefrac":
        s = !1, u = "\\{", c = "\\}";
        break;
      case "\\\\brackfrac":
        s = !1, u = "[", c = "]";
        break;
      default:
        throw new Error("Unrecognized genfrac command");
    }
    switch (r) {
      case "\\dfrac":
      case "\\dbinom":
        m = "display";
        break;
      case "\\tfrac":
      case "\\tbinom":
        m = "text";
        break;
    }
    return {
      type: "genfrac",
      mode: t.mode,
      continued: !1,
      numer: n,
      denom: i,
      hasBarLine: s,
      leftDelim: u,
      rightDelim: c,
      size: m,
      barSize: null
    };
  },
  htmlBuilder: Ar,
  mathmlBuilder: Sr
});
q({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0], i = e[1];
    return {
      type: "genfrac",
      mode: t.mode,
      continued: !0,
      numer: n,
      denom: i,
      hasBarLine: !0,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
});
q({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: !0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t,
      token: r
    } = a, n;
    switch (t) {
      case "\\over":
        n = "\\frac";
        break;
      case "\\choose":
        n = "\\binom";
        break;
      case "\\atop":
        n = "\\\\atopfrac";
        break;
      case "\\brace":
        n = "\\\\bracefrac";
        break;
      case "\\brack":
        n = "\\\\brackfrac";
        break;
      default:
        throw new Error("Unrecognized infix genfrac command");
    }
    return {
      type: "infix",
      mode: e.mode,
      replaceWith: n,
      token: r
    };
  }
});
var xa = ["display", "text", "script", "scriptscript"], wa = function(e) {
  var t = null;
  return e.length > 0 && (t = e, t = t === "." ? null : t), t;
};
q({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: !0,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler(a, e) {
    var {
      parser: t
    } = a, r = e[4], n = e[5], i = mt(e[0]), s = i.type === "atom" && i.family === "open" ? wa(i.text) : null, u = mt(e[1]), c = u.type === "atom" && u.family === "close" ? wa(u.text) : null, m = V(e[2], "size"), p, g = null;
    m.isBlank ? p = !0 : (g = m.value, p = g.number > 0);
    var x = "auto", b = e[3];
    if (b.type === "ordgroup") {
      if (b.body.length > 0) {
        var T = V(b.body[0], "textord");
        x = xa[Number(T.text)];
      }
    } else
      b = V(b, "textord"), x = xa[Number(b.text)];
    return {
      type: "genfrac",
      mode: t.mode,
      numer: r,
      denom: n,
      continued: !1,
      hasBarLine: p,
      barSize: g,
      leftDelim: s,
      rightDelim: c,
      size: x
    };
  },
  htmlBuilder: Ar,
  mathmlBuilder: Sr
});
q({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: !0
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r,
      token: n
    } = a;
    return {
      type: "infix",
      mode: t.mode,
      replaceWith: "\\\\abovefrac",
      size: V(e[0], "size").value,
      token: n
    };
  }
});
q({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0], i = Ms(V(e[1], "infix").size), s = e[2], u = i.number > 0;
    return {
      type: "genfrac",
      mode: t.mode,
      numer: n,
      denom: s,
      continued: !1,
      hasBarLine: u,
      barSize: i,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: Ar,
  mathmlBuilder: Sr
});
var On = (a, e) => {
  var t = e.style, r, n;
  a.type === "supsub" ? (r = a.sup ? Y(a.sup, e.havingStyle(t.sup()), e) : Y(a.sub, e.havingStyle(t.sub()), e), n = V(a.base, "horizBrace")) : n = V(a, "horizBrace");
  var i = Y(n.base, e.havingBaseStyle(_.DISPLAY)), s = Ke.svgSpan(n, e), u;
  if (n.isOver ? (u = D.makeVList({
    positionType: "firstBaseline",
    children: [{
      type: "elem",
      elem: i
    }, {
      type: "kern",
      size: 0.1
    }, {
      type: "elem",
      elem: s
    }]
  }, e), u.children[0].children[0].children[1].classes.push("svg-align")) : (u = D.makeVList({
    positionType: "bottom",
    positionData: i.depth + 0.1 + s.height,
    children: [{
      type: "elem",
      elem: s
    }, {
      type: "kern",
      size: 0.1
    }, {
      type: "elem",
      elem: i
    }]
  }, e), u.children[0].children[0].children[0].classes.push("svg-align")), r) {
    var c = D.makeSpan(["mord", n.isOver ? "mover" : "munder"], [u], e);
    n.isOver ? u = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: c
      }, {
        type: "kern",
        size: 0.2
      }, {
        type: "elem",
        elem: r
      }]
    }, e) : u = D.makeVList({
      positionType: "bottom",
      positionData: c.depth + 0.2 + r.height + r.depth,
      children: [{
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: 0.2
      }, {
        type: "elem",
        elem: c
      }]
    }, e);
  }
  return D.makeSpan(["mord", n.isOver ? "mover" : "munder"], [u], e);
}, r1 = (a, e) => {
  var t = Ke.mathMLnode(a.label);
  return new R.MathNode(a.isOver ? "mover" : "munder", [Q(a.base, e), t]);
};
q({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a;
    return {
      type: "horizBrace",
      mode: t.mode,
      label: r,
      isOver: /^\\over/.test(r),
      base: e[0]
    };
  },
  htmlBuilder: On,
  mathmlBuilder: r1
});
q({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = e[1], n = V(e[0], "url").url;
    return t.settings.isTrusted({
      command: "\\href",
      url: n
    }) ? {
      type: "href",
      mode: t.mode,
      href: n,
      body: ue(r)
    } : t.formatUnsupportedCmd("\\href");
  },
  htmlBuilder: (a, e) => {
    var t = he(a.body, e, !1);
    return D.makeAnchor(a.href, [], t, e);
  },
  mathmlBuilder: (a, e) => {
    var t = l0(a.body, e);
    return t instanceof De || (t = new De("mrow", [t])), t.setAttribute("href", a.href), t;
  }
});
q({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = V(e[0], "url").url;
    if (!t.settings.isTrusted({
      command: "\\url",
      url: r
    }))
      return t.formatUnsupportedCmd("\\url");
    for (var n = [], i = 0; i < r.length; i++) {
      var s = r[i];
      s === "~" && (s = "\\textasciitilde"), n.push({
        type: "textord",
        mode: "text",
        text: s
      });
    }
    var u = {
      type: "text",
      mode: t.mode,
      font: "\\texttt",
      body: n
    };
    return {
      type: "href",
      mode: t.mode,
      href: r,
      body: ue(u)
    };
  }
});
q({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: !0,
    primitive: !0
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "hbox",
      mode: t.mode,
      body: ue(e[0])
    };
  },
  htmlBuilder(a, e) {
    var t = he(a.body, e, !1);
    return D.makeFragment(t);
  },
  mathmlBuilder(a, e) {
    return new R.MathNode("mrow", we(a.body, e));
  }
});
q({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r,
      token: n
    } = a, i = V(e[0], "raw").string, s = e[1];
    t.settings.strict && t.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    var u, c = {};
    switch (r) {
      case "\\htmlClass":
        c.class = i, u = {
          command: "\\htmlClass",
          class: i
        };
        break;
      case "\\htmlId":
        c.id = i, u = {
          command: "\\htmlId",
          id: i
        };
        break;
      case "\\htmlStyle":
        c.style = i, u = {
          command: "\\htmlStyle",
          style: i
        };
        break;
      case "\\htmlData": {
        for (var m = i.split(","), p = 0; p < m.length; p++) {
          var g = m[p].split("=");
          if (g.length !== 2)
            throw new I("Error parsing key-value for \\htmlData");
          c["data-" + g[0].trim()] = g[1].trim();
        }
        u = {
          command: "\\htmlData",
          attributes: c
        };
        break;
      }
      default:
        throw new Error("Unrecognized html command");
    }
    return t.settings.isTrusted(u) ? {
      type: "html",
      mode: t.mode,
      attributes: c,
      body: ue(s)
    } : t.formatUnsupportedCmd(r);
  },
  htmlBuilder: (a, e) => {
    var t = he(a.body, e, !1), r = ["enclosing"];
    a.attributes.class && r.push(...a.attributes.class.trim().split(/\s+/));
    var n = D.makeSpan(r, t, e);
    for (var i in a.attributes)
      i !== "class" && a.attributes.hasOwnProperty(i) && n.setAttribute(i, a.attributes[i]);
    return n;
  },
  mathmlBuilder: (a, e) => l0(a.body, e)
});
q({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a;
    return {
      type: "htmlmathml",
      mode: t.mode,
      html: ue(e[0]),
      mathml: ue(e[1])
    };
  },
  htmlBuilder: (a, e) => {
    var t = he(a.html, e, !1);
    return D.makeFragment(t);
  },
  mathmlBuilder: (a, e) => l0(a.mathml, e)
});
var Ut = function(e) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))
    return {
      number: +e,
      unit: "bp"
    };
  var t = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);
  if (!t)
    throw new I("Invalid size: '" + e + "' in \\includegraphics");
  var r = {
    number: +(t[1] + t[2]),
    // sign + magnitude, cast to number
    unit: t[3]
  };
  if (!rn(r))
    throw new I("Invalid unit: '" + r.unit + "' in \\includegraphics.");
  return r;
};
q({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: !1
  },
  handler: (a, e, t) => {
    var {
      parser: r
    } = a, n = {
      number: 0,
      unit: "em"
    }, i = {
      number: 0.9,
      unit: "em"
    }, s = {
      number: 0,
      unit: "em"
    }, u = "";
    if (t[0])
      for (var c = V(t[0], "raw").string, m = c.split(","), p = 0; p < m.length; p++) {
        var g = m[p].split("=");
        if (g.length === 2) {
          var x = g[1].trim();
          switch (g[0].trim()) {
            case "alt":
              u = x;
              break;
            case "width":
              n = Ut(x);
              break;
            case "height":
              i = Ut(x);
              break;
            case "totalheight":
              s = Ut(x);
              break;
            default:
              throw new I("Invalid key: '" + g[0] + "' in \\includegraphics.");
          }
        }
      }
    var b = V(e[0], "url").url;
    return u === "" && (u = b, u = u.replace(/^.*[\\/]/, ""), u = u.substring(0, u.lastIndexOf("."))), r.settings.isTrusted({
      command: "\\includegraphics",
      url: b
    }) ? {
      type: "includegraphics",
      mode: r.mode,
      alt: u,
      width: n,
      height: i,
      totalheight: s,
      src: b
    } : r.formatUnsupportedCmd("\\includegraphics");
  },
  htmlBuilder: (a, e) => {
    var t = se(a.height, e), r = 0;
    a.totalheight.number > 0 && (r = se(a.totalheight, e) - t);
    var n = 0;
    a.width.number > 0 && (n = se(a.width, e));
    var i = {
      height: L(t + r)
    };
    n > 0 && (i.width = L(n)), r > 0 && (i.verticalAlign = L(-r));
    var s = new tl(a.src, a.alt, i);
    return s.height = t, s.depth = r, s;
  },
  mathmlBuilder: (a, e) => {
    var t = new R.MathNode("mglyph", []);
    t.setAttribute("alt", a.alt);
    var r = se(a.height, e), n = 0;
    if (a.totalheight.number > 0 && (n = se(a.totalheight, e) - r, t.setAttribute("valign", L(-n))), t.setAttribute("height", L(r + n)), a.width.number > 0) {
      var i = se(a.width, e);
      t.setAttribute("width", L(i));
    }
    return t.setAttribute("src", a.src), t;
  }
});
q({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: !0,
    allowedInText: !0
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a, n = V(e[0], "size");
    if (t.settings.strict) {
      var i = r[1] === "m", s = n.value.unit === "mu";
      i ? (s || t.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " supports only mu units, " + ("not " + n.value.unit + " units")), t.mode !== "math" && t.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " works only in math mode")) : s && t.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + r + " doesn't support mu units");
    }
    return {
      type: "kern",
      mode: t.mode,
      dimension: n.value
    };
  },
  htmlBuilder(a, e) {
    return D.makeGlue(a.dimension, e);
  },
  mathmlBuilder(a, e) {
    var t = se(a.dimension, e);
    return new R.SpaceNode(t);
  }
});
q({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    return {
      type: "lap",
      mode: t.mode,
      alignment: r.slice(5),
      body: n
    };
  },
  htmlBuilder: (a, e) => {
    var t;
    a.alignment === "clap" ? (t = D.makeSpan([], [Y(a.body, e)]), t = D.makeSpan(["inner"], [t], e)) : t = D.makeSpan(["inner"], [Y(a.body, e)]);
    var r = D.makeSpan(["fix"], []), n = D.makeSpan([a.alignment], [t, r], e), i = D.makeSpan(["strut"]);
    return i.style.height = L(n.height + n.depth), n.depth && (i.style.verticalAlign = L(-n.depth)), n.children.unshift(i), n = D.makeSpan(["thinbox"], [n], e), D.makeSpan(["mord", "vbox"], [n], e);
  },
  mathmlBuilder: (a, e) => {
    var t = new R.MathNode("mpadded", [Q(a.body, e)]);
    if (a.alignment !== "rlap") {
      var r = a.alignment === "llap" ? "-1" : "-0.5";
      t.setAttribute("lspace", r + "width");
    }
    return t.setAttribute("width", "0px"), t;
  }
});
q({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !1
  },
  handler(a, e) {
    var {
      funcName: t,
      parser: r
    } = a, n = r.mode;
    r.switchMode("math");
    var i = t === "\\(" ? "\\)" : "$", s = r.parseExpression(!1, i);
    return r.expect(i), r.switchMode(n), {
      type: "styling",
      mode: r.mode,
      style: "text",
      body: s
    };
  }
});
q({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    allowedInMath: !1
  },
  handler(a, e) {
    throw new I("Mismatched " + a.funcName);
  }
});
var ka = (a, e) => {
  switch (e.style.size) {
    case _.DISPLAY.size:
      return a.display;
    case _.TEXT.size:
      return a.text;
    case _.SCRIPT.size:
      return a.script;
    case _.SCRIPTSCRIPT.size:
      return a.scriptscript;
    default:
      return a.text;
  }
};
q({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a;
    return {
      type: "mathchoice",
      mode: t.mode,
      display: ue(e[0]),
      text: ue(e[1]),
      script: ue(e[2]),
      scriptscript: ue(e[3])
    };
  },
  htmlBuilder: (a, e) => {
    var t = ka(a, e), r = he(t, e, !1);
    return D.makeFragment(r);
  },
  mathmlBuilder: (a, e) => {
    var t = ka(a, e);
    return l0(t, e);
  }
});
var qn = (a, e, t, r, n, i, s) => {
  a = D.makeSpan([], [a]);
  var u = t && H.isCharacterBox(t), c, m;
  if (e) {
    var p = Y(e, r.havingStyle(n.sup()), r);
    m = {
      elem: p,
      kern: Math.max(r.fontMetrics().bigOpSpacing1, r.fontMetrics().bigOpSpacing3 - p.depth)
    };
  }
  if (t) {
    var g = Y(t, r.havingStyle(n.sub()), r);
    c = {
      elem: g,
      kern: Math.max(r.fontMetrics().bigOpSpacing2, r.fontMetrics().bigOpSpacing4 - g.height)
    };
  }
  var x;
  if (m && c) {
    var b = r.fontMetrics().bigOpSpacing5 + c.elem.height + c.elem.depth + c.kern + a.depth + s;
    x = D.makeVList({
      positionType: "bottom",
      positionData: b,
      children: [{
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: c.elem,
        marginLeft: L(-i)
      }, {
        type: "kern",
        size: c.kern
      }, {
        type: "elem",
        elem: a
      }, {
        type: "kern",
        size: m.kern
      }, {
        type: "elem",
        elem: m.elem,
        marginLeft: L(i)
      }, {
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }]
    }, r);
  } else if (c) {
    var T = a.height - s;
    x = D.makeVList({
      positionType: "top",
      positionData: T,
      children: [{
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: c.elem,
        marginLeft: L(-i)
      }, {
        type: "kern",
        size: c.kern
      }, {
        type: "elem",
        elem: a
      }]
    }, r);
  } else if (m) {
    var S = a.depth + s;
    x = D.makeVList({
      positionType: "bottom",
      positionData: S,
      children: [{
        type: "elem",
        elem: a
      }, {
        type: "kern",
        size: m.kern
      }, {
        type: "elem",
        elem: m.elem,
        marginLeft: L(i)
      }, {
        type: "kern",
        size: r.fontMetrics().bigOpSpacing5
      }]
    }, r);
  } else
    return a;
  var C = [x];
  if (c && i !== 0 && !u) {
    var M = D.makeSpan(["mspace"], [], r);
    M.style.marginRight = L(i), C.unshift(M);
  }
  return D.makeSpan(["mop", "op-limits"], C, r);
}, Pn = ["\\smallint"], F0 = (a, e) => {
  var t, r, n = !1, i;
  a.type === "supsub" ? (t = a.sup, r = a.sub, i = V(a.base, "op"), n = !0) : i = V(a, "op");
  var s = e.style, u = !1;
  s.size === _.DISPLAY.size && i.symbol && !H.contains(Pn, i.name) && (u = !0);
  var c;
  if (i.symbol) {
    var m = u ? "Size2-Regular" : "Size1-Regular", p = "";
    if ((i.name === "\\oiint" || i.name === "\\oiiint") && (p = i.name.slice(1), i.name = p === "oiint" ? "\\iint" : "\\iiint"), c = D.makeSymbol(i.name, m, "math", e, ["mop", "op-symbol", u ? "large-op" : "small-op"]), p.length > 0) {
      var g = c.italic, x = D.staticSvg(p + "Size" + (u ? "2" : "1"), e);
      c = D.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: c,
          shift: 0
        }, {
          type: "elem",
          elem: x,
          shift: u ? 0.08 : 0
        }]
      }, e), i.name = "\\" + p, c.classes.unshift("mop"), c.italic = g;
    }
  } else if (i.body) {
    var b = he(i.body, e, !0);
    b.length === 1 && b[0] instanceof Oe ? (c = b[0], c.classes[0] = "mop") : c = D.makeSpan(["mop"], b, e);
  } else {
    for (var T = [], S = 1; S < i.name.length; S++)
      T.push(D.mathsym(i.name[S], i.mode, e));
    c = D.makeSpan(["mop"], T, e);
  }
  var C = 0, M = 0;
  return (c instanceof Oe || i.name === "\\oiint" || i.name === "\\oiiint") && !i.suppressBaseShift && (C = (c.height - c.depth) / 2 - e.fontMetrics().axisHeight, M = c.italic), n ? qn(c, t, r, e, s, M, C) : (C && (c.style.position = "relative", c.style.top = L(C)), c);
}, P0 = (a, e) => {
  var t;
  if (a.symbol)
    t = new De("mo", [Be(a.name, a.mode)]), H.contains(Pn, a.name) && t.setAttribute("largeop", "false");
  else if (a.body)
    t = new De("mo", we(a.body, e));
  else {
    t = new De("mi", [new $e(a.name.slice(1))]);
    var r = new De("mo", [Be("⁡", "text")]);
    a.parentIsSupSub ? t = new De("mrow", [t, r]) : t = fn([t, r]);
  }
  return t;
}, a1 = {
  "∏": "\\prod",
  "∐": "\\coprod",
  "∑": "\\sum",
  "⋀": "\\bigwedge",
  "⋁": "\\bigvee",
  "⋂": "\\bigcap",
  "⋃": "\\bigcup",
  "⨀": "\\bigodot",
  "⨁": "\\bigoplus",
  "⨂": "\\bigotimes",
  "⨄": "\\biguplus",
  "⨆": "\\bigsqcup"
};
q({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "∏", "∐", "∑", "⋀", "⋁", "⋂", "⋃", "⨀", "⨁", "⨂", "⨄", "⨆"],
  props: {
    numArgs: 0
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = r;
    return n.length === 1 && (n = a1[n]), {
      type: "op",
      mode: t.mode,
      limits: !0,
      parentIsSupSub: !1,
      symbol: !0,
      name: n
    };
  },
  htmlBuilder: F0,
  mathmlBuilder: P0
});
q({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = e[0];
    return {
      type: "op",
      mode: t.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !1,
      body: ue(r)
    };
  },
  htmlBuilder: F0,
  mathmlBuilder: P0
});
var n1 = {
  "∫": "\\int",
  "∬": "\\iint",
  "∭": "\\iiint",
  "∮": "\\oint",
  "∯": "\\oiint",
  "∰": "\\oiiint"
};
q({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a;
    return {
      type: "op",
      mode: e.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !1,
      name: t
    };
  },
  htmlBuilder: F0,
  mathmlBuilder: P0
});
q({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a;
    return {
      type: "op",
      mode: e.mode,
      limits: !0,
      parentIsSupSub: !1,
      symbol: !1,
      name: t
    };
  },
  htmlBuilder: F0,
  mathmlBuilder: P0
});
q({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "∫", "∬", "∭", "∮", "∯", "∰"],
  props: {
    numArgs: 0
  },
  handler(a) {
    var {
      parser: e,
      funcName: t
    } = a, r = t;
    return r.length === 1 && (r = n1[r]), {
      type: "op",
      mode: e.mode,
      limits: !1,
      parentIsSupSub: !1,
      symbol: !0,
      name: r
    };
  },
  htmlBuilder: F0,
  mathmlBuilder: P0
});
var Hn = (a, e) => {
  var t, r, n = !1, i;
  a.type === "supsub" ? (t = a.sup, r = a.sub, i = V(a.base, "operatorname"), n = !0) : i = V(a, "operatorname");
  var s;
  if (i.body.length > 0) {
    for (var u = i.body.map((g) => {
      var x = g.text;
      return typeof x == "string" ? {
        type: "textord",
        mode: g.mode,
        text: x
      } : g;
    }), c = he(u, e.withFont("mathrm"), !0), m = 0; m < c.length; m++) {
      var p = c[m];
      p instanceof Oe && (p.text = p.text.replace(/\u2212/, "-").replace(/\u2217/, "*"));
    }
    s = D.makeSpan(["mop"], c, e);
  } else
    s = D.makeSpan(["mop"], [], e);
  return n ? qn(s, t, r, e, e.style, 0, 0) : s;
}, i1 = (a, e) => {
  for (var t = we(a.body, e.withFont("mathrm")), r = !0, n = 0; n < t.length; n++) {
    var i = t[n];
    if (!(i instanceof R.SpaceNode)) if (i instanceof R.MathNode)
      switch (i.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        case "mo": {
          var s = i.children[0];
          i.children.length === 1 && s instanceof R.TextNode ? s.text = s.text.replace(/\u2212/, "-").replace(/\u2217/, "*") : r = !1;
          break;
        }
        default:
          r = !1;
      }
    else
      r = !1;
  }
  if (r) {
    var u = t.map((p) => p.toText()).join("");
    t = [new R.TextNode(u)];
  }
  var c = new R.MathNode("mi", t);
  c.setAttribute("mathvariant", "normal");
  var m = new R.MathNode("mo", [Be("⁡", "text")]);
  return a.parentIsSupSub ? new R.MathNode("mrow", [c, m]) : R.newDocumentFragment([c, m]);
};
q({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: (a, e) => {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    return {
      type: "operatorname",
      mode: t.mode,
      body: ue(n),
      alwaysHandleSupSub: r === "\\operatornamewithlimits",
      limits: !1,
      parentIsSupSub: !1
    };
  },
  htmlBuilder: Hn,
  mathmlBuilder: i1
});
d("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
v0({
  type: "ordgroup",
  htmlBuilder(a, e) {
    return a.semisimple ? D.makeFragment(he(a.body, e, !1)) : D.makeSpan(["mord"], he(a.body, e, !0), e);
  },
  mathmlBuilder(a, e) {
    return l0(a.body, e, !0);
  }
});
q({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler(a, e) {
    var {
      parser: t
    } = a, r = e[0];
    return {
      type: "overline",
      mode: t.mode,
      body: r
    };
  },
  htmlBuilder(a, e) {
    var t = Y(a.body, e.havingCrampedStyle()), r = D.makeLineSpan("overline-line", e), n = e.fontMetrics().defaultRuleThickness, i = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t
      }, {
        type: "kern",
        size: 3 * n
      }, {
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: n
      }]
    }, e);
    return D.makeSpan(["mord", "overline"], [i], e);
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mo", [new R.TextNode("‾")]);
    t.setAttribute("stretchy", "true");
    var r = new R.MathNode("mover", [Q(a.body, e), t]);
    return r.setAttribute("accent", "true"), r;
  }
});
q({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = e[0];
    return {
      type: "phantom",
      mode: t.mode,
      body: ue(r)
    };
  },
  htmlBuilder: (a, e) => {
    var t = he(a.body, e.withPhantom(), !1);
    return D.makeFragment(t);
  },
  mathmlBuilder: (a, e) => {
    var t = we(a.body, e);
    return new R.MathNode("mphantom", t);
  }
});
q({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = e[0];
    return {
      type: "hphantom",
      mode: t.mode,
      body: r
    };
  },
  htmlBuilder: (a, e) => {
    var t = D.makeSpan([], [Y(a.body, e.withPhantom())]);
    if (t.height = 0, t.depth = 0, t.children)
      for (var r = 0; r < t.children.length; r++)
        t.children[r].height = 0, t.children[r].depth = 0;
    return t = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t
      }]
    }, e), D.makeSpan(["mord"], [t], e);
  },
  mathmlBuilder: (a, e) => {
    var t = we(ue(a.body), e), r = new R.MathNode("mphantom", t), n = new R.MathNode("mpadded", [r]);
    return n.setAttribute("height", "0px"), n.setAttribute("depth", "0px"), n;
  }
});
q({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      parser: t
    } = a, r = e[0];
    return {
      type: "vphantom",
      mode: t.mode,
      body: r
    };
  },
  htmlBuilder: (a, e) => {
    var t = D.makeSpan(["inner"], [Y(a.body, e.withPhantom())]), r = D.makeSpan(["fix"], []);
    return D.makeSpan(["mord", "rlap"], [t, r], e);
  },
  mathmlBuilder: (a, e) => {
    var t = we(ue(a.body), e), r = new R.MathNode("mphantom", t), n = new R.MathNode("mpadded", [r]);
    return n.setAttribute("width", "0px"), n;
  }
});
q({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: !0
  },
  handler(a, e) {
    var {
      parser: t
    } = a, r = V(e[0], "size").value, n = e[1];
    return {
      type: "raisebox",
      mode: t.mode,
      dy: r,
      body: n
    };
  },
  htmlBuilder(a, e) {
    var t = Y(a.body, e), r = se(a.dy, e);
    return D.makeVList({
      positionType: "shift",
      positionData: -r,
      children: [{
        type: "elem",
        elem: t
      }]
    }, e);
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mpadded", [Q(a.body, e)]), r = a.dy.number + a.dy.unit;
    return t.setAttribute("voffset", r), t;
  }
});
q({
  type: "internal",
  names: ["\\relax"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(a) {
    var {
      parser: e
    } = a;
    return {
      type: "internal",
      mode: e.mode
    };
  }
});
q({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    allowedInText: !0,
    allowedInMath: !0,
    argTypes: ["size", "size", "size"]
  },
  handler(a, e, t) {
    var {
      parser: r
    } = a, n = t[0], i = V(e[0], "size"), s = V(e[1], "size");
    return {
      type: "rule",
      mode: r.mode,
      shift: n && V(n, "size").value,
      width: i.value,
      height: s.value
    };
  },
  htmlBuilder(a, e) {
    var t = D.makeSpan(["mord", "rule"], [], e), r = se(a.width, e), n = se(a.height, e), i = a.shift ? se(a.shift, e) : 0;
    return t.style.borderRightWidth = L(r), t.style.borderTopWidth = L(n), t.style.bottom = L(i), t.width = r, t.height = n + i, t.depth = -i, t.maxFontSize = n * 1.125 * e.sizeMultiplier, t;
  },
  mathmlBuilder(a, e) {
    var t = se(a.width, e), r = se(a.height, e), n = a.shift ? se(a.shift, e) : 0, i = e.color && e.getColor() || "black", s = new R.MathNode("mspace");
    s.setAttribute("mathbackground", i), s.setAttribute("width", L(t)), s.setAttribute("height", L(r));
    var u = new R.MathNode("mpadded", [s]);
    return n >= 0 ? u.setAttribute("height", L(n)) : (u.setAttribute("height", L(n)), u.setAttribute("depth", L(-n))), u.setAttribute("voffset", L(n)), u;
  }
});
function $n(a, e, t) {
  for (var r = he(a, e, !1), n = e.sizeMultiplier / t.sizeMultiplier, i = 0; i < r.length; i++) {
    var s = r[i].classes.indexOf("sizing");
    s < 0 ? Array.prototype.push.apply(r[i].classes, e.sizingClasses(t)) : r[i].classes[s + 1] === "reset-size" + e.size && (r[i].classes[s + 1] = "reset-size" + t.size), r[i].height *= n, r[i].depth *= n;
  }
  return D.makeFragment(r);
}
var Da = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"], s1 = (a, e) => {
  var t = e.havingSize(a.size);
  return $n(a.body, t, e);
};
q({
  type: "sizing",
  names: Da,
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler: (a, e) => {
    var {
      breakOnTokenText: t,
      funcName: r,
      parser: n
    } = a, i = n.parseExpression(!1, t);
    return {
      type: "sizing",
      mode: n.mode,
      // Figure out what size to use based on the list of functions above
      size: Da.indexOf(r) + 1,
      body: i
    };
  },
  htmlBuilder: s1,
  mathmlBuilder: (a, e) => {
    var t = e.havingSize(a.size), r = we(a.body, t), n = new R.MathNode("mstyle", r);
    return n.setAttribute("mathsize", L(t.sizeMultiplier)), n;
  }
});
q({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: !0
  },
  handler: (a, e, t) => {
    var {
      parser: r
    } = a, n = !1, i = !1, s = t[0] && V(t[0], "ordgroup");
    if (s)
      for (var u = "", c = 0; c < s.body.length; ++c) {
        var m = s.body[c];
        if (u = m.text, u === "t")
          n = !0;
        else if (u === "b")
          i = !0;
        else {
          n = !1, i = !1;
          break;
        }
      }
    else
      n = !0, i = !0;
    var p = e[0];
    return {
      type: "smash",
      mode: r.mode,
      body: p,
      smashHeight: n,
      smashDepth: i
    };
  },
  htmlBuilder: (a, e) => {
    var t = D.makeSpan([], [Y(a.body, e)]);
    if (!a.smashHeight && !a.smashDepth)
      return t;
    if (a.smashHeight && (t.height = 0, t.children))
      for (var r = 0; r < t.children.length; r++)
        t.children[r].height = 0;
    if (a.smashDepth && (t.depth = 0, t.children))
      for (var n = 0; n < t.children.length; n++)
        t.children[n].depth = 0;
    var i = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t
      }]
    }, e);
    return D.makeSpan(["mord"], [i], e);
  },
  mathmlBuilder: (a, e) => {
    var t = new R.MathNode("mpadded", [Q(a.body, e)]);
    return a.smashHeight && t.setAttribute("height", "0px"), a.smashDepth && t.setAttribute("depth", "0px"), t;
  }
});
q({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(a, e, t) {
    var {
      parser: r
    } = a, n = t[0], i = e[0];
    return {
      type: "sqrt",
      mode: r.mode,
      body: i,
      index: n
    };
  },
  htmlBuilder(a, e) {
    var t = Y(a.body, e.havingCrampedStyle());
    t.height === 0 && (t.height = e.fontMetrics().xHeight), t = D.wrapFragment(t, e);
    var r = e.fontMetrics(), n = r.defaultRuleThickness, i = n;
    e.style.id < _.TEXT.id && (i = e.fontMetrics().xHeight);
    var s = n + i / 4, u = t.height + t.depth + s + n, {
      span: c,
      ruleWidth: m,
      advanceWidth: p
    } = Ye.sqrtImage(u, e), g = c.height - m;
    g > t.height + t.depth + s && (s = (s + g - t.height - t.depth) / 2);
    var x = c.height - t.height - s - m;
    t.style.paddingLeft = L(p);
    var b = D.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: t,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(t.height + x)
      }, {
        type: "elem",
        elem: c
      }, {
        type: "kern",
        size: m
      }]
    }, e);
    if (a.index) {
      var T = e.havingStyle(_.SCRIPTSCRIPT), S = Y(a.index, T, e), C = 0.6 * (b.height - b.depth), M = D.makeVList({
        positionType: "shift",
        positionData: -C,
        children: [{
          type: "elem",
          elem: S
        }]
      }, e), w = D.makeSpan(["root"], [M]);
      return D.makeSpan(["mord", "sqrt"], [w, b], e);
    } else
      return D.makeSpan(["mord", "sqrt"], [b], e);
  },
  mathmlBuilder(a, e) {
    var {
      body: t,
      index: r
    } = a;
    return r ? new R.MathNode("mroot", [Q(t, e), Q(r, e)]) : new R.MathNode("msqrt", [Q(t, e)]);
  }
});
var Aa = {
  display: _.DISPLAY,
  text: _.TEXT,
  script: _.SCRIPT,
  scriptscript: _.SCRIPTSCRIPT
};
q({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: !0,
    primitive: !0
  },
  handler(a, e) {
    var {
      breakOnTokenText: t,
      funcName: r,
      parser: n
    } = a, i = n.parseExpression(!0, t), s = r.slice(1, r.length - 5);
    return {
      type: "styling",
      mode: n.mode,
      // Figure out what style to use by pulling out the style from
      // the function name
      style: s,
      body: i
    };
  },
  htmlBuilder(a, e) {
    var t = Aa[a.style], r = e.havingStyle(t).withFont("");
    return $n(a.body, r, e);
  },
  mathmlBuilder(a, e) {
    var t = Aa[a.style], r = e.havingStyle(t), n = we(a.body, r), i = new R.MathNode("mstyle", n), s = {
      display: ["0", "true"],
      text: ["0", "false"],
      script: ["1", "false"],
      scriptscript: ["2", "false"]
    }, u = s[a.style];
    return i.setAttribute("scriptlevel", u[0]), i.setAttribute("displaystyle", u[1]), i;
  }
});
var l1 = function(e, t) {
  var r = e.base;
  if (r)
    if (r.type === "op") {
      var n = r.limits && (t.style.size === _.DISPLAY.size || r.alwaysHandleSupSub);
      return n ? F0 : null;
    } else if (r.type === "operatorname") {
      var i = r.alwaysHandleSupSub && (t.style.size === _.DISPLAY.size || r.limits);
      return i ? Hn : null;
    } else {
      if (r.type === "accent")
        return H.isCharacterBox(r.base) ? br : null;
      if (r.type === "horizBrace") {
        var s = !e.sub;
        return s === r.isOver ? On : null;
      } else
        return null;
    }
  else return null;
};
v0({
  type: "supsub",
  htmlBuilder(a, e) {
    var t = l1(a, e);
    if (t)
      return t(a, e);
    var {
      base: r,
      sup: n,
      sub: i
    } = a, s = Y(r, e), u, c, m = e.fontMetrics(), p = 0, g = 0, x = r && H.isCharacterBox(r);
    if (n) {
      var b = e.havingStyle(e.style.sup());
      u = Y(n, b, e), x || (p = s.height - b.fontMetrics().supDrop * b.sizeMultiplier / e.sizeMultiplier);
    }
    if (i) {
      var T = e.havingStyle(e.style.sub());
      c = Y(i, T, e), x || (g = s.depth + T.fontMetrics().subDrop * T.sizeMultiplier / e.sizeMultiplier);
    }
    var S;
    e.style === _.DISPLAY ? S = m.sup1 : e.style.cramped ? S = m.sup3 : S = m.sup2;
    var C = e.sizeMultiplier, M = L(0.5 / m.ptPerEm / C), w = null;
    if (c) {
      var k = a.base && a.base.type === "op" && a.base.name && (a.base.name === "\\oiint" || a.base.name === "\\oiiint");
      (s instanceof Oe || k) && (w = L(-s.italic));
    }
    var A;
    if (u && c) {
      p = Math.max(p, S, u.depth + 0.25 * m.xHeight), g = Math.max(g, m.sub2);
      var E = m.defaultRuleThickness, F = 4 * E;
      if (p - u.depth - (c.height - g) < F) {
        g = F - (p - u.depth) + c.height;
        var B = 0.8 * m.xHeight - (p - u.depth);
        B > 0 && (p += B, g -= B);
      }
      var O = [{
        type: "elem",
        elem: c,
        shift: g,
        marginRight: M,
        marginLeft: w
      }, {
        type: "elem",
        elem: u,
        shift: -p,
        marginRight: M
      }];
      A = D.makeVList({
        positionType: "individualShift",
        children: O
      }, e);
    } else if (c) {
      g = Math.max(g, m.sub1, c.height - 0.8 * m.xHeight);
      var N = [{
        type: "elem",
        elem: c,
        marginLeft: w,
        marginRight: M
      }];
      A = D.makeVList({
        positionType: "shift",
        positionData: g,
        children: N
      }, e);
    } else if (u)
      p = Math.max(p, S, u.depth + 0.25 * m.xHeight), A = D.makeVList({
        positionType: "shift",
        positionData: -p,
        children: [{
          type: "elem",
          elem: u,
          marginRight: M
        }]
      }, e);
    else
      throw new Error("supsub must have either sup or sub.");
    var U = ir(s, "right") || "mord";
    return D.makeSpan([U], [s, D.makeSpan(["msupsub"], [A])], e);
  },
  mathmlBuilder(a, e) {
    var t = !1, r, n;
    a.base && a.base.type === "horizBrace" && (n = !!a.sup, n === a.base.isOver && (t = !0, r = a.base.isOver)), a.base && (a.base.type === "op" || a.base.type === "operatorname") && (a.base.parentIsSupSub = !0);
    var i = [Q(a.base, e)];
    a.sub && i.push(Q(a.sub, e)), a.sup && i.push(Q(a.sup, e));
    var s;
    if (t)
      s = r ? "mover" : "munder";
    else if (a.sub)
      if (a.sup) {
        var m = a.base;
        m && m.type === "op" && m.limits && e.style === _.DISPLAY || m && m.type === "operatorname" && m.alwaysHandleSupSub && (e.style === _.DISPLAY || m.limits) ? s = "munderover" : s = "msubsup";
      } else {
        var c = a.base;
        c && c.type === "op" && c.limits && (e.style === _.DISPLAY || c.alwaysHandleSupSub) || c && c.type === "operatorname" && c.alwaysHandleSupSub && (c.limits || e.style === _.DISPLAY) ? s = "munder" : s = "msub";
      }
    else {
      var u = a.base;
      u && u.type === "op" && u.limits && (e.style === _.DISPLAY || u.alwaysHandleSupSub) || u && u.type === "operatorname" && u.alwaysHandleSupSub && (u.limits || e.style === _.DISPLAY) ? s = "mover" : s = "msup";
    }
    return new R.MathNode(s, i);
  }
});
v0({
  type: "atom",
  htmlBuilder(a, e) {
    return D.mathsym(a.text, a.mode, e, ["m" + a.family]);
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mo", [Be(a.text, a.mode)]);
    if (a.family === "bin") {
      var r = gr(a, e);
      r === "bold-italic" && t.setAttribute("mathvariant", r);
    } else a.family === "punct" ? t.setAttribute("separator", "true") : (a.family === "open" || a.family === "close") && t.setAttribute("stretchy", "false");
    return t;
  }
});
var _n = {
  mi: "italic",
  mn: "normal",
  mtext: "normal"
};
v0({
  type: "mathord",
  htmlBuilder(a, e) {
    return D.makeOrd(a, e, "mathord");
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mi", [Be(a.text, a.mode, e)]), r = gr(a, e) || "italic";
    return r !== _n[t.type] && t.setAttribute("mathvariant", r), t;
  }
});
v0({
  type: "textord",
  htmlBuilder(a, e) {
    return D.makeOrd(a, e, "textord");
  },
  mathmlBuilder(a, e) {
    var t = Be(a.text, a.mode, e), r = gr(a, e) || "normal", n;
    return a.mode === "text" ? n = new R.MathNode("mtext", [t]) : /[0-9]/.test(a.text) ? n = new R.MathNode("mn", [t]) : a.text === "\\prime" ? n = new R.MathNode("mo", [t]) : n = new R.MathNode("mi", [t]), r !== _n[n.type] && n.setAttribute("mathvariant", r), n;
  }
});
var Vt = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
}, jt = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
};
v0({
  type: "spacing",
  htmlBuilder(a, e) {
    if (jt.hasOwnProperty(a.text)) {
      var t = jt[a.text].className || "";
      if (a.mode === "text") {
        var r = D.makeOrd(a, e, "textord");
        return r.classes.push(t), r;
      } else
        return D.makeSpan(["mspace", t], [D.mathsym(a.text, a.mode, e)], e);
    } else {
      if (Vt.hasOwnProperty(a.text))
        return D.makeSpan(["mspace", Vt[a.text]], [], e);
      throw new I('Unknown type of space "' + a.text + '"');
    }
  },
  mathmlBuilder(a, e) {
    var t;
    if (jt.hasOwnProperty(a.text))
      t = new R.MathNode("mtext", [new R.TextNode(" ")]);
    else {
      if (Vt.hasOwnProperty(a.text))
        return new R.MathNode("mspace");
      throw new I('Unknown type of space "' + a.text + '"');
    }
    return t;
  }
});
var Sa = () => {
  var a = new R.MathNode("mtd", []);
  return a.setAttribute("width", "50%"), a;
};
v0({
  type: "tag",
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mtable", [new R.MathNode("mtr", [Sa(), new R.MathNode("mtd", [l0(a.body, e)]), Sa(), new R.MathNode("mtd", [l0(a.tag, e)])])]);
    return t.setAttribute("width", "100%"), t;
  }
});
var Fa = {
  "\\text": void 0,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
}, Ea = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
}, u1 = {
  "\\textit": "textit",
  "\\textup": "textup"
}, Ca = (a, e) => {
  var t = a.font;
  if (t) {
    if (Fa[t])
      return e.withTextFontFamily(Fa[t]);
    if (Ea[t])
      return e.withTextFontWeight(Ea[t]);
    if (t === "\\emph")
      return e.fontShape === "textit" ? e.withTextFontShape("textup") : e.withTextFontShape("textit");
  } else return e;
  return e.withTextFontShape(u1[t]);
};
q({
  type: "text",
  names: [
    // Font families
    "\\text",
    "\\textrm",
    "\\textsf",
    "\\texttt",
    "\\textnormal",
    // Font weights
    "\\textbf",
    "\\textmd",
    // Font Shapes
    "\\textit",
    "\\textup",
    "\\emph"
  ],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: !0,
    allowedInText: !0
  },
  handler(a, e) {
    var {
      parser: t,
      funcName: r
    } = a, n = e[0];
    return {
      type: "text",
      mode: t.mode,
      body: ue(n),
      font: r
    };
  },
  htmlBuilder(a, e) {
    var t = Ca(a, e), r = he(a.body, t, !0);
    return D.makeSpan(["mord", "text"], r, t);
  },
  mathmlBuilder(a, e) {
    var t = Ca(a, e);
    return l0(a.body, t);
  }
});
q({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: !0
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "underline",
      mode: t.mode,
      body: e[0]
    };
  },
  htmlBuilder(a, e) {
    var t = Y(a.body, e), r = D.makeLineSpan("underline-line", e), n = e.fontMetrics().defaultRuleThickness, i = D.makeVList({
      positionType: "top",
      positionData: t.height,
      children: [{
        type: "kern",
        size: n
      }, {
        type: "elem",
        elem: r
      }, {
        type: "kern",
        size: 3 * n
      }, {
        type: "elem",
        elem: t
      }]
    }, e);
    return D.makeSpan(["mord", "underline"], [i], e);
  },
  mathmlBuilder(a, e) {
    var t = new R.MathNode("mo", [new R.TextNode("‾")]);
    t.setAttribute("stretchy", "true");
    var r = new R.MathNode("munder", [Q(a.body, e), t]);
    return r.setAttribute("accentunder", "true"), r;
  }
});
q({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    // In LaTeX, \vcenter can act only on a box.
    allowedInText: !1
  },
  handler(a, e) {
    var {
      parser: t
    } = a;
    return {
      type: "vcenter",
      mode: t.mode,
      body: e[0]
    };
  },
  htmlBuilder(a, e) {
    var t = Y(a.body, e), r = e.fontMetrics().axisHeight, n = 0.5 * (t.height - r - (t.depth + r));
    return D.makeVList({
      positionType: "shift",
      positionData: n,
      children: [{
        type: "elem",
        elem: t
      }]
    }, e);
  },
  mathmlBuilder(a, e) {
    return new R.MathNode("mpadded", [Q(a.body, e)], ["vcenter"]);
  }
});
q({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: !0
  },
  handler(a, e, t) {
    throw new I("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder(a, e) {
    for (var t = Ta(a), r = [], n = e.havingStyle(e.style.text()), i = 0; i < t.length; i++) {
      var s = t[i];
      s === "~" && (s = "\\textasciitilde"), r.push(D.makeSymbol(s, "Typewriter-Regular", a.mode, n, ["mord", "texttt"]));
    }
    return D.makeSpan(["mord", "text"].concat(n.sizingClasses(e)), D.tryCombineChars(r), n);
  },
  mathmlBuilder(a, e) {
    var t = new R.TextNode(Ta(a)), r = new R.MathNode("mtext", [t]);
    return r.setAttribute("mathvariant", "monospace"), r;
  }
});
var Ta = (a) => a.body.replace(/ /g, a.star ? "␣" : " "), n0 = dn, Gn = `[ \r
	]`, o1 = "\\\\[a-zA-Z@]+", c1 = "\\\\[^\uD800-\uDFFF]", h1 = "(" + o1 + ")" + Gn + "*", m1 = `\\\\(
|[ \r	]+
?)[ \r	]*`, ur = "[̀-ͯ]", d1 = new RegExp(ur + "+$"), p1 = "(" + Gn + "+)|" + // whitespace
(m1 + "|") + // \whitespace
"([!-\\[\\]-‧‪-퟿豈-￿]" + // single codepoint
(ur + "*") + // ...plus accents
"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
(ur + "*") + // ...plus accents
"|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5" + // \verb unstarred
("|" + h1) + // \macroName + spaces
("|" + c1 + ")");
class Ma {
  // Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  constructor(e, t) {
    this.input = void 0, this.settings = void 0, this.tokenRegex = void 0, this.catcodes = void 0, this.input = e, this.settings = t, this.tokenRegex = new RegExp(p1, "g"), this.catcodes = {
      "%": 14,
      // comment character
      "~": 13
      // active character
    };
  }
  setCatcode(e, t) {
    this.catcodes[e] = t;
  }
  /**
   * This function lexes a single token.
   */
  lex() {
    var e = this.input, t = this.tokenRegex.lastIndex;
    if (t === e.length)
      return new ze("EOF", new ke(this, t, t));
    var r = this.tokenRegex.exec(e);
    if (r === null || r.index !== t)
      throw new I("Unexpected character: '" + e[t] + "'", new ze(e[t], new ke(this, t, t + 1)));
    var n = r[6] || r[3] || (r[2] ? "\\ " : " ");
    if (this.catcodes[n] === 14) {
      var i = e.indexOf(`
`, this.tokenRegex.lastIndex);
      return i === -1 ? (this.tokenRegex.lastIndex = e.length, this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")) : this.tokenRegex.lastIndex = i + 1, this.lex();
    }
    return new ze(n, new ke(this, t, this.tokenRegex.lastIndex));
  }
}
class f1 {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  constructor(e, t) {
    e === void 0 && (e = {}), t === void 0 && (t = {}), this.current = void 0, this.builtins = void 0, this.undefStack = void 0, this.current = t, this.builtins = e, this.undefStack = [];
  }
  /**
   * Start a new nested group, affecting future local `set`s.
   */
  beginGroup() {
    this.undefStack.push({});
  }
  /**
   * End current nested group, restoring values before the group began.
   */
  endGroup() {
    if (this.undefStack.length === 0)
      throw new I("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");
    var e = this.undefStack.pop();
    for (var t in e)
      e.hasOwnProperty(t) && (e[t] == null ? delete this.current[t] : this.current[t] = e[t]);
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    for (; this.undefStack.length > 0; )
      this.endGroup();
  }
  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  has(e) {
    return this.current.hasOwnProperty(e) || this.builtins.hasOwnProperty(e);
  }
  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  get(e) {
    return this.current.hasOwnProperty(e) ? this.current[e] : this.builtins[e];
  }
  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   * A value of undefined means to delete existing definitions.
   */
  set(e, t, r) {
    if (r === void 0 && (r = !1), r) {
      for (var n = 0; n < this.undefStack.length; n++)
        delete this.undefStack[n][e];
      this.undefStack.length > 0 && (this.undefStack[this.undefStack.length - 1][e] = t);
    } else {
      var i = this.undefStack[this.undefStack.length - 1];
      i && !i.hasOwnProperty(e) && (i[e] = this.current[e]);
    }
    t == null ? delete this.current[e] : this.current[e] = t;
  }
}
var g1 = Bn;
d("\\noexpand", function(a) {
  var e = a.popToken();
  return a.isExpandable(e.text) && (e.noexpand = !0, e.treatAsRelax = !0), {
    tokens: [e],
    numArgs: 0
  };
});
d("\\expandafter", function(a) {
  var e = a.popToken();
  return a.expandOnce(!0), {
    tokens: [e],
    numArgs: 0
  };
});
d("\\@firstoftwo", function(a) {
  var e = a.consumeArgs(2);
  return {
    tokens: e[0],
    numArgs: 0
  };
});
d("\\@secondoftwo", function(a) {
  var e = a.consumeArgs(2);
  return {
    tokens: e[1],
    numArgs: 0
  };
});
d("\\@ifnextchar", function(a) {
  var e = a.consumeArgs(3);
  a.consumeSpaces();
  var t = a.future();
  return e[0].length === 1 && e[0][0].text === t.text ? {
    tokens: e[1],
    numArgs: 0
  } : {
    tokens: e[2],
    numArgs: 0
  };
});
d("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");
d("\\TextOrMath", function(a) {
  var e = a.consumeArgs(2);
  return a.mode === "text" ? {
    tokens: e[0],
    numArgs: 0
  } : {
    tokens: e[1],
    numArgs: 0
  };
});
var za = {
  0: 0,
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  a: 10,
  A: 10,
  b: 11,
  B: 11,
  c: 12,
  C: 12,
  d: 13,
  D: 13,
  e: 14,
  E: 14,
  f: 15,
  F: 15
};
d("\\char", function(a) {
  var e = a.popToken(), t, r = "";
  if (e.text === "'")
    t = 8, e = a.popToken();
  else if (e.text === '"')
    t = 16, e = a.popToken();
  else if (e.text === "`")
    if (e = a.popToken(), e.text[0] === "\\")
      r = e.text.charCodeAt(1);
    else {
      if (e.text === "EOF")
        throw new I("\\char` missing argument");
      r = e.text.charCodeAt(0);
    }
  else
    t = 10;
  if (t) {
    if (r = za[e.text], r == null || r >= t)
      throw new I("Invalid base-" + t + " digit " + e.text);
    for (var n; (n = za[a.future().text]) != null && n < t; )
      r *= t, r += n, a.popToken();
  }
  return "\\@char{" + r + "}";
});
var Fr = (a, e, t, r) => {
  var n = a.consumeArg().tokens;
  if (n.length !== 1)
    throw new I("\\newcommand's first argument must be a macro name");
  var i = n[0].text, s = a.isDefined(i);
  if (s && !e)
    throw new I("\\newcommand{" + i + "} attempting to redefine " + (i + "; use \\renewcommand"));
  if (!s && !t)
    throw new I("\\renewcommand{" + i + "} when command " + i + " does not yet exist; use \\newcommand");
  var u = 0;
  if (n = a.consumeArg().tokens, n.length === 1 && n[0].text === "[") {
    for (var c = "", m = a.expandNextToken(); m.text !== "]" && m.text !== "EOF"; )
      c += m.text, m = a.expandNextToken();
    if (!c.match(/^\s*[0-9]+\s*$/))
      throw new I("Invalid number of arguments: " + c);
    u = parseInt(c), n = a.consumeArg().tokens;
  }
  return s && r || a.macros.set(i, {
    tokens: n,
    numArgs: u
  }), "";
};
d("\\newcommand", (a) => Fr(a, !1, !0, !1));
d("\\renewcommand", (a) => Fr(a, !0, !1, !1));
d("\\providecommand", (a) => Fr(a, !0, !0, !0));
d("\\message", (a) => {
  var e = a.consumeArgs(1)[0];
  return console.log(e.reverse().map((t) => t.text).join("")), "";
});
d("\\errmessage", (a) => {
  var e = a.consumeArgs(1)[0];
  return console.error(e.reverse().map((t) => t.text).join("")), "";
});
d("\\show", (a) => {
  var e = a.popToken(), t = e.text;
  return console.log(e, a.macros.get(t), n0[t], ee.math[t], ee.text[t]), "";
});
d("\\bgroup", "{");
d("\\egroup", "}");
d("~", "\\nobreakspace");
d("\\lq", "`");
d("\\rq", "'");
d("\\aa", "\\r a");
d("\\AA", "\\r A");
d("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
d("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
d("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}");
d("ℬ", "\\mathscr{B}");
d("ℰ", "\\mathscr{E}");
d("ℱ", "\\mathscr{F}");
d("ℋ", "\\mathscr{H}");
d("ℐ", "\\mathscr{I}");
d("ℒ", "\\mathscr{L}");
d("ℳ", "\\mathscr{M}");
d("ℛ", "\\mathscr{R}");
d("ℭ", "\\mathfrak{C}");
d("ℌ", "\\mathfrak{H}");
d("ℨ", "\\mathfrak{Z}");
d("\\Bbbk", "\\Bbb{k}");
d("·", "\\cdotp");
d("\\llap", "\\mathllap{\\textrm{#1}}");
d("\\rlap", "\\mathrlap{\\textrm{#1}}");
d("\\clap", "\\mathclap{\\textrm{#1}}");
d("\\mathstrut", "\\vphantom{(}");
d("\\underbar", "\\underline{\\text{#1}}");
d("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');
d("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
d("\\ne", "\\neq");
d("≠", "\\neq");
d("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}");
d("∉", "\\notin");
d("≘", "\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}");
d("≙", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}");
d("≚", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}");
d("≛", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}");
d("≝", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}");
d("≞", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}");
d("≟", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}");
d("⟂", "\\perp");
d("‼", "\\mathclose{!\\mkern-0.8mu!}");
d("∌", "\\notni");
d("⌜", "\\ulcorner");
d("⌝", "\\urcorner");
d("⌞", "\\llcorner");
d("⌟", "\\lrcorner");
d("©", "\\copyright");
d("®", "\\textregistered");
d("️", "\\textregistered");
d("\\ulcorner", '\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}');
d("\\urcorner", '\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}');
d("\\llcorner", '\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}');
d("\\lrcorner", '\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}');
d("\\vdots", "{\\varvdots\\rule{0pt}{15pt}}");
d("⋮", "\\vdots");
d("\\varGamma", "\\mathit{\\Gamma}");
d("\\varDelta", "\\mathit{\\Delta}");
d("\\varTheta", "\\mathit{\\Theta}");
d("\\varLambda", "\\mathit{\\Lambda}");
d("\\varXi", "\\mathit{\\Xi}");
d("\\varPi", "\\mathit{\\Pi}");
d("\\varSigma", "\\mathit{\\Sigma}");
d("\\varUpsilon", "\\mathit{\\Upsilon}");
d("\\varPhi", "\\mathit{\\Phi}");
d("\\varPsi", "\\mathit{\\Psi}");
d("\\varOmega", "\\mathit{\\Omega}");
d("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");
d("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax");
d("\\boxed", "\\fbox{$\\displaystyle{#1}$}");
d("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
d("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
d("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");
d("\\dddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ...}}{#1}}");
d("\\ddddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ....}}{#1}}");
var Ba = {
  ",": "\\dotsc",
  "\\not": "\\dotsb",
  // \keybin@ checks for the following:
  "+": "\\dotsb",
  "=": "\\dotsb",
  "<": "\\dotsb",
  ">": "\\dotsb",
  "-": "\\dotsb",
  "*": "\\dotsb",
  ":": "\\dotsb",
  // Symbols whose definition starts with \DOTSB:
  "\\DOTSB": "\\dotsb",
  "\\coprod": "\\dotsb",
  "\\bigvee": "\\dotsb",
  "\\bigwedge": "\\dotsb",
  "\\biguplus": "\\dotsb",
  "\\bigcap": "\\dotsb",
  "\\bigcup": "\\dotsb",
  "\\prod": "\\dotsb",
  "\\sum": "\\dotsb",
  "\\bigotimes": "\\dotsb",
  "\\bigoplus": "\\dotsb",
  "\\bigodot": "\\dotsb",
  "\\bigsqcup": "\\dotsb",
  "\\And": "\\dotsb",
  "\\longrightarrow": "\\dotsb",
  "\\Longrightarrow": "\\dotsb",
  "\\longleftarrow": "\\dotsb",
  "\\Longleftarrow": "\\dotsb",
  "\\longleftrightarrow": "\\dotsb",
  "\\Longleftrightarrow": "\\dotsb",
  "\\mapsto": "\\dotsb",
  "\\longmapsto": "\\dotsb",
  "\\hookrightarrow": "\\dotsb",
  "\\doteq": "\\dotsb",
  // Symbols whose definition starts with \mathbin:
  "\\mathbin": "\\dotsb",
  // Symbols whose definition starts with \mathrel:
  "\\mathrel": "\\dotsb",
  "\\relbar": "\\dotsb",
  "\\Relbar": "\\dotsb",
  "\\xrightarrow": "\\dotsb",
  "\\xleftarrow": "\\dotsb",
  // Symbols whose definition starts with \DOTSI:
  "\\DOTSI": "\\dotsi",
  "\\int": "\\dotsi",
  "\\oint": "\\dotsi",
  "\\iint": "\\dotsi",
  "\\iiint": "\\dotsi",
  "\\iiiint": "\\dotsi",
  "\\idotsint": "\\dotsi",
  // Symbols whose definition starts with \DOTSX:
  "\\DOTSX": "\\dotsx"
};
d("\\dots", function(a) {
  var e = "\\dotso", t = a.expandAfterFuture().text;
  return t in Ba ? e = Ba[t] : (t.slice(0, 4) === "\\not" || t in ee.math && H.contains(["bin", "rel"], ee.math[t].group)) && (e = "\\dotsb"), e;
});
var Er = {
  // \rightdelim@ checks for the following:
  ")": !0,
  "]": !0,
  "\\rbrack": !0,
  "\\}": !0,
  "\\rbrace": !0,
  "\\rangle": !0,
  "\\rceil": !0,
  "\\rfloor": !0,
  "\\rgroup": !0,
  "\\rmoustache": !0,
  "\\right": !0,
  "\\bigr": !0,
  "\\biggr": !0,
  "\\Bigr": !0,
  "\\Biggr": !0,
  // \extra@ also tests for the following:
  $: !0,
  // \extrap@ checks for the following:
  ";": !0,
  ".": !0,
  ",": !0
};
d("\\dotso", function(a) {
  var e = a.future().text;
  return e in Er ? "\\ldots\\," : "\\ldots";
});
d("\\dotsc", function(a) {
  var e = a.future().text;
  return e in Er && e !== "," ? "\\ldots\\," : "\\ldots";
});
d("\\cdots", function(a) {
  var e = a.future().text;
  return e in Er ? "\\@cdots\\," : "\\@cdots";
});
d("\\dotsb", "\\cdots");
d("\\dotsm", "\\cdots");
d("\\dotsi", "\\!\\cdots");
d("\\dotsx", "\\ldots\\,");
d("\\DOTSI", "\\relax");
d("\\DOTSB", "\\relax");
d("\\DOTSX", "\\relax");
d("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
d("\\,", "\\tmspace+{3mu}{.1667em}");
d("\\thinspace", "\\,");
d("\\>", "\\mskip{4mu}");
d("\\:", "\\tmspace+{4mu}{.2222em}");
d("\\medspace", "\\:");
d("\\;", "\\tmspace+{5mu}{.2777em}");
d("\\thickspace", "\\;");
d("\\!", "\\tmspace-{3mu}{.1667em}");
d("\\negthinspace", "\\!");
d("\\negmedspace", "\\tmspace-{4mu}{.2222em}");
d("\\negthickspace", "\\tmspace-{5mu}{.277em}");
d("\\enspace", "\\kern.5em ");
d("\\enskip", "\\hskip.5em\\relax");
d("\\quad", "\\hskip1em\\relax");
d("\\qquad", "\\hskip2em\\relax");
d("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
d("\\tag@paren", "\\tag@literal{({#1})}");
d("\\tag@literal", (a) => {
  if (a.macros.get("\\df@tag"))
    throw new I("Multiple \\tag");
  return "\\gdef\\df@tag{\\text{#1}}";
});
d("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
d("\\pod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
d("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
d("\\mod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1");
d("\\newline", "\\\\\\relax");
d("\\TeX", "\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");
var Un = L(We["Main-Regular"][84][1] - 0.7 * We["Main-Regular"][65][1]);
d("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + Un + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}");
d("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + Un + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}");
d("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
d("\\@hspace", "\\hskip #1\\relax");
d("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");
d("\\ordinarycolon", ":");
d("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
d("\\dblcolon", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}');
d("\\coloneqq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}');
d("\\Coloneqq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}');
d("\\coloneq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}');
d("\\Coloneq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}');
d("\\eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}');
d("\\Eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}');
d("\\eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}');
d("\\Eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}');
d("\\colonapprox", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}');
d("\\Colonapprox", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}');
d("\\colonsim", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}');
d("\\Colonsim", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}');
d("∷", "\\dblcolon");
d("∹", "\\eqcolon");
d("≔", "\\coloneqq");
d("≕", "\\eqqcolon");
d("⩴", "\\Coloneqq");
d("\\ratio", "\\vcentcolon");
d("\\coloncolon", "\\dblcolon");
d("\\colonequals", "\\coloneqq");
d("\\coloncolonequals", "\\Coloneqq");
d("\\equalscolon", "\\eqqcolon");
d("\\equalscoloncolon", "\\Eqqcolon");
d("\\colonminus", "\\coloneq");
d("\\coloncolonminus", "\\Coloneq");
d("\\minuscolon", "\\eqcolon");
d("\\minuscoloncolon", "\\Eqcolon");
d("\\coloncolonapprox", "\\Colonapprox");
d("\\coloncolonsim", "\\Colonsim");
d("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
d("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
d("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
d("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");
d("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}");
d("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
d("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");
d("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
d("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
d("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
d("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
d("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
d("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}");
d("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{≩}");
d("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{≨}");
d("\\ngeqq", "\\html@mathml{\\@ngeqq}{≱}");
d("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{≱}");
d("\\nleqq", "\\html@mathml{\\@nleqq}{≰}");
d("\\nleqslant", "\\html@mathml{\\@nleqslant}{≰}");
d("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
d("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
d("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{⊈}");
d("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{⊉}");
d("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
d("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
d("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
d("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
d("\\imath", "\\html@mathml{\\@imath}{ı}");
d("\\jmath", "\\html@mathml{\\@jmath}{ȷ}");
d("\\llbracket", "\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}");
d("\\rrbracket", "\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}");
d("⟦", "\\llbracket");
d("⟧", "\\rrbracket");
d("\\lBrace", "\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}");
d("\\rBrace", "\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}");
d("⦃", "\\lBrace");
d("⦄", "\\rBrace");
d("\\minuso", "\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`⦵}}");
d("⦵", "\\minuso");
d("\\darr", "\\downarrow");
d("\\dArr", "\\Downarrow");
d("\\Darr", "\\Downarrow");
d("\\lang", "\\langle");
d("\\rang", "\\rangle");
d("\\uarr", "\\uparrow");
d("\\uArr", "\\Uparrow");
d("\\Uarr", "\\Uparrow");
d("\\N", "\\mathbb{N}");
d("\\R", "\\mathbb{R}");
d("\\Z", "\\mathbb{Z}");
d("\\alef", "\\aleph");
d("\\alefsym", "\\aleph");
d("\\Alpha", "\\mathrm{A}");
d("\\Beta", "\\mathrm{B}");
d("\\bull", "\\bullet");
d("\\Chi", "\\mathrm{X}");
d("\\clubs", "\\clubsuit");
d("\\cnums", "\\mathbb{C}");
d("\\Complex", "\\mathbb{C}");
d("\\Dagger", "\\ddagger");
d("\\diamonds", "\\diamondsuit");
d("\\empty", "\\emptyset");
d("\\Epsilon", "\\mathrm{E}");
d("\\Eta", "\\mathrm{H}");
d("\\exist", "\\exists");
d("\\harr", "\\leftrightarrow");
d("\\hArr", "\\Leftrightarrow");
d("\\Harr", "\\Leftrightarrow");
d("\\hearts", "\\heartsuit");
d("\\image", "\\Im");
d("\\infin", "\\infty");
d("\\Iota", "\\mathrm{I}");
d("\\isin", "\\in");
d("\\Kappa", "\\mathrm{K}");
d("\\larr", "\\leftarrow");
d("\\lArr", "\\Leftarrow");
d("\\Larr", "\\Leftarrow");
d("\\lrarr", "\\leftrightarrow");
d("\\lrArr", "\\Leftrightarrow");
d("\\Lrarr", "\\Leftrightarrow");
d("\\Mu", "\\mathrm{M}");
d("\\natnums", "\\mathbb{N}");
d("\\Nu", "\\mathrm{N}");
d("\\Omicron", "\\mathrm{O}");
d("\\plusmn", "\\pm");
d("\\rarr", "\\rightarrow");
d("\\rArr", "\\Rightarrow");
d("\\Rarr", "\\Rightarrow");
d("\\real", "\\Re");
d("\\reals", "\\mathbb{R}");
d("\\Reals", "\\mathbb{R}");
d("\\Rho", "\\mathrm{P}");
d("\\sdot", "\\cdot");
d("\\sect", "\\S");
d("\\spades", "\\spadesuit");
d("\\sub", "\\subset");
d("\\sube", "\\subseteq");
d("\\supe", "\\supseteq");
d("\\Tau", "\\mathrm{T}");
d("\\thetasym", "\\vartheta");
d("\\weierp", "\\wp");
d("\\Zeta", "\\mathrm{Z}");
d("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
d("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
d("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits");
d("\\bra", "\\mathinner{\\langle{#1}|}");
d("\\ket", "\\mathinner{|{#1}\\rangle}");
d("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
d("\\Bra", "\\left\\langle#1\\right|");
d("\\Ket", "\\left|#1\\right\\rangle");
var Vn = (a) => (e) => {
  var t = e.consumeArg().tokens, r = e.consumeArg().tokens, n = e.consumeArg().tokens, i = e.consumeArg().tokens, s = e.macros.get("|"), u = e.macros.get("\\|");
  e.macros.beginGroup();
  var c = (g) => (x) => {
    a && (x.macros.set("|", s), n.length && x.macros.set("\\|", u));
    var b = g;
    if (!g && n.length) {
      var T = x.future();
      T.text === "|" && (x.popToken(), b = !0);
    }
    return {
      tokens: b ? n : r,
      numArgs: 0
    };
  };
  e.macros.set("|", c(!1)), n.length && e.macros.set("\\|", c(!0));
  var m = e.consumeArg().tokens, p = e.expandTokens([
    ...i,
    ...m,
    ...t
    // reversed
  ]);
  return e.macros.endGroup(), {
    tokens: p.reverse(),
    numArgs: 0
  };
};
d("\\bra@ket", Vn(!1));
d("\\bra@set", Vn(!0));
d("\\Braket", "\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
d("\\Set", "\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
d("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");
d("\\angln", "{\\angl n}");
d("\\blue", "\\textcolor{##6495ed}{#1}");
d("\\orange", "\\textcolor{##ffa500}{#1}");
d("\\pink", "\\textcolor{##ff00af}{#1}");
d("\\red", "\\textcolor{##df0030}{#1}");
d("\\green", "\\textcolor{##28ae7b}{#1}");
d("\\gray", "\\textcolor{gray}{#1}");
d("\\purple", "\\textcolor{##9d38bd}{#1}");
d("\\blueA", "\\textcolor{##ccfaff}{#1}");
d("\\blueB", "\\textcolor{##80f6ff}{#1}");
d("\\blueC", "\\textcolor{##63d9ea}{#1}");
d("\\blueD", "\\textcolor{##11accd}{#1}");
d("\\blueE", "\\textcolor{##0c7f99}{#1}");
d("\\tealA", "\\textcolor{##94fff5}{#1}");
d("\\tealB", "\\textcolor{##26edd5}{#1}");
d("\\tealC", "\\textcolor{##01d1c1}{#1}");
d("\\tealD", "\\textcolor{##01a995}{#1}");
d("\\tealE", "\\textcolor{##208170}{#1}");
d("\\greenA", "\\textcolor{##b6ffb0}{#1}");
d("\\greenB", "\\textcolor{##8af281}{#1}");
d("\\greenC", "\\textcolor{##74cf70}{#1}");
d("\\greenD", "\\textcolor{##1fab54}{#1}");
d("\\greenE", "\\textcolor{##0d923f}{#1}");
d("\\goldA", "\\textcolor{##ffd0a9}{#1}");
d("\\goldB", "\\textcolor{##ffbb71}{#1}");
d("\\goldC", "\\textcolor{##ff9c39}{#1}");
d("\\goldD", "\\textcolor{##e07d10}{#1}");
d("\\goldE", "\\textcolor{##a75a05}{#1}");
d("\\redA", "\\textcolor{##fca9a9}{#1}");
d("\\redB", "\\textcolor{##ff8482}{#1}");
d("\\redC", "\\textcolor{##f9685d}{#1}");
d("\\redD", "\\textcolor{##e84d39}{#1}");
d("\\redE", "\\textcolor{##bc2612}{#1}");
d("\\maroonA", "\\textcolor{##ffbde0}{#1}");
d("\\maroonB", "\\textcolor{##ff92c6}{#1}");
d("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
d("\\maroonD", "\\textcolor{##ca337c}{#1}");
d("\\maroonE", "\\textcolor{##9e034e}{#1}");
d("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
d("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
d("\\purpleC", "\\textcolor{##aa87ff}{#1}");
d("\\purpleD", "\\textcolor{##7854ab}{#1}");
d("\\purpleE", "\\textcolor{##543b78}{#1}");
d("\\mintA", "\\textcolor{##f5f9e8}{#1}");
d("\\mintB", "\\textcolor{##edf2df}{#1}");
d("\\mintC", "\\textcolor{##e0e5cc}{#1}");
d("\\grayA", "\\textcolor{##f6f7f7}{#1}");
d("\\grayB", "\\textcolor{##f0f1f2}{#1}");
d("\\grayC", "\\textcolor{##e3e5e6}{#1}");
d("\\grayD", "\\textcolor{##d6d8da}{#1}");
d("\\grayE", "\\textcolor{##babec2}{#1}");
d("\\grayF", "\\textcolor{##888d93}{#1}");
d("\\grayG", "\\textcolor{##626569}{#1}");
d("\\grayH", "\\textcolor{##3b3e40}{#1}");
d("\\grayI", "\\textcolor{##21242c}{#1}");
d("\\kaBlue", "\\textcolor{##314453}{#1}");
d("\\kaGreen", "\\textcolor{##71B307}{#1}");
var jn = {
  "^": !0,
  // Parser.js
  _: !0,
  // Parser.js
  "\\limits": !0,
  // Parser.js
  "\\nolimits": !0
  // Parser.js
};
class v1 {
  constructor(e, t, r) {
    this.settings = void 0, this.expansionCount = void 0, this.lexer = void 0, this.macros = void 0, this.stack = void 0, this.mode = void 0, this.settings = t, this.expansionCount = 0, this.feed(e), this.macros = new f1(g1, t.macros), this.mode = r, this.stack = [];
  }
  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */
  feed(e) {
    this.lexer = new Ma(e, this.settings);
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(e) {
    this.mode = e;
  }
  /**
   * Start a new group nesting within all namespaces.
   */
  beginGroup() {
    this.macros.beginGroup();
  }
  /**
   * End current group nesting within all namespaces.
   */
  endGroup() {
    this.macros.endGroup();
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    this.macros.endGroups();
  }
  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  future() {
    return this.stack.length === 0 && this.pushToken(this.lexer.lex()), this.stack[this.stack.length - 1];
  }
  /**
   * Remove and return the next unexpanded token.
   */
  popToken() {
    return this.future(), this.stack.pop();
  }
  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  pushToken(e) {
    this.stack.push(e);
  }
  /**
   * Append an array of tokens to the token stack.
   */
  pushTokens(e) {
    this.stack.push(...e);
  }
  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  scanArgument(e) {
    var t, r, n;
    if (e) {
      if (this.consumeSpaces(), this.future().text !== "[")
        return null;
      t = this.popToken(), {
        tokens: n,
        end: r
      } = this.consumeArg(["]"]);
    } else
      ({
        tokens: n,
        start: t,
        end: r
      } = this.consumeArg());
    return this.pushToken(new ze("EOF", r.loc)), this.pushTokens(n), t.range(r, "");
  }
  /**
   * Consume all following space tokens, without expansion.
   */
  consumeSpaces() {
    for (; ; ) {
      var e = this.future();
      if (e.text === " ")
        this.stack.pop();
      else
        break;
    }
  }
  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  consumeArg(e) {
    var t = [], r = e && e.length > 0;
    r || this.consumeSpaces();
    var n = this.future(), i, s = 0, u = 0;
    do {
      if (i = this.popToken(), t.push(i), i.text === "{")
        ++s;
      else if (i.text === "}") {
        if (--s, s === -1)
          throw new I("Extra }", i);
      } else if (i.text === "EOF")
        throw new I("Unexpected end of input in a macro argument, expected '" + (e && r ? e[u] : "}") + "'", i);
      if (e && r)
        if ((s === 0 || s === 1 && e[u] === "{") && i.text === e[u]) {
          if (++u, u === e.length) {
            t.splice(-u, u);
            break;
          }
        } else
          u = 0;
    } while (s !== 0 || r);
    return n.text === "{" && t[t.length - 1].text === "}" && (t.pop(), t.shift()), t.reverse(), {
      tokens: t,
      start: n,
      end: i
    };
  }
  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  consumeArgs(e, t) {
    if (t) {
      if (t.length !== e + 1)
        throw new I("The length of delimiters doesn't match the number of args!");
      for (var r = t[0], n = 0; n < r.length; n++) {
        var i = this.popToken();
        if (r[n] !== i.text)
          throw new I("Use of the macro doesn't match its definition", i);
      }
    }
    for (var s = [], u = 0; u < e; u++)
      s.push(this.consumeArg(t && t[u + 1]).tokens);
    return s;
  }
  /**
   * Increment `expansionCount` by the specified amount.
   * Throw an error if it exceeds `maxExpand`.
   */
  countExpansion(e) {
    if (this.expansionCount += e, this.expansionCount > this.settings.maxExpand)
      throw new I("Too many expansions: infinite loop or need to increase maxExpand setting");
  }
  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order, and the number of such tokens will be
   * returned.  This number might be zero or positive.
   *
   * If not, the return value is `false`, and the next token remains at the
   * top of the stack.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty (in case of empty expansion
   * and no other tokens).
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  expandOnce(e) {
    var t = this.popToken(), r = t.text, n = t.noexpand ? null : this._getExpansion(r);
    if (n == null || e && n.unexpandable) {
      if (e && n == null && r[0] === "\\" && !this.isDefined(r))
        throw new I("Undefined control sequence: " + r);
      return this.pushToken(t), !1;
    }
    this.countExpansion(1);
    var i = n.tokens, s = this.consumeArgs(n.numArgs, n.delimiters);
    if (n.numArgs) {
      i = i.slice();
      for (var u = i.length - 1; u >= 0; --u) {
        var c = i[u];
        if (c.text === "#") {
          if (u === 0)
            throw new I("Incomplete placeholder at end of macro body", c);
          if (c = i[--u], c.text === "#")
            i.splice(u + 1, 1);
          else if (/^[1-9]$/.test(c.text))
            i.splice(u, 2, ...s[+c.text - 1]);
          else
            throw new I("Not a valid argument number", c);
        }
      }
    }
    return this.pushTokens(i), i.length;
  }
  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  expandAfterFuture() {
    return this.expandOnce(), this.future();
  }
  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  expandNextToken() {
    for (; ; )
      if (this.expandOnce() === !1) {
        var e = this.stack.pop();
        return e.treatAsRelax && (e.text = "\\relax"), e;
      }
    throw new Error();
  }
  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  expandMacro(e) {
    return this.macros.has(e) ? this.expandTokens([new ze(e)]) : void 0;
  }
  /**
   * Fully expand the given token stream and return the resulting list of
   * tokens.  Note that the input tokens are in reverse order, but the
   * output tokens are in forward order.
   */
  expandTokens(e) {
    var t = [], r = this.stack.length;
    for (this.pushTokens(e); this.stack.length > r; )
      if (this.expandOnce(!0) === !1) {
        var n = this.stack.pop();
        n.treatAsRelax && (n.noexpand = !1, n.treatAsRelax = !1), t.push(n);
      }
    return this.countExpansion(t.length), t;
  }
  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  expandMacroAsText(e) {
    var t = this.expandMacro(e);
    return t && t.map((r) => r.text).join("");
  }
  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  _getExpansion(e) {
    var t = this.macros.get(e);
    if (t == null)
      return t;
    if (e.length === 1) {
      var r = this.lexer.catcodes[e];
      if (r != null && r !== 13)
        return;
    }
    var n = typeof t == "function" ? t(this) : t;
    if (typeof n == "string") {
      var i = 0;
      if (n.indexOf("#") !== -1)
        for (var s = n.replace(/##/g, ""); s.indexOf("#" + (i + 1)) !== -1; )
          ++i;
      for (var u = new Ma(n, this.settings), c = [], m = u.lex(); m.text !== "EOF"; )
        c.push(m), m = u.lex();
      c.reverse();
      var p = {
        tokens: c,
        numArgs: i
      };
      return p;
    }
    return n;
  }
  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  isDefined(e) {
    return this.macros.has(e) || n0.hasOwnProperty(e) || ee.math.hasOwnProperty(e) || ee.text.hasOwnProperty(e) || jn.hasOwnProperty(e);
  }
  /**
   * Determine whether a command is expandable.
   */
  isExpandable(e) {
    var t = this.macros.get(e);
    return t != null ? typeof t == "string" || typeof t == "function" || !t.unexpandable : n0.hasOwnProperty(e) && !n0[e].primitive;
  }
}
var Ra = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/, J0 = Object.freeze({
  "₊": "+",
  "₋": "-",
  "₌": "=",
  "₍": "(",
  "₎": ")",
  "₀": "0",
  "₁": "1",
  "₂": "2",
  "₃": "3",
  "₄": "4",
  "₅": "5",
  "₆": "6",
  "₇": "7",
  "₈": "8",
  "₉": "9",
  "ₐ": "a",
  "ₑ": "e",
  "ₕ": "h",
  "ᵢ": "i",
  "ⱼ": "j",
  "ₖ": "k",
  "ₗ": "l",
  "ₘ": "m",
  "ₙ": "n",
  "ₒ": "o",
  "ₚ": "p",
  "ᵣ": "r",
  "ₛ": "s",
  "ₜ": "t",
  "ᵤ": "u",
  "ᵥ": "v",
  "ₓ": "x",
  "ᵦ": "β",
  "ᵧ": "γ",
  "ᵨ": "ρ",
  "ᵩ": "ϕ",
  "ᵪ": "χ",
  "⁺": "+",
  "⁻": "-",
  "⁼": "=",
  "⁽": "(",
  "⁾": ")",
  "⁰": "0",
  "¹": "1",
  "²": "2",
  "³": "3",
  "⁴": "4",
  "⁵": "5",
  "⁶": "6",
  "⁷": "7",
  "⁸": "8",
  "⁹": "9",
  "ᴬ": "A",
  "ᴮ": "B",
  "ᴰ": "D",
  "ᴱ": "E",
  "ᴳ": "G",
  "ᴴ": "H",
  "ᴵ": "I",
  "ᴶ": "J",
  "ᴷ": "K",
  "ᴸ": "L",
  "ᴹ": "M",
  "ᴺ": "N",
  "ᴼ": "O",
  "ᴾ": "P",
  "ᴿ": "R",
  "ᵀ": "T",
  "ᵁ": "U",
  "ⱽ": "V",
  "ᵂ": "W",
  "ᵃ": "a",
  "ᵇ": "b",
  "ᶜ": "c",
  "ᵈ": "d",
  "ᵉ": "e",
  "ᶠ": "f",
  "ᵍ": "g",
  ʰ: "h",
  "ⁱ": "i",
  ʲ: "j",
  "ᵏ": "k",
  ˡ: "l",
  "ᵐ": "m",
  ⁿ: "n",
  "ᵒ": "o",
  "ᵖ": "p",
  ʳ: "r",
  ˢ: "s",
  "ᵗ": "t",
  "ᵘ": "u",
  "ᵛ": "v",
  ʷ: "w",
  ˣ: "x",
  ʸ: "y",
  "ᶻ": "z",
  "ᵝ": "β",
  "ᵞ": "γ",
  "ᵟ": "δ",
  "ᵠ": "ϕ",
  "ᵡ": "χ",
  "ᶿ": "θ"
}), Wt = {
  "́": {
    text: "\\'",
    math: "\\acute"
  },
  "̀": {
    text: "\\`",
    math: "\\grave"
  },
  "̈": {
    text: '\\"',
    math: "\\ddot"
  },
  "̃": {
    text: "\\~",
    math: "\\tilde"
  },
  "̄": {
    text: "\\=",
    math: "\\bar"
  },
  "̆": {
    text: "\\u",
    math: "\\breve"
  },
  "̌": {
    text: "\\v",
    math: "\\check"
  },
  "̂": {
    text: "\\^",
    math: "\\hat"
  },
  "̇": {
    text: "\\.",
    math: "\\dot"
  },
  "̊": {
    text: "\\r",
    math: "\\mathring"
  },
  "̋": {
    text: "\\H"
  },
  "̧": {
    text: "\\c"
  }
}, Ia = {
  á: "á",
  à: "à",
  ä: "ä",
  ǟ: "ǟ",
  ã: "ã",
  ā: "ā",
  ă: "ă",
  ắ: "ắ",
  ằ: "ằ",
  ẵ: "ẵ",
  ǎ: "ǎ",
  â: "â",
  ấ: "ấ",
  ầ: "ầ",
  ẫ: "ẫ",
  ȧ: "ȧ",
  ǡ: "ǡ",
  å: "å",
  ǻ: "ǻ",
  ḃ: "ḃ",
  ć: "ć",
  ḉ: "ḉ",
  č: "č",
  ĉ: "ĉ",
  ċ: "ċ",
  ç: "ç",
  ď: "ď",
  ḋ: "ḋ",
  ḑ: "ḑ",
  é: "é",
  è: "è",
  ë: "ë",
  ẽ: "ẽ",
  ē: "ē",
  ḗ: "ḗ",
  ḕ: "ḕ",
  ĕ: "ĕ",
  ḝ: "ḝ",
  ě: "ě",
  ê: "ê",
  ế: "ế",
  ề: "ề",
  ễ: "ễ",
  ė: "ė",
  ȩ: "ȩ",
  ḟ: "ḟ",
  ǵ: "ǵ",
  ḡ: "ḡ",
  ğ: "ğ",
  ǧ: "ǧ",
  ĝ: "ĝ",
  ġ: "ġ",
  ģ: "ģ",
  ḧ: "ḧ",
  ȟ: "ȟ",
  ĥ: "ĥ",
  ḣ: "ḣ",
  ḩ: "ḩ",
  í: "í",
  ì: "ì",
  ï: "ï",
  ḯ: "ḯ",
  ĩ: "ĩ",
  ī: "ī",
  ĭ: "ĭ",
  ǐ: "ǐ",
  î: "î",
  ǰ: "ǰ",
  ĵ: "ĵ",
  ḱ: "ḱ",
  ǩ: "ǩ",
  ķ: "ķ",
  ĺ: "ĺ",
  ľ: "ľ",
  ļ: "ļ",
  ḿ: "ḿ",
  ṁ: "ṁ",
  ń: "ń",
  ǹ: "ǹ",
  ñ: "ñ",
  ň: "ň",
  ṅ: "ṅ",
  ņ: "ņ",
  ó: "ó",
  ò: "ò",
  ö: "ö",
  ȫ: "ȫ",
  õ: "õ",
  ṍ: "ṍ",
  ṏ: "ṏ",
  ȭ: "ȭ",
  ō: "ō",
  ṓ: "ṓ",
  ṑ: "ṑ",
  ŏ: "ŏ",
  ǒ: "ǒ",
  ô: "ô",
  ố: "ố",
  ồ: "ồ",
  ỗ: "ỗ",
  ȯ: "ȯ",
  ȱ: "ȱ",
  ő: "ő",
  ṕ: "ṕ",
  ṗ: "ṗ",
  ŕ: "ŕ",
  ř: "ř",
  ṙ: "ṙ",
  ŗ: "ŗ",
  ś: "ś",
  ṥ: "ṥ",
  š: "š",
  ṧ: "ṧ",
  ŝ: "ŝ",
  ṡ: "ṡ",
  ş: "ş",
  ẗ: "ẗ",
  ť: "ť",
  ṫ: "ṫ",
  ţ: "ţ",
  ú: "ú",
  ù: "ù",
  ü: "ü",
  ǘ: "ǘ",
  ǜ: "ǜ",
  ǖ: "ǖ",
  ǚ: "ǚ",
  ũ: "ũ",
  ṹ: "ṹ",
  ū: "ū",
  ṻ: "ṻ",
  ŭ: "ŭ",
  ǔ: "ǔ",
  û: "û",
  ů: "ů",
  ű: "ű",
  ṽ: "ṽ",
  ẃ: "ẃ",
  ẁ: "ẁ",
  ẅ: "ẅ",
  ŵ: "ŵ",
  ẇ: "ẇ",
  ẘ: "ẘ",
  ẍ: "ẍ",
  ẋ: "ẋ",
  ý: "ý",
  ỳ: "ỳ",
  ÿ: "ÿ",
  ỹ: "ỹ",
  ȳ: "ȳ",
  ŷ: "ŷ",
  ẏ: "ẏ",
  ẙ: "ẙ",
  ź: "ź",
  ž: "ž",
  ẑ: "ẑ",
  ż: "ż",
  Á: "Á",
  À: "À",
  Ä: "Ä",
  Ǟ: "Ǟ",
  Ã: "Ã",
  Ā: "Ā",
  Ă: "Ă",
  Ắ: "Ắ",
  Ằ: "Ằ",
  Ẵ: "Ẵ",
  Ǎ: "Ǎ",
  Â: "Â",
  Ấ: "Ấ",
  Ầ: "Ầ",
  Ẫ: "Ẫ",
  Ȧ: "Ȧ",
  Ǡ: "Ǡ",
  Å: "Å",
  Ǻ: "Ǻ",
  Ḃ: "Ḃ",
  Ć: "Ć",
  Ḉ: "Ḉ",
  Č: "Č",
  Ĉ: "Ĉ",
  Ċ: "Ċ",
  Ç: "Ç",
  Ď: "Ď",
  Ḋ: "Ḋ",
  Ḑ: "Ḑ",
  É: "É",
  È: "È",
  Ë: "Ë",
  Ẽ: "Ẽ",
  Ē: "Ē",
  Ḗ: "Ḗ",
  Ḕ: "Ḕ",
  Ĕ: "Ĕ",
  Ḝ: "Ḝ",
  Ě: "Ě",
  Ê: "Ê",
  Ế: "Ế",
  Ề: "Ề",
  Ễ: "Ễ",
  Ė: "Ė",
  Ȩ: "Ȩ",
  Ḟ: "Ḟ",
  Ǵ: "Ǵ",
  Ḡ: "Ḡ",
  Ğ: "Ğ",
  Ǧ: "Ǧ",
  Ĝ: "Ĝ",
  Ġ: "Ġ",
  Ģ: "Ģ",
  Ḧ: "Ḧ",
  Ȟ: "Ȟ",
  Ĥ: "Ĥ",
  Ḣ: "Ḣ",
  Ḩ: "Ḩ",
  Í: "Í",
  Ì: "Ì",
  Ï: "Ï",
  Ḯ: "Ḯ",
  Ĩ: "Ĩ",
  Ī: "Ī",
  Ĭ: "Ĭ",
  Ǐ: "Ǐ",
  Î: "Î",
  İ: "İ",
  Ĵ: "Ĵ",
  Ḱ: "Ḱ",
  Ǩ: "Ǩ",
  Ķ: "Ķ",
  Ĺ: "Ĺ",
  Ľ: "Ľ",
  Ļ: "Ļ",
  Ḿ: "Ḿ",
  Ṁ: "Ṁ",
  Ń: "Ń",
  Ǹ: "Ǹ",
  Ñ: "Ñ",
  Ň: "Ň",
  Ṅ: "Ṅ",
  Ņ: "Ņ",
  Ó: "Ó",
  Ò: "Ò",
  Ö: "Ö",
  Ȫ: "Ȫ",
  Õ: "Õ",
  Ṍ: "Ṍ",
  Ṏ: "Ṏ",
  Ȭ: "Ȭ",
  Ō: "Ō",
  Ṓ: "Ṓ",
  Ṑ: "Ṑ",
  Ŏ: "Ŏ",
  Ǒ: "Ǒ",
  Ô: "Ô",
  Ố: "Ố",
  Ồ: "Ồ",
  Ỗ: "Ỗ",
  Ȯ: "Ȯ",
  Ȱ: "Ȱ",
  Ő: "Ő",
  Ṕ: "Ṕ",
  Ṗ: "Ṗ",
  Ŕ: "Ŕ",
  Ř: "Ř",
  Ṙ: "Ṙ",
  Ŗ: "Ŗ",
  Ś: "Ś",
  Ṥ: "Ṥ",
  Š: "Š",
  Ṧ: "Ṧ",
  Ŝ: "Ŝ",
  Ṡ: "Ṡ",
  Ş: "Ş",
  Ť: "Ť",
  Ṫ: "Ṫ",
  Ţ: "Ţ",
  Ú: "Ú",
  Ù: "Ù",
  Ü: "Ü",
  Ǘ: "Ǘ",
  Ǜ: "Ǜ",
  Ǖ: "Ǖ",
  Ǚ: "Ǚ",
  Ũ: "Ũ",
  Ṹ: "Ṹ",
  Ū: "Ū",
  Ṻ: "Ṻ",
  Ŭ: "Ŭ",
  Ǔ: "Ǔ",
  Û: "Û",
  Ů: "Ů",
  Ű: "Ű",
  Ṽ: "Ṽ",
  Ẃ: "Ẃ",
  Ẁ: "Ẁ",
  Ẅ: "Ẅ",
  Ŵ: "Ŵ",
  Ẇ: "Ẇ",
  Ẍ: "Ẍ",
  Ẋ: "Ẋ",
  Ý: "Ý",
  Ỳ: "Ỳ",
  Ÿ: "Ÿ",
  Ỹ: "Ỹ",
  Ȳ: "Ȳ",
  Ŷ: "Ŷ",
  Ẏ: "Ẏ",
  Ź: "Ź",
  Ž: "Ž",
  Ẑ: "Ẑ",
  Ż: "Ż",
  ά: "ά",
  ὰ: "ὰ",
  ᾱ: "ᾱ",
  ᾰ: "ᾰ",
  έ: "έ",
  ὲ: "ὲ",
  ή: "ή",
  ὴ: "ὴ",
  ί: "ί",
  ὶ: "ὶ",
  ϊ: "ϊ",
  ΐ: "ΐ",
  ῒ: "ῒ",
  ῑ: "ῑ",
  ῐ: "ῐ",
  ό: "ό",
  ὸ: "ὸ",
  ύ: "ύ",
  ὺ: "ὺ",
  ϋ: "ϋ",
  ΰ: "ΰ",
  ῢ: "ῢ",
  ῡ: "ῡ",
  ῠ: "ῠ",
  ώ: "ώ",
  ὼ: "ὼ",
  Ύ: "Ύ",
  Ὺ: "Ὺ",
  Ϋ: "Ϋ",
  Ῡ: "Ῡ",
  Ῠ: "Ῠ",
  Ώ: "Ώ",
  Ὼ: "Ὼ"
};
class At {
  constructor(e, t) {
    this.mode = void 0, this.gullet = void 0, this.settings = void 0, this.leftrightDepth = void 0, this.nextToken = void 0, this.mode = "math", this.gullet = new v1(e, t, this.mode), this.settings = t, this.leftrightDepth = 0;
  }
  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */
  expect(e, t) {
    if (t === void 0 && (t = !0), this.fetch().text !== e)
      throw new I("Expected '" + e + "', got '" + this.fetch().text + "'", this.fetch());
    t && this.consume();
  }
  /**
   * Discards the current lookahead token, considering it consumed.
   */
  consume() {
    this.nextToken = null;
  }
  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  fetch() {
    return this.nextToken == null && (this.nextToken = this.gullet.expandNextToken()), this.nextToken;
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(e) {
    this.mode = e, this.gullet.switchMode(e);
  }
  /**
   * Main parsing function, which parses an entire input.
   */
  parse() {
    this.settings.globalGroup || this.gullet.beginGroup(), this.settings.colorIsTextColor && this.gullet.macros.set("\\color", "\\textcolor");
    try {
      var e = this.parseExpression(!1);
      return this.expect("EOF"), this.settings.globalGroup || this.gullet.endGroup(), e;
    } finally {
      this.gullet.endGroups();
    }
  }
  /**
   * Fully parse a separate sequence of tokens as a separate job.
   * Tokens should be specified in reverse order, as in a MacroDefinition.
   */
  subparse(e) {
    var t = this.nextToken;
    this.consume(), this.gullet.pushToken(new ze("}")), this.gullet.pushTokens(e);
    var r = this.parseExpression(!1);
    return this.expect("}"), this.nextToken = t, r;
  }
  /**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precedence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */
  parseExpression(e, t) {
    for (var r = []; ; ) {
      this.mode === "math" && this.consumeSpaces();
      var n = this.fetch();
      if (At.endOfExpression.indexOf(n.text) !== -1 || t && n.text === t || e && n0[n.text] && n0[n.text].infix)
        break;
      var i = this.parseAtom(t);
      if (i) {
        if (i.type === "internal")
          continue;
      } else break;
      r.push(i);
    }
    return this.mode === "text" && this.formLigatures(r), this.handleInfixNodes(r);
  }
  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  handleInfixNodes(e) {
    for (var t = -1, r, n = 0; n < e.length; n++)
      if (e[n].type === "infix") {
        if (t !== -1)
          throw new I("only one infix operator per group", e[n].token);
        t = n, r = e[n].replaceWith;
      }
    if (t !== -1 && r) {
      var i, s, u = e.slice(0, t), c = e.slice(t + 1);
      u.length === 1 && u[0].type === "ordgroup" ? i = u[0] : i = {
        type: "ordgroup",
        mode: this.mode,
        body: u
      }, c.length === 1 && c[0].type === "ordgroup" ? s = c[0] : s = {
        type: "ordgroup",
        mode: this.mode,
        body: c
      };
      var m;
      return r === "\\\\abovefrac" ? m = this.callFunction(r, [i, e[t], s], []) : m = this.callFunction(r, [i, s], []), [m];
    } else
      return e;
  }
  /**
   * Handle a subscript or superscript with nice errors.
   */
  handleSupSubscript(e) {
    var t = this.fetch(), r = t.text;
    this.consume(), this.consumeSpaces();
    var n = this.parseGroup(e);
    if (!n)
      throw new I("Expected group after '" + r + "'", t);
    return n;
  }
  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  formatUnsupportedCmd(e) {
    for (var t = [], r = 0; r < e.length; r++)
      t.push({
        type: "textord",
        mode: "text",
        text: e[r]
      });
    var n = {
      type: "text",
      mode: this.mode,
      body: t
    }, i = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [n]
    };
    return i;
  }
  /**
   * Parses a group with optional super/subscripts.
   */
  parseAtom(e) {
    var t = this.parseGroup("atom", e);
    if (this.mode === "text")
      return t;
    for (var r, n; ; ) {
      this.consumeSpaces();
      var i = this.fetch();
      if (i.text === "\\limits" || i.text === "\\nolimits") {
        if (t && t.type === "op") {
          var s = i.text === "\\limits";
          t.limits = s, t.alwaysHandleSupSub = !0;
        } else if (t && t.type === "operatorname")
          t.alwaysHandleSupSub && (t.limits = i.text === "\\limits");
        else
          throw new I("Limit controls must follow a math operator", i);
        this.consume();
      } else if (i.text === "^") {
        if (r)
          throw new I("Double superscript", i);
        r = this.handleSupSubscript("superscript");
      } else if (i.text === "_") {
        if (n)
          throw new I("Double subscript", i);
        n = this.handleSupSubscript("subscript");
      } else if (i.text === "'") {
        if (r)
          throw new I("Double superscript", i);
        var u = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        }, c = [u];
        for (this.consume(); this.fetch().text === "'"; )
          c.push(u), this.consume();
        this.fetch().text === "^" && c.push(this.handleSupSubscript("superscript")), r = {
          type: "ordgroup",
          mode: this.mode,
          body: c
        };
      } else if (J0[i.text]) {
        var m = Ra.test(i.text), p = [];
        for (p.push(new ze(J0[i.text])), this.consume(); ; ) {
          var g = this.fetch().text;
          if (!J0[g] || Ra.test(g) !== m)
            break;
          p.unshift(new ze(J0[g])), this.consume();
        }
        var x = this.subparse(p);
        m ? n = {
          type: "ordgroup",
          mode: "math",
          body: x
        } : r = {
          type: "ordgroup",
          mode: "math",
          body: x
        };
      } else
        break;
    }
    return r || n ? {
      type: "supsub",
      mode: this.mode,
      base: t,
      sup: r,
      sub: n
    } : t;
  }
  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  parseFunction(e, t) {
    var r = this.fetch(), n = r.text, i = n0[n];
    if (!i)
      return null;
    if (this.consume(), t && t !== "atom" && !i.allowedInArgument)
      throw new I("Got function '" + n + "' with no arguments" + (t ? " as " + t : ""), r);
    if (this.mode === "text" && !i.allowedInText)
      throw new I("Can't use function '" + n + "' in text mode", r);
    if (this.mode === "math" && i.allowedInMath === !1)
      throw new I("Can't use function '" + n + "' in math mode", r);
    var {
      args: s,
      optArgs: u
    } = this.parseArguments(n, i);
    return this.callFunction(n, s, u, r, e);
  }
  /**
   * Call a function handler with a suitable context and arguments.
   */
  callFunction(e, t, r, n, i) {
    var s = {
      funcName: e,
      parser: this,
      token: n,
      breakOnTokenText: i
    }, u = n0[e];
    if (u && u.handler)
      return u.handler(s, t, r);
    throw new I("No function handler for " + e);
  }
  /**
   * Parses the arguments of a function or environment
   */
  parseArguments(e, t) {
    var r = t.numArgs + t.numOptionalArgs;
    if (r === 0)
      return {
        args: [],
        optArgs: []
      };
    for (var n = [], i = [], s = 0; s < r; s++) {
      var u = t.argTypes && t.argTypes[s], c = s < t.numOptionalArgs;
      (t.primitive && u == null || // \sqrt expands into primitive if optional argument doesn't exist
      t.type === "sqrt" && s === 1 && i[0] == null) && (u = "primitive");
      var m = this.parseGroupOfType("argument to '" + e + "'", u, c);
      if (c)
        i.push(m);
      else if (m != null)
        n.push(m);
      else
        throw new I("Null argument, please report this as a bug");
    }
    return {
      args: n,
      optArgs: i
    };
  }
  /**
   * Parses a group when the mode is changing.
   */
  parseGroupOfType(e, t, r) {
    switch (t) {
      case "color":
        return this.parseColorGroup(r);
      case "size":
        return this.parseSizeGroup(r);
      case "url":
        return this.parseUrlGroup(r);
      case "math":
      case "text":
        return this.parseArgumentGroup(r, t);
      case "hbox": {
        var n = this.parseArgumentGroup(r, "text");
        return n != null ? {
          type: "styling",
          mode: n.mode,
          body: [n],
          style: "text"
          // simulate \textstyle
        } : null;
      }
      case "raw": {
        var i = this.parseStringGroup("raw", r);
        return i != null ? {
          type: "raw",
          mode: "text",
          string: i.text
        } : null;
      }
      case "primitive": {
        if (r)
          throw new I("A primitive argument cannot be optional");
        var s = this.parseGroup(e);
        if (s == null)
          throw new I("Expected group as " + e, this.fetch());
        return s;
      }
      case "original":
      case null:
      case void 0:
        return this.parseArgumentGroup(r);
      default:
        throw new I("Unknown group type as " + e, this.fetch());
    }
  }
  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  consumeSpaces() {
    for (; this.fetch().text === " "; )
      this.consume();
  }
  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  parseStringGroup(e, t) {
    var r = this.gullet.scanArgument(t);
    if (r == null)
      return null;
    for (var n = "", i; (i = this.fetch()).text !== "EOF"; )
      n += i.text, this.consume();
    return this.consume(), r.text = n, r;
  }
  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  parseRegexGroup(e, t) {
    for (var r = this.fetch(), n = r, i = "", s; (s = this.fetch()).text !== "EOF" && e.test(i + s.text); )
      n = s, i += n.text, this.consume();
    if (i === "")
      throw new I("Invalid " + t + ": '" + r.text + "'", r);
    return r.range(n, i);
  }
  /**
   * Parses a color description.
   */
  parseColorGroup(e) {
    var t = this.parseStringGroup("color", e);
    if (t == null)
      return null;
    var r = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(t.text);
    if (!r)
      throw new I("Invalid color: '" + t.text + "'", t);
    var n = r[0];
    return /^[0-9a-f]{6}$/i.test(n) && (n = "#" + n), {
      type: "color-token",
      mode: this.mode,
      color: n
    };
  }
  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  parseSizeGroup(e) {
    var t, r = !1;
    if (this.gullet.consumeSpaces(), !e && this.gullet.future().text !== "{" ? t = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size") : t = this.parseStringGroup("size", e), !t)
      return null;
    !e && t.text.length === 0 && (t.text = "0pt", r = !0);
    var n = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);
    if (!n)
      throw new I("Invalid size: '" + t.text + "'", t);
    var i = {
      number: +(n[1] + n[2]),
      // sign + magnitude, cast to number
      unit: n[3]
    };
    if (!rn(i))
      throw new I("Invalid unit: '" + i.unit + "'", t);
    return {
      type: "size",
      mode: this.mode,
      value: i,
      isBlank: r
    };
  }
  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  parseUrlGroup(e) {
    this.gullet.lexer.setCatcode("%", 13), this.gullet.lexer.setCatcode("~", 12);
    var t = this.parseStringGroup("url", e);
    if (this.gullet.lexer.setCatcode("%", 14), this.gullet.lexer.setCatcode("~", 13), t == null)
      return null;
    var r = t.text.replace(/\\([#$%&~_^{}])/g, "$1");
    return {
      type: "url",
      mode: this.mode,
      url: r
    };
  }
  /**
   * Parses an argument with the mode specified.
   */
  parseArgumentGroup(e, t) {
    var r = this.gullet.scanArgument(e);
    if (r == null)
      return null;
    var n = this.mode;
    t && this.switchMode(t), this.gullet.beginGroup();
    var i = this.parseExpression(!1, "EOF");
    this.expect("EOF"), this.gullet.endGroup();
    var s = {
      type: "ordgroup",
      mode: this.mode,
      loc: r.loc,
      body: i
    };
    return t && this.switchMode(n), s;
  }
  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  parseGroup(e, t) {
    var r = this.fetch(), n = r.text, i;
    if (n === "{" || n === "\\begingroup") {
      this.consume();
      var s = n === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup();
      var u = this.parseExpression(!1, s), c = this.fetch();
      this.expect(s), this.gullet.endGroup(), i = {
        type: "ordgroup",
        mode: this.mode,
        loc: ke.range(r, c),
        body: u,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/when-should-one-
        // use-begingroup-instead-of-bgroup
        semisimple: n === "\\begingroup" || void 0
      };
    } else if (i = this.parseFunction(t, e) || this.parseSymbol(), i == null && n[0] === "\\" && !jn.hasOwnProperty(n)) {
      if (this.settings.throwOnError)
        throw new I("Undefined control sequence: " + n, r);
      i = this.formatUnsupportedCmd(n), this.consume();
    }
    return i;
  }
  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  formLigatures(e) {
    for (var t = e.length - 1, r = 0; r < t; ++r) {
      var n = e[r], i = n.text;
      i === "-" && e[r + 1].text === "-" && (r + 1 < t && e[r + 2].text === "-" ? (e.splice(r, 3, {
        type: "textord",
        mode: "text",
        loc: ke.range(n, e[r + 2]),
        text: "---"
      }), t -= 2) : (e.splice(r, 2, {
        type: "textord",
        mode: "text",
        loc: ke.range(n, e[r + 1]),
        text: "--"
      }), t -= 1)), (i === "'" || i === "`") && e[r + 1].text === i && (e.splice(r, 2, {
        type: "textord",
        mode: "text",
        loc: ke.range(n, e[r + 1]),
        text: i + i
      }), t -= 1);
    }
  }
  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  parseSymbol() {
    var e = this.fetch(), t = e.text;
    if (/^\\verb[^a-zA-Z]/.test(t)) {
      this.consume();
      var r = t.slice(5), n = r.charAt(0) === "*";
      if (n && (r = r.slice(1)), r.length < 2 || r.charAt(0) !== r.slice(-1))
        throw new I(`\\verb assertion failed --
                    please report what input caused this bug`);
      return r = r.slice(1, -1), {
        type: "verb",
        mode: "text",
        body: r,
        star: n
      };
    }
    Ia.hasOwnProperty(t[0]) && !ee[this.mode][t[0]] && (this.settings.strict && this.mode === "math" && this.settings.reportNonstrict("unicodeTextInMathMode", 'Accented Unicode text character "' + t[0] + '" used in math mode', e), t = Ia[t[0]] + t.slice(1));
    var i = d1.exec(t);
    i && (t = t.substring(0, i.index), t === "i" ? t = "ı" : t === "j" && (t = "ȷ"));
    var s;
    if (ee[this.mode][t]) {
      this.settings.strict && this.mode === "math" && nr.indexOf(t) >= 0 && this.settings.reportNonstrict("unicodeTextInMathMode", 'Latin-1/Unicode text character "' + t[0] + '" used in math mode', e);
      var u = ee[this.mode][t].group, c = ke.range(e), m;
      if (nl.hasOwnProperty(u)) {
        var p = u;
        m = {
          type: "atom",
          mode: this.mode,
          family: p,
          loc: c,
          text: t
        };
      } else
        m = {
          type: u,
          mode: this.mode,
          loc: c,
          text: t
        };
      s = m;
    } else if (t.charCodeAt(0) >= 128)
      this.settings.strict && (tn(t.charCodeAt(0)) ? this.mode === "math" && this.settings.reportNonstrict("unicodeTextInMathMode", 'Unicode text character "' + t[0] + '" used in math mode', e) : this.settings.reportNonstrict("unknownSymbol", 'Unrecognized Unicode character "' + t[0] + '"' + (" (" + t.charCodeAt(0) + ")"), e)), s = {
        type: "textord",
        mode: "text",
        loc: ke.range(e),
        text: t
      };
    else
      return null;
    if (this.consume(), i)
      for (var g = 0; g < i[0].length; g++) {
        var x = i[0][g];
        if (!Wt[x])
          throw new I("Unknown accent ' " + x + "'", e);
        var b = Wt[x][this.mode] || Wt[x].text;
        if (!b)
          throw new I("Accent " + x + " unsupported in " + this.mode + " mode", e);
        s = {
          type: "accent",
          mode: this.mode,
          loc: ke.range(e),
          label: b,
          isStretchy: !1,
          isShifty: !0,
          // $FlowFixMe
          base: s
        };
      }
    return s;
  }
}
At.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
var b1 = function(e, t) {
  if (!(typeof e == "string" || e instanceof String))
    throw new TypeError("KaTeX can only parse string typed expression");
  var r = new At(e, t);
  delete r.gullet.macros.current["\\df@tag"];
  var n = r.parse();
  if (delete r.gullet.macros.current["\\current@color"], delete r.gullet.macros.current["\\color"], r.gullet.macros.get("\\df@tag")) {
    if (!t.displayMode)
      throw new I("\\tag works only in display equations");
    n = [{
      type: "tag",
      mode: "text",
      body: n,
      tag: r.subparse([new ze("\\df@tag")])
    }];
  }
  return n;
}, Wn = function(e, t, r) {
  t.textContent = "";
  var n = x1(e, r).toNode();
  t.appendChild(n);
};
typeof document < "u" && document.compatMode !== "CSS1Compat" && (typeof console < "u" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."), Wn = function() {
  throw new I("KaTeX doesn't work in quirks mode.");
});
var y1 = function(e, t, r) {
  if (r.throwOnError || !(e instanceof I))
    throw e;
  var n = D.makeSpan(["katex-error"], [new Oe(t)]);
  return n.setAttribute("title", e.toString()), n.setAttribute("style", "color:" + r.errorColor), n;
}, x1 = function(e, t) {
  var r = new Rs(t);
  try {
    var n = b1(e, r);
    return Tl(n, e, r);
  } catch (i) {
    return y1(i, e, r);
  }
}, Na = {
  /**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */
  render: Wn,
  /**
   * KaTeX error, usually during parsing.
   */
  ParseError: I
}, w1 = function(e, t, r) {
  for (var n = r, i = 0, s = e.length; n < t.length; ) {
    var u = t[n];
    if (i <= 0 && t.slice(n, n + s) === e)
      return n;
    u === "\\" ? n++ : u === "{" ? i++ : u === "}" && i--, n++;
  }
  return -1;
}, k1 = function(e) {
  return e.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}, D1 = /^\\begin{/, A1 = function(e, t) {
  for (var r, n = [], i = new RegExp("(" + t.map((m) => k1(m.left)).join("|") + ")"); r = e.search(i), r !== -1; ) {
    r > 0 && (n.push({
      type: "text",
      data: e.slice(0, r)
    }), e = e.slice(r));
    var s = t.findIndex((m) => e.startsWith(m.left));
    if (r = w1(t[s].right, e, t[s].left.length), r === -1)
      break;
    var u = e.slice(0, r + t[s].right.length), c = D1.test(u) ? u : e.slice(t[s].left.length, r);
    n.push({
      type: "math",
      data: c,
      rawData: u,
      display: t[s].display
    }), e = e.slice(r + t[s].right.length);
  }
  return e !== "" && n.push({
    type: "text",
    data: e
  }), n;
}, S1 = function(e, t) {
  var r = A1(e, t.delimiters);
  if (r.length === 1 && r[0].type === "text")
    return null;
  for (var n = document.createDocumentFragment(), i = 0; i < r.length; i++)
    if (r[i].type === "text")
      n.appendChild(document.createTextNode(r[i].data));
    else {
      var s = document.createElement("span"), u = r[i].data;
      t.displayMode = r[i].display;
      try {
        t.preProcess && (u = t.preProcess(u)), Na.render(u, s, t);
      } catch (c) {
        if (!(c instanceof Na.ParseError))
          throw c;
        t.errorCallback("KaTeX auto-render: Failed to parse `" + r[i].data + "` with ", c), n.appendChild(document.createTextNode(r[i].rawData));
        continue;
      }
      n.appendChild(s);
    }
  return n;
}, F1 = function a(e, t) {
  for (var r = 0; r < e.childNodes.length; r++) {
    var n = e.childNodes[r];
    if (n.nodeType === 3) {
      for (var i = n.textContent, s = n.nextSibling, u = 0; s && s.nodeType === Node.TEXT_NODE; )
        i += s.textContent, s = s.nextSibling, u++;
      var c = S1(i, t);
      if (c) {
        for (var m = 0; m < u; m++)
          n.nextSibling.remove();
        r += c.childNodes.length - 1, e.replaceChild(c, n);
      } else
        r += u;
    } else n.nodeType === 1 && function() {
      var p = " " + n.className + " ", g = t.ignoredTags.indexOf(n.nodeName.toLowerCase()) === -1 && t.ignoredClasses.every((x) => p.indexOf(" " + x + " ") === -1);
      g && a(n, t);
    }();
  }
}, E1 = function(e, t) {
  if (!e)
    throw new Error("No element provided to render");
  var r = {};
  for (var n in t)
    t.hasOwnProperty(n) && (r[n] = t[n]);
  r.delimiters = r.delimiters || [
    {
      left: "$$",
      right: "$$",
      display: !0
    },
    {
      left: "\\(",
      right: "\\)",
      display: !1
    },
    // LaTeX uses $…$, but it ruins the display of normal `$` in text:
    // {left: "$", right: "$", display: false},
    // $ must come after $$
    // Render AMS environments even if outside $$…$$ delimiters.
    {
      left: "\\begin{equation}",
      right: "\\end{equation}",
      display: !0
    },
    {
      left: "\\begin{align}",
      right: "\\end{align}",
      display: !0
    },
    {
      left: "\\begin{alignat}",
      right: "\\end{alignat}",
      display: !0
    },
    {
      left: "\\begin{gather}",
      right: "\\end{gather}",
      display: !0
    },
    {
      left: "\\begin{CD}",
      right: "\\end{CD}",
      display: !0
    },
    {
      left: "\\[",
      right: "\\]",
      display: !0
    }
  ], r.ignoredTags = r.ignoredTags || ["script", "noscript", "style", "textarea", "pre", "code", "option"], r.ignoredClasses = r.ignoredClasses || [], r.errorCallback = r.errorCallback || console.error, r.macros = r.macros || {}, F1(e, r);
};
const or = (a) => JSON.parse(JSON.stringify(a)), C1 = (a) => a.nodeType === 1, T1 = (a) => Z1.has(a.tagName), M1 = (a) => "action" in a, z1 = (a) => a.tagName === "IFRAME", B1 = (a) => "formAction" in a, R1 = (a) => "protocol" in a, Q0 = /* @__PURE__ */ (() => {
  const a = /^(?:\w+script|data):/i;
  return (e) => a.test(e);
})(), I1 = /* @__PURE__ */ (() => {
  const a = /(?:script|data):/i;
  return (e) => a.test(e);
})(), N1 = (a) => {
  const e = {};
  for (let t = 0, r = a.length; t < r; t++) {
    const n = a[t];
    for (const i in n)
      e[i] ? e[i] = e[i].concat(n[i]) : e[i] = n[i];
  }
  return e;
}, Xn = (a, e) => {
  let t = a.firstChild;
  for (; t; ) {
    const r = t.nextSibling;
    C1(t) && (e(t, a), t.parentNode && Xn(t, e)), t = r;
  }
}, L1 = (a, e) => {
  const t = document.createNodeIterator(a, NodeFilter.SHOW_ELEMENT);
  let r;
  for (; r = t.nextNode(); ) {
    const n = r.parentNode;
    n && e(r, n);
  }
}, O1 = (a, e) => !!globalThis.document && !!globalThis.document.createNodeIterator ? L1(a, e) : Xn(a, e), Yn = ["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "bgsound", "big", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "datalist", "dd", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "keygen", "label", "layer", "legend", "li", "link", "listing", "main", "map", "mark", "marquee", "menu", "meta", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "popup", "pre", "progress", "q", "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "section", "select", "selectmenu", "small", "source", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"], q1 = [
  "basefont",
  "command",
  "data",
  "iframe",
  "image",
  "plaintext",
  "portal",
  "slot",
  // 'template', //TODO: Not exactly correct to never allow this, too strict
  "textarea",
  "title",
  "xmp"
], P1 = /* @__PURE__ */ new Set([...Yn, ...q1]), Zn = [
  "svg",
  "a",
  "altglyph",
  "altglyphdef",
  "altglyphitem",
  "animatecolor",
  "animatemotion",
  "animatetransform",
  "circle",
  "clippath",
  "defs",
  "desc",
  "ellipse",
  "filter",
  "font",
  "g",
  "glyph",
  "glyphref",
  "hkern",
  "image",
  "line",
  "lineargradient",
  "marker",
  "mask",
  "metadata",
  "mpath",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialgradient",
  "rect",
  "stop",
  "style",
  "switch",
  "symbol",
  "text",
  "textpath",
  "title",
  "tref",
  "tspan",
  "view",
  "vkern",
  /* FILTERS */
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence"
], H1 = ["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"], $1 = /* @__PURE__ */ new Set([...Zn, ...H1]), Kn = ["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"], _1 = ["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"], G1 = /* @__PURE__ */ new Set([...Kn, ..._1]), U1 = ["abbr", "accept", "accept-charset", "accesskey", "action", "align", "alink", "allow", "allowfullscreen", "alt", "anchor", "archive", "as", "async", "autocapitalize", "autocomplete", "autocorrect", "autofocus", "autopictureinpicture", "autoplay", "axis", "background", "behavior", "bgcolor", "border", "bordercolor", "capture", "cellpadding", "cellspacing", "challenge", "char", "charoff", "charset", "checked", "cite", "class", "classid", "clear", "code", "codebase", "codetype", "color", "cols", "colspan", "compact", "content", "contenteditable", "controls", "controlslist", "conversiondestination", "coords", "crossorigin", "csp", "data", "datetime", "declare", "decoding", "default", "defer", "dir", "direction", "dirname", "disabled", "disablepictureinpicture", "disableremoteplayback", "disallowdocumentaccess", "download", "draggable", "elementtiming", "enctype", "end", "enterkeyhint", "event", "exportparts", "face", "for", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "frame", "frameborder", "headers", "height", "hidden", "high", "href", "hreflang", "hreftranslate", "hspace", "http-equiv", "id", "imagesizes", "imagesrcset", "importance", "impressiondata", "impressionexpiry", "incremental", "inert", "inputmode", "integrity", "invisible", "ismap", "keytype", "kind", "label", "lang", "language", "latencyhint", "leftmargin", "link", "list", "loading", "longdesc", "loop", "low", "lowsrc", "manifest", "marginheight", "marginwidth", "max", "maxlength", "mayscript", "media", "method", "min", "minlength", "multiple", "muted", "name", "nohref", "nomodule", "nonce", "noresize", "noshade", "novalidate", "nowrap", "object", "open", "optimum", "part", "pattern", "ping", "placeholder", "playsinline", "policy", "poster", "preload", "pseudo", "readonly", "referrerpolicy", "rel", "reportingorigin", "required", "resources", "rev", "reversed", "role", "rows", "rowspan", "rules", "sandbox", "scheme", "scope", "scopes", "scrollamount", "scrolldelay", "scrolling", "select", "selected", "shadowroot", "shadowrootdelegatesfocus", "shape", "size", "sizes", "slot", "span", "spellcheck", "src", "srclang", "srcset", "standby", "start", "step", "style", "summary", "tabindex", "target", "text", "title", "topmargin", "translate", "truespeed", "trusttoken", "type", "usemap", "valign", "value", "valuetype", "version", "virtualkeyboardpolicy", "vlink", "vspace", "webkitdirectory", "width", "wrap"], V1 = ["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dominant-baseline", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"], j1 = ["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"], Le = {
  HTML: "http://www.w3.org/1999/xhtml",
  SVG: "http://www.w3.org/2000/svg",
  MATH: "http://www.w3.org/1998/Math/MathML"
}, W1 = {
  [Le.HTML]: P1,
  [Le.SVG]: $1,
  [Le.MATH]: G1
}, X1 = {
  [Le.HTML]: "html",
  [Le.SVG]: "svg",
  [Le.MATH]: "math"
}, Y1 = {
  [Le.HTML]: "",
  [Le.SVG]: "svg:",
  [Le.MATH]: "math:"
}, Z1 = /* @__PURE__ */ new Set(["A", "AREA", "BUTTON", "FORM", "IFRAME", "INPUT"]), Jn = {
  allowComments: !0,
  allowCustomElements: !1,
  allowUnknownMarkup: !1,
  allowElements: [...Yn, ...Zn.map((a) => `svg:${a}`), ...Kn.map((a) => `math:${a}`)],
  allowAttributes: N1([Object.fromEntries(U1.map((a) => [a, ["*"]])), Object.fromEntries(V1.map((a) => [a, ["svg:*"]])), Object.fromEntries(j1.map((a) => [a, ["math:*"]]))])
};
var Xt = function(a, e, t, r, n) {
  if (r === "m") throw new TypeError("Private method is not writable");
  if (r === "a" && !n) throw new TypeError("Private accessor was defined without a setter");
  if (typeof e == "function" ? a !== e || !n : !e.has(a)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return r === "a" ? n.call(a, t) : n ? n.value = t : e.set(a, t), t;
}, p0 = function(a, e, t, r) {
  if (t === "a" && !r) throw new TypeError("Private accessor was defined without a getter");
  if (typeof e == "function" ? a !== e || !r : !e.has(a)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return t === "m" ? r : t === "a" ? r.call(a) : r ? r.value : e.get(a);
}, r0, it, st;
class Qn {
  /* CONSTRUCTOR */
  constructor(e = {}) {
    r0.set(this, void 0), it.set(this, void 0), st.set(this, void 0), this.getConfiguration = () => or(p0(this, r0, "f")), this.sanitize = (p) => {
      const g = p0(this, it, "f"), x = p0(this, st, "f");
      return O1(p, (b, T) => {
        const S = b.namespaceURI || Le.HTML, C = T.namespaceURI || Le.HTML, M = W1[S], w = X1[S], k = Y1[S], A = b.tagName.toLowerCase(), E = `${k}${A}`, B = `${k}*`;
        if (!M.has(A) || !g.has(E) || S !== C && A !== w)
          T.removeChild(b);
        else {
          const O = b.getAttributeNames(), N = O.length;
          if (N) {
            for (let U = 0; U < N; U++) {
              const j = O[U], X = x[j];
              (!X || !X.has(B) && !X.has(E)) && b.removeAttribute(j);
            }
            if (T1(b))
              if (R1(b)) {
                const U = b.getAttribute("href");
                U && I1(U) && Q0(b.protocol) && b.removeAttribute("href");
              } else M1(b) ? Q0(b.action) && b.removeAttribute("action") : B1(b) ? Q0(b.formAction) && b.removeAttribute("formaction") : z1(b) && (Q0(b.src) && b.removeAttribute("formaction"), b.setAttribute("sandbox", "allow-scripts"));
          }
        }
      }), p;
    }, this.sanitizeFor = (p, g) => {
      throw new Error('"sanitizeFor" is not implemented yet');
    };
    const {
      allowComments: t,
      allowCustomElements: r,
      allowUnknownMarkup: n,
      blockElements: i,
      dropElements: s,
      dropAttributes: u
    } = e;
    if (t === !1) throw new Error('A false "allowComments" is not supported yet');
    if (r) throw new Error('A true "allowCustomElements" is not supported yet');
    if (n) throw new Error('A true "allowUnknownMarkup" is not supported yet');
    if (i) throw new Error('"blockElements" is not supported yet, use "allowElements" instead');
    if (s) throw new Error('"dropElements" is not supported yet, use "allowElements" instead');
    if (u) throw new Error('"dropAttributes" is not supported yet, use "allowAttributes" instead');
    Xt(this, r0, or(Jn), "f");
    const {
      allowElements: c,
      allowAttributes: m
    } = e;
    c && (p0(this, r0, "f").allowElements = e.allowElements), m && (p0(this, r0, "f").allowAttributes = e.allowAttributes), Xt(this, it, new Set(p0(this, r0, "f").allowElements), "f"), Xt(this, st, Object.fromEntries(Object.entries(p0(this, r0, "f").allowAttributes || {}).map(([p, g]) => [p, new Set(g)])), "f");
  }
}
r0 = /* @__PURE__ */ new WeakMap(), it = /* @__PURE__ */ new WeakMap(), st = /* @__PURE__ */ new WeakMap();
Qn.getDefaultConfiguration = () => or(Jn);
const K1 = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g, J1 = Object.hasOwnProperty;
class Cr {
  /**
   * Create a new slug class.
   */
  constructor() {
    this.occurrences, this.reset();
  }
  /**
   * Generate a unique slug.
  *
  * Tracks previously generated slugs: repeated calls with the same value
  * will result in different slugs.
  * Use the `slug` function to get same slugs.
   *
   * @param  {string} value
   *   String of text to slugify
   * @param  {boolean} [maintainCase=false]
   *   Keep the current case, otherwise make all lowercase
   * @return {string}
   *   A unique slug string
   */
  slug(e, t) {
    const r = this;
    let n = Q1(e, t === !0);
    const i = n;
    for (; J1.call(r.occurrences, n); )
      r.occurrences[i]++, n = i + "-" + r.occurrences[i];
    return r.occurrences[n] = 0, n;
  }
  /**
   * Reset - Forget all previous slugs
   *
   * @return void
   */
  reset() {
    this.occurrences = /* @__PURE__ */ Object.create(null);
  }
}
function Q1(a, e) {
  return typeof a != "string" ? "" : (e || (a = a.toLowerCase()), a.replace(K1, "").replace(/ /g, "-"));
}
function Tr() {
  return {
    async: !1,
    breaks: !1,
    extensions: null,
    gfm: !0,
    hooks: null,
    pedantic: !1,
    renderer: null,
    silent: !1,
    tokenizer: null,
    walkTokens: null
  };
}
let b0 = Tr();
function ei(a) {
  b0 = a;
}
const I0 = {
  exec: () => null
};
function Z(a, e = "") {
  let t = typeof a == "string" ? a : a.source;
  const r = {
    replace: (n, i) => {
      let s = typeof i == "string" ? i : i.source;
      return s = s.replace(ve.caret, "$1"), t = t.replace(n, s), r;
    },
    getRegex: () => new RegExp(t, e)
  };
  return r;
}
const ve = {
  codeRemoveIndent: /^(?: {1,4}| {0,3}\t)/gm,
  outputLinkReplace: /\\([\[\]])/g,
  indentCodeCompensation: /^(\s+)(?:```)/,
  beginningSpace: /^\s+/,
  endingHash: /#$/,
  startingSpaceChar: /^ /,
  endingSpaceChar: / $/,
  nonSpaceChar: /[^ ]/,
  newLineCharGlobal: /\n/g,
  tabCharGlobal: /\t/g,
  multipleSpaceGlobal: /\s+/g,
  blankLine: /^[ \t]*$/,
  doubleBlankLine: /\n[ \t]*\n[ \t]*$/,
  blockquoteStart: /^ {0,3}>/,
  blockquoteSetextReplace: /\n {0,3}((?:=+|-+) *)(?=\n|$)/g,
  blockquoteSetextReplace2: /^ {0,3}>[ \t]?/gm,
  listReplaceTabs: /^\t+/,
  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,
  listIsTask: /^\[[ xX]\] /,
  listReplaceTask: /^\[[ xX]\] +/,
  anyLine: /\n.*\n/,
  hrefBrackets: /^<(.*)>$/,
  tableDelimiter: /[:|]/,
  tableAlignChars: /^\||\| *$/g,
  tableRowBlankLine: /\n[ \t]*$/,
  tableAlignRight: /^ *-+: *$/,
  tableAlignCenter: /^ *:-+: *$/,
  tableAlignLeft: /^ *:-+ *$/,
  startATag: /^<a /i,
  endATag: /^<\/a>/i,
  startPreScriptTag: /^<(pre|code|kbd|script)(\s|>)/i,
  endPreScriptTag: /^<\/(pre|code|kbd|script)(\s|>)/i,
  startAngleBracket: /^</,
  endAngleBracket: />$/,
  pedanticHrefTitle: /^([^'"]*[^\s])\s+(['"])(.*)\2/,
  unicodeAlphaNumeric: /[\p{L}\p{N}]/u,
  escapeTest: /[&<>"']/,
  escapeReplace: /[&<>"']/g,
  escapeTestNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,
  escapeReplaceNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,
  unescapeTest: /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig,
  caret: /(^|[^\[])\^/g,
  percentDecode: /%25/g,
  findPipe: /\|/g,
  splitPipe: / \|/,
  slashPipe: /\\\|/g,
  carriageReturn: /\r\n|\r/g,
  spaceLine: /^ +$/gm,
  notSpaceStart: /^\S*/,
  endingNewline: /\n$/,
  listItemRegex: (a) => new RegExp(`^( {0,3}${a})((?:[	 ][^\\n]*)?(?:\\n|$))`),
  nextBulletRegex: (a) => new RegExp(`^ {0,${Math.min(3, a - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`),
  hrRegex: (a) => new RegExp(`^ {0,${Math.min(3, a - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),
  fencesBeginRegex: (a) => new RegExp(`^ {0,${Math.min(3, a - 1)}}(?:\`\`\`|~~~)`),
  headingBeginRegex: (a) => new RegExp(`^ {0,${Math.min(3, a - 1)}}#`),
  htmlBeginRegex: (a) => new RegExp(`^ {0,${Math.min(3, a - 1)}}<(?:[a-z].*>|!--)`, "i")
}, eu = /^(?:[ \t]*(?:\n|$))+/, tu = /^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/, ru = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/, H0 = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/, au = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/, Mr = /(?:[*+-]|\d{1,9}[.)])/, ti = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/, ri = Z(ti).replace(/bull/g, Mr).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/\|table/g, "").getRegex(), nu = Z(ti).replace(/bull/g, Mr).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/table/g, / {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex(), zr = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/, iu = /^[^\n]+/, Br = /(?!\s*\])(?:\\.|[^\[\]\\])+/, su = Z(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label", Br).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(), lu = Z(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, Mr).getRegex(), St = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul", Rr = /<!--(?:-?>|[\s\S]*?(?:-->|$))/, uu = Z("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$))", "i").replace("comment", Rr).replace("tag", St).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(), ai = Z(zr).replace("hr", H0).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", St).getRegex(), ou = Z(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", ai).getRegex(), Ir = {
  blockquote: ou,
  code: tu,
  def: su,
  fences: ru,
  heading: au,
  hr: H0,
  html: uu,
  lheading: ri,
  list: lu,
  newline: eu,
  paragraph: ai,
  table: I0,
  text: iu
}, La = Z("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr", H0).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", "(?: {4}| {0,3}	)[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", St).getRegex(), cu = {
  ...Ir,
  lheading: nu,
  table: La,
  paragraph: Z(zr).replace("hr", H0).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", La).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", St).getRegex()
}, hu = {
  ...Ir,
  html: Z(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", Rr).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: I0,
  // fences not supported
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: Z(zr).replace("hr", H0).replace("heading", ` *#{1,6} *[^
]`).replace("lheading", ri).replace("|table", "").replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex()
}, mu = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/, du = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/, ni = /^( {2,}|\\)\n(?!\s*$)/, pu = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/, Ft = /[\p{P}\p{S}]/u, Nr = /[\s\p{P}\p{S}]/u, ii = /[^\s\p{P}\p{S}]/u, fu = Z(/^((?![*_])punctSpace)/, "u").replace(/punctSpace/g, Nr).getRegex(), si = /(?!~)[\p{P}\p{S}]/u, gu = /(?!~)[\s\p{P}\p{S}]/u, vu = /(?:[^\s\p{P}\p{S}]|~)/u, bu = /\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g, li = /^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/, yu = Z(li, "u").replace(/punct/g, Ft).getRegex(), xu = Z(li, "u").replace(/punct/g, si).getRegex(), ui = "^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)", wu = Z(ui, "gu").replace(/notPunctSpace/g, ii).replace(/punctSpace/g, Nr).replace(/punct/g, Ft).getRegex(), ku = Z(ui, "gu").replace(/notPunctSpace/g, vu).replace(/punctSpace/g, gu).replace(/punct/g, si).getRegex(), Du = Z("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)", "gu").replace(/notPunctSpace/g, ii).replace(/punctSpace/g, Nr).replace(/punct/g, Ft).getRegex(), Au = Z(/\\(punct)/, "gu").replace(/punct/g, Ft).getRegex(), Su = Z(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(), Fu = Z(Rr).replace("(?:-->|$)", "-->").getRegex(), Eu = Z("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment", Fu).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(), dt = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/, Cu = Z(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label", dt).replace("href", /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(), oi = Z(/^!?\[(label)\]\[(ref)\]/).replace("label", dt).replace("ref", Br).getRegex(), ci = Z(/^!?\[(ref)\](?:\[\])?/).replace("ref", Br).getRegex(), Tu = Z("reflink|nolink(?!\\()", "g").replace("reflink", oi).replace("nolink", ci).getRegex(), Lr = {
  _backpedal: I0,
  // only used for GFM url
  anyPunctuation: Au,
  autolink: Su,
  blockSkip: bu,
  br: ni,
  code: du,
  del: I0,
  emStrongLDelim: yu,
  emStrongRDelimAst: wu,
  emStrongRDelimUnd: Du,
  escape: mu,
  link: Cu,
  nolink: ci,
  punctuation: fu,
  reflink: oi,
  reflinkSearch: Tu,
  tag: Eu,
  text: pu,
  url: I0
}, Mu = {
  ...Lr,
  link: Z(/^!?\[(label)\]\((.*?)\)/).replace("label", dt).getRegex(),
  reflink: Z(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", dt).getRegex()
}, cr = {
  ...Lr,
  emStrongRDelimAst: ku,
  emStrongLDelim: xu,
  url: Z(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, "i").replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
}, zu = {
  ...cr,
  br: Z(ni).replace("{2,}", "*").getRegex(),
  text: Z(cr.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
}, et = {
  normal: Ir,
  gfm: cu,
  pedantic: hu
}, C0 = {
  normal: Lr,
  gfm: cr,
  breaks: zu,
  pedantic: Mu
}, Bu = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
}, Oa = (a) => Bu[a];
function Pe(a, e) {
  if (e) {
    if (ve.escapeTest.test(a))
      return a.replace(ve.escapeReplace, Oa);
  } else if (ve.escapeTestNoEncode.test(a))
    return a.replace(ve.escapeReplaceNoEncode, Oa);
  return a;
}
function qa(a) {
  try {
    a = encodeURI(a).replace(ve.percentDecode, "%");
  } catch {
    return null;
  }
  return a;
}
function Pa(a, e) {
  var i;
  const t = a.replace(ve.findPipe, (s, u, c) => {
    let m = !1, p = u;
    for (; --p >= 0 && c[p] === "\\"; ) m = !m;
    return m ? "|" : " |";
  }), r = t.split(ve.splitPipe);
  let n = 0;
  if (r[0].trim() || r.shift(), r.length > 0 && !((i = r.at(-1)) != null && i.trim()) && r.pop(), e)
    if (r.length > e)
      r.splice(e);
    else
      for (; r.length < e; ) r.push("");
  for (; n < r.length; n++)
    r[n] = r[n].trim().replace(ve.slashPipe, "|");
  return r;
}
function T0(a, e, t) {
  const r = a.length;
  if (r === 0)
    return "";
  let n = 0;
  for (; n < r && a.charAt(r - n - 1) === e; )
    n++;
  return a.slice(0, r - n);
}
function Ru(a, e) {
  if (a.indexOf(e[1]) === -1)
    return -1;
  let t = 0;
  for (let r = 0; r < a.length; r++)
    if (a[r] === "\\")
      r++;
    else if (a[r] === e[0])
      t++;
    else if (a[r] === e[1] && (t--, t < 0))
      return r;
  return -1;
}
function Ha(a, e, t, r, n) {
  const i = e.href, s = e.title || null, u = a[1].replace(n.other.outputLinkReplace, "$1");
  if (a[0].charAt(0) !== "!") {
    r.state.inLink = !0;
    const c = {
      type: "link",
      raw: t,
      href: i,
      title: s,
      text: u,
      tokens: r.inlineTokens(u)
    };
    return r.state.inLink = !1, c;
  }
  return {
    type: "image",
    raw: t,
    href: i,
    title: s,
    text: u
  };
}
function Iu(a, e, t) {
  const r = a.match(t.other.indentCodeCompensation);
  if (r === null)
    return e;
  const n = r[1];
  return e.split(`
`).map((i) => {
    const s = i.match(t.other.beginningSpace);
    if (s === null)
      return i;
    const [u] = s;
    return u.length >= n.length ? i.slice(n.length) : i;
  }).join(`
`);
}
class pt {
  // set by the lexer
  constructor(e) {
    J(this, "options");
    J(this, "rules");
    // set by the lexer
    J(this, "lexer");
    this.options = e || b0;
  }
  space(e) {
    const t = this.rules.block.newline.exec(e);
    if (t && t[0].length > 0)
      return {
        type: "space",
        raw: t[0]
      };
  }
  code(e) {
    const t = this.rules.block.code.exec(e);
    if (t) {
      const r = t[0].replace(this.rules.other.codeRemoveIndent, "");
      return {
        type: "code",
        raw: t[0],
        codeBlockStyle: "indented",
        text: this.options.pedantic ? r : T0(r, `
`)
      };
    }
  }
  fences(e) {
    const t = this.rules.block.fences.exec(e);
    if (t) {
      const r = t[0], n = Iu(r, t[3] || "", this.rules);
      return {
        type: "code",
        raw: r,
        lang: t[2] ? t[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : t[2],
        text: n
      };
    }
  }
  heading(e) {
    const t = this.rules.block.heading.exec(e);
    if (t) {
      let r = t[2].trim();
      if (this.rules.other.endingHash.test(r)) {
        const n = T0(r, "#");
        (this.options.pedantic || !n || this.rules.other.endingSpaceChar.test(n)) && (r = n.trim());
      }
      return {
        type: "heading",
        raw: t[0],
        depth: t[1].length,
        text: r,
        tokens: this.lexer.inline(r)
      };
    }
  }
  hr(e) {
    const t = this.rules.block.hr.exec(e);
    if (t)
      return {
        type: "hr",
        raw: T0(t[0], `
`)
      };
  }
  blockquote(e) {
    const t = this.rules.block.blockquote.exec(e);
    if (t) {
      let r = T0(t[0], `
`).split(`
`), n = "", i = "";
      const s = [];
      for (; r.length > 0; ) {
        let u = !1;
        const c = [];
        let m;
        for (m = 0; m < r.length; m++)
          if (this.rules.other.blockquoteStart.test(r[m]))
            c.push(r[m]), u = !0;
          else if (!u)
            c.push(r[m]);
          else
            break;
        r = r.slice(m);
        const p = c.join(`
`), g = p.replace(this.rules.other.blockquoteSetextReplace, `
    $1`).replace(this.rules.other.blockquoteSetextReplace2, "");
        n = n ? `${n}
${p}` : p, i = i ? `${i}
${g}` : g;
        const x = this.lexer.state.top;
        if (this.lexer.state.top = !0, this.lexer.blockTokens(g, s, !0), this.lexer.state.top = x, r.length === 0)
          break;
        const b = s.at(-1);
        if ((b == null ? void 0 : b.type) === "code")
          break;
        if ((b == null ? void 0 : b.type) === "blockquote") {
          const T = b, S = T.raw + `
` + r.join(`
`), C = this.blockquote(S);
          s[s.length - 1] = C, n = n.substring(0, n.length - T.raw.length) + C.raw, i = i.substring(0, i.length - T.text.length) + C.text;
          break;
        } else if ((b == null ? void 0 : b.type) === "list") {
          const T = b, S = T.raw + `
` + r.join(`
`), C = this.list(S);
          s[s.length - 1] = C, n = n.substring(0, n.length - b.raw.length) + C.raw, i = i.substring(0, i.length - T.raw.length) + C.raw, r = S.substring(s.at(-1).raw.length).split(`
`);
          continue;
        }
      }
      return {
        type: "blockquote",
        raw: n,
        tokens: s,
        text: i
      };
    }
  }
  list(e) {
    let t = this.rules.block.list.exec(e);
    if (t) {
      let r = t[1].trim();
      const n = r.length > 1, i = {
        type: "list",
        raw: "",
        ordered: n,
        start: n ? +r.slice(0, -1) : "",
        loose: !1,
        items: []
      };
      r = n ? `\\d{1,9}\\${r.slice(-1)}` : `\\${r}`, this.options.pedantic && (r = n ? r : "[*+-]");
      const s = this.rules.other.listItemRegex(r);
      let u = !1;
      for (; e; ) {
        let m = !1, p = "", g = "";
        if (!(t = s.exec(e)) || this.rules.block.hr.test(e))
          break;
        p = t[0], e = e.substring(p.length);
        let x = t[2].split(`
`, 1)[0].replace(this.rules.other.listReplaceTabs, (w) => " ".repeat(3 * w.length)), b = e.split(`
`, 1)[0], T = !x.trim(), S = 0;
        if (this.options.pedantic ? (S = 2, g = x.trimStart()) : T ? S = t[1].length + 1 : (S = t[2].search(this.rules.other.nonSpaceChar), S = S > 4 ? 1 : S, g = x.slice(S), S += t[1].length), T && this.rules.other.blankLine.test(b) && (p += b + `
`, e = e.substring(b.length + 1), m = !0), !m) {
          const w = this.rules.other.nextBulletRegex(S), k = this.rules.other.hrRegex(S), A = this.rules.other.fencesBeginRegex(S), E = this.rules.other.headingBeginRegex(S), F = this.rules.other.htmlBeginRegex(S);
          for (; e; ) {
            const B = e.split(`
`, 1)[0];
            let O;
            if (b = B, this.options.pedantic ? (b = b.replace(this.rules.other.listReplaceNesting, "  "), O = b) : O = b.replace(this.rules.other.tabCharGlobal, "    "), A.test(b) || E.test(b) || F.test(b) || w.test(b) || k.test(b))
              break;
            if (O.search(this.rules.other.nonSpaceChar) >= S || !b.trim())
              g += `
` + O.slice(S);
            else {
              if (T || x.replace(this.rules.other.tabCharGlobal, "    ").search(this.rules.other.nonSpaceChar) >= 4 || A.test(x) || E.test(x) || k.test(x))
                break;
              g += `
` + b;
            }
            !T && !b.trim() && (T = !0), p += B + `
`, e = e.substring(B.length + 1), x = O.slice(S);
          }
        }
        i.loose || (u ? i.loose = !0 : this.rules.other.doubleBlankLine.test(p) && (u = !0));
        let C = null, M;
        this.options.gfm && (C = this.rules.other.listIsTask.exec(g), C && (M = C[0] !== "[ ] ", g = g.replace(this.rules.other.listReplaceTask, ""))), i.items.push({
          type: "list_item",
          raw: p,
          task: !!C,
          checked: M,
          loose: !1,
          text: g,
          tokens: []
        }), i.raw += p;
      }
      const c = i.items.at(-1);
      if (c)
        c.raw = c.raw.trimEnd(), c.text = c.text.trimEnd();
      else
        return;
      i.raw = i.raw.trimEnd();
      for (let m = 0; m < i.items.length; m++)
        if (this.lexer.state.top = !1, i.items[m].tokens = this.lexer.blockTokens(i.items[m].text, []), !i.loose) {
          const p = i.items[m].tokens.filter((x) => x.type === "space"), g = p.length > 0 && p.some((x) => this.rules.other.anyLine.test(x.raw));
          i.loose = g;
        }
      if (i.loose)
        for (let m = 0; m < i.items.length; m++)
          i.items[m].loose = !0;
      return i;
    }
  }
  html(e) {
    const t = this.rules.block.html.exec(e);
    if (t)
      return {
        type: "html",
        block: !0,
        raw: t[0],
        pre: t[1] === "pre" || t[1] === "script" || t[1] === "style",
        text: t[0]
      };
  }
  def(e) {
    const t = this.rules.block.def.exec(e);
    if (t) {
      const r = t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, " "), n = t[2] ? t[2].replace(this.rules.other.hrefBrackets, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "", i = t[3] ? t[3].substring(1, t[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : t[3];
      return {
        type: "def",
        tag: r,
        raw: t[0],
        href: n,
        title: i
      };
    }
  }
  table(e) {
    var u;
    const t = this.rules.block.table.exec(e);
    if (!t || !this.rules.other.tableDelimiter.test(t[2]))
      return;
    const r = Pa(t[1]), n = t[2].replace(this.rules.other.tableAlignChars, "").split("|"), i = (u = t[3]) != null && u.trim() ? t[3].replace(this.rules.other.tableRowBlankLine, "").split(`
`) : [], s = {
      type: "table",
      raw: t[0],
      header: [],
      align: [],
      rows: []
    };
    if (r.length === n.length) {
      for (const c of n)
        this.rules.other.tableAlignRight.test(c) ? s.align.push("right") : this.rules.other.tableAlignCenter.test(c) ? s.align.push("center") : this.rules.other.tableAlignLeft.test(c) ? s.align.push("left") : s.align.push(null);
      for (let c = 0; c < r.length; c++)
        s.header.push({
          text: r[c],
          tokens: this.lexer.inline(r[c]),
          header: !0,
          align: s.align[c]
        });
      for (const c of i)
        s.rows.push(Pa(c, s.header.length).map((m, p) => ({
          text: m,
          tokens: this.lexer.inline(m),
          header: !1,
          align: s.align[p]
        })));
      return s;
    }
  }
  lheading(e) {
    const t = this.rules.block.lheading.exec(e);
    if (t)
      return {
        type: "heading",
        raw: t[0],
        depth: t[2].charAt(0) === "=" ? 1 : 2,
        text: t[1],
        tokens: this.lexer.inline(t[1])
      };
  }
  paragraph(e) {
    const t = this.rules.block.paragraph.exec(e);
    if (t) {
      const r = t[1].charAt(t[1].length - 1) === `
` ? t[1].slice(0, -1) : t[1];
      return {
        type: "paragraph",
        raw: t[0],
        text: r,
        tokens: this.lexer.inline(r)
      };
    }
  }
  text(e) {
    const t = this.rules.block.text.exec(e);
    if (t)
      return {
        type: "text",
        raw: t[0],
        text: t[0],
        tokens: this.lexer.inline(t[0])
      };
  }
  escape(e) {
    const t = this.rules.inline.escape.exec(e);
    if (t)
      return {
        type: "escape",
        raw: t[0],
        text: t[1]
      };
  }
  tag(e) {
    const t = this.rules.inline.tag.exec(e);
    if (t)
      return !this.lexer.state.inLink && this.rules.other.startATag.test(t[0]) ? this.lexer.state.inLink = !0 : this.lexer.state.inLink && this.rules.other.endATag.test(t[0]) && (this.lexer.state.inLink = !1), !this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(t[0]) ? this.lexer.state.inRawBlock = !0 : this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(t[0]) && (this.lexer.state.inRawBlock = !1), {
        type: "html",
        raw: t[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        block: !1,
        text: t[0]
      };
  }
  link(e) {
    const t = this.rules.inline.link.exec(e);
    if (t) {
      const r = t[2].trim();
      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(r)) {
        if (!this.rules.other.endAngleBracket.test(r))
          return;
        const s = T0(r.slice(0, -1), "\\");
        if ((r.length - s.length) % 2 === 0)
          return;
      } else {
        const s = Ru(t[2], "()");
        if (s > -1) {
          const c = (t[0].indexOf("!") === 0 ? 5 : 4) + t[1].length + s;
          t[2] = t[2].substring(0, s), t[0] = t[0].substring(0, c).trim(), t[3] = "";
        }
      }
      let n = t[2], i = "";
      if (this.options.pedantic) {
        const s = this.rules.other.pedanticHrefTitle.exec(n);
        s && (n = s[1], i = s[3]);
      } else
        i = t[3] ? t[3].slice(1, -1) : "";
      return n = n.trim(), this.rules.other.startAngleBracket.test(n) && (this.options.pedantic && !this.rules.other.endAngleBracket.test(r) ? n = n.slice(1) : n = n.slice(1, -1)), Ha(t, {
        href: n && n.replace(this.rules.inline.anyPunctuation, "$1"),
        title: i && i.replace(this.rules.inline.anyPunctuation, "$1")
      }, t[0], this.lexer, this.rules);
    }
  }
  reflink(e, t) {
    let r;
    if ((r = this.rules.inline.reflink.exec(e)) || (r = this.rules.inline.nolink.exec(e))) {
      const n = (r[2] || r[1]).replace(this.rules.other.multipleSpaceGlobal, " "), i = t[n.toLowerCase()];
      if (!i) {
        const s = r[0].charAt(0);
        return {
          type: "text",
          raw: s,
          text: s
        };
      }
      return Ha(r, i, r[0], this.lexer, this.rules);
    }
  }
  emStrong(e, t, r = "") {
    let n = this.rules.inline.emStrongLDelim.exec(e);
    if (!n || n[3] && r.match(this.rules.other.unicodeAlphaNumeric)) return;
    if (!(n[1] || n[2] || "") || !r || this.rules.inline.punctuation.exec(r)) {
      const s = [...n[0]].length - 1;
      let u, c, m = s, p = 0;
      const g = n[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
      for (g.lastIndex = 0, t = t.slice(-1 * e.length + s); (n = g.exec(t)) != null; ) {
        if (u = n[1] || n[2] || n[3] || n[4] || n[5] || n[6], !u) continue;
        if (c = [...u].length, n[3] || n[4]) {
          m += c;
          continue;
        } else if ((n[5] || n[6]) && s % 3 && !((s + c) % 3)) {
          p += c;
          continue;
        }
        if (m -= c, m > 0) continue;
        c = Math.min(c, c + m + p);
        const x = [...n[0]][0].length, b = e.slice(0, s + n.index + x + c);
        if (Math.min(s, c) % 2) {
          const S = b.slice(1, -1);
          return {
            type: "em",
            raw: b,
            text: S,
            tokens: this.lexer.inlineTokens(S)
          };
        }
        const T = b.slice(2, -2);
        return {
          type: "strong",
          raw: b,
          text: T,
          tokens: this.lexer.inlineTokens(T)
        };
      }
    }
  }
  codespan(e) {
    const t = this.rules.inline.code.exec(e);
    if (t) {
      let r = t[2].replace(this.rules.other.newLineCharGlobal, " ");
      const n = this.rules.other.nonSpaceChar.test(r), i = this.rules.other.startingSpaceChar.test(r) && this.rules.other.endingSpaceChar.test(r);
      return n && i && (r = r.substring(1, r.length - 1)), {
        type: "codespan",
        raw: t[0],
        text: r
      };
    }
  }
  br(e) {
    const t = this.rules.inline.br.exec(e);
    if (t)
      return {
        type: "br",
        raw: t[0]
      };
  }
  del(e) {
    const t = this.rules.inline.del.exec(e);
    if (t)
      return {
        type: "del",
        raw: t[0],
        text: t[2],
        tokens: this.lexer.inlineTokens(t[2])
      };
  }
  autolink(e) {
    const t = this.rules.inline.autolink.exec(e);
    if (t) {
      let r, n;
      return t[2] === "@" ? (r = t[1], n = "mailto:" + r) : (r = t[1], n = r), {
        type: "link",
        raw: t[0],
        text: r,
        href: n,
        tokens: [{
          type: "text",
          raw: r,
          text: r
        }]
      };
    }
  }
  url(e) {
    var r;
    let t;
    if (t = this.rules.inline.url.exec(e)) {
      let n, i;
      if (t[2] === "@")
        n = t[0], i = "mailto:" + n;
      else {
        let s;
        do
          s = t[0], t[0] = ((r = this.rules.inline._backpedal.exec(t[0])) == null ? void 0 : r[0]) ?? "";
        while (s !== t[0]);
        n = t[0], t[1] === "www." ? i = "http://" + t[0] : i = t[0];
      }
      return {
        type: "link",
        raw: t[0],
        text: n,
        href: i,
        tokens: [{
          type: "text",
          raw: n,
          text: n
        }]
      };
    }
  }
  inlineText(e) {
    const t = this.rules.inline.text.exec(e);
    if (t) {
      const r = this.lexer.state.inRawBlock;
      return {
        type: "text",
        raw: t[0],
        text: t[0],
        escaped: r
      };
    }
  }
}
class Te {
  constructor(e) {
    J(this, "tokens");
    J(this, "options");
    J(this, "state");
    J(this, "tokenizer");
    J(this, "inlineQueue");
    this.tokens = [], this.tokens.links = /* @__PURE__ */ Object.create(null), this.options = e || b0, this.options.tokenizer = this.options.tokenizer || new pt(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = {
      inLink: !1,
      inRawBlock: !1,
      top: !0
    };
    const t = {
      other: ve,
      block: et.normal,
      inline: C0.normal
    };
    this.options.pedantic ? (t.block = et.pedantic, t.inline = C0.pedantic) : this.options.gfm && (t.block = et.gfm, this.options.breaks ? t.inline = C0.breaks : t.inline = C0.gfm), this.tokenizer.rules = t;
  }
  /**
   * Expose Rules
   */
  static get rules() {
    return {
      block: et,
      inline: C0
    };
  }
  /**
   * Static Lex Method
   */
  static lex(e, t) {
    return new Te(t).lex(e);
  }
  /**
   * Static Lex Inline Method
   */
  static lexInline(e, t) {
    return new Te(t).inlineTokens(e);
  }
  /**
   * Preprocessing
   */
  lex(e) {
    e = e.replace(ve.carriageReturn, `
`), this.blockTokens(e, this.tokens);
    for (let t = 0; t < this.inlineQueue.length; t++) {
      const r = this.inlineQueue[t];
      this.inlineTokens(r.src, r.tokens);
    }
    return this.inlineQueue = [], this.tokens;
  }
  blockTokens(e, t = [], r = !1) {
    var n, i, s;
    for (this.options.pedantic && (e = e.replace(ve.tabCharGlobal, "    ").replace(ve.spaceLine, "")); e; ) {
      let u;
      if ((i = (n = this.options.extensions) == null ? void 0 : n.block) != null && i.some((m) => (u = m.call({
        lexer: this
      }, e, t)) ? (e = e.substring(u.raw.length), t.push(u), !0) : !1))
        continue;
      if (u = this.tokenizer.space(e)) {
        e = e.substring(u.raw.length);
        const m = t.at(-1);
        u.raw.length === 1 && m !== void 0 ? m.raw += `
` : t.push(u);
        continue;
      }
      if (u = this.tokenizer.code(e)) {
        e = e.substring(u.raw.length);
        const m = t.at(-1);
        (m == null ? void 0 : m.type) === "paragraph" || (m == null ? void 0 : m.type) === "text" ? (m.raw += `
` + u.raw, m.text += `
` + u.text, this.inlineQueue.at(-1).src = m.text) : t.push(u);
        continue;
      }
      if (u = this.tokenizer.fences(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.heading(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.hr(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.blockquote(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.list(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.html(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.def(e)) {
        e = e.substring(u.raw.length);
        const m = t.at(-1);
        (m == null ? void 0 : m.type) === "paragraph" || (m == null ? void 0 : m.type) === "text" ? (m.raw += `
` + u.raw, m.text += `
` + u.raw, this.inlineQueue.at(-1).src = m.text) : this.tokens.links[u.tag] || (this.tokens.links[u.tag] = {
          href: u.href,
          title: u.title
        });
        continue;
      }
      if (u = this.tokenizer.table(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      if (u = this.tokenizer.lheading(e)) {
        e = e.substring(u.raw.length), t.push(u);
        continue;
      }
      let c = e;
      if ((s = this.options.extensions) != null && s.startBlock) {
        let m = 1 / 0;
        const p = e.slice(1);
        let g;
        this.options.extensions.startBlock.forEach((x) => {
          g = x.call({
            lexer: this
          }, p), typeof g == "number" && g >= 0 && (m = Math.min(m, g));
        }), m < 1 / 0 && m >= 0 && (c = e.substring(0, m + 1));
      }
      if (this.state.top && (u = this.tokenizer.paragraph(c))) {
        const m = t.at(-1);
        r && (m == null ? void 0 : m.type) === "paragraph" ? (m.raw += `
` + u.raw, m.text += `
` + u.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = m.text) : t.push(u), r = c.length !== e.length, e = e.substring(u.raw.length);
        continue;
      }
      if (u = this.tokenizer.text(e)) {
        e = e.substring(u.raw.length);
        const m = t.at(-1);
        (m == null ? void 0 : m.type) === "text" ? (m.raw += `
` + u.raw, m.text += `
` + u.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = m.text) : t.push(u);
        continue;
      }
      if (e) {
        const m = "Infinite loop on byte: " + e.charCodeAt(0);
        if (this.options.silent) {
          console.error(m);
          break;
        } else
          throw new Error(m);
      }
    }
    return this.state.top = !0, t;
  }
  inline(e, t = []) {
    return this.inlineQueue.push({
      src: e,
      tokens: t
    }), t;
  }
  /**
   * Lexing/Compiling
   */
  inlineTokens(e, t = []) {
    var u, c, m;
    let r = e, n = null;
    if (this.tokens.links) {
      const p = Object.keys(this.tokens.links);
      if (p.length > 0)
        for (; (n = this.tokenizer.rules.inline.reflinkSearch.exec(r)) != null; )
          p.includes(n[0].slice(n[0].lastIndexOf("[") + 1, -1)) && (r = r.slice(0, n.index) + "[" + "a".repeat(n[0].length - 2) + "]" + r.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
    }
    for (; (n = this.tokenizer.rules.inline.blockSkip.exec(r)) != null; )
      r = r.slice(0, n.index) + "[" + "a".repeat(n[0].length - 2) + "]" + r.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    for (; (n = this.tokenizer.rules.inline.anyPunctuation.exec(r)) != null; )
      r = r.slice(0, n.index) + "++" + r.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
    let i = !1, s = "";
    for (; e; ) {
      i || (s = ""), i = !1;
      let p;
      if ((c = (u = this.options.extensions) == null ? void 0 : u.inline) != null && c.some((x) => (p = x.call({
        lexer: this
      }, e, t)) ? (e = e.substring(p.raw.length), t.push(p), !0) : !1))
        continue;
      if (p = this.tokenizer.escape(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.tag(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.link(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.reflink(e, this.tokens.links)) {
        e = e.substring(p.raw.length);
        const x = t.at(-1);
        p.type === "text" && (x == null ? void 0 : x.type) === "text" ? (x.raw += p.raw, x.text += p.text) : t.push(p);
        continue;
      }
      if (p = this.tokenizer.emStrong(e, r, s)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.codespan(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.br(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.del(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (p = this.tokenizer.autolink(e)) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      if (!this.state.inLink && (p = this.tokenizer.url(e))) {
        e = e.substring(p.raw.length), t.push(p);
        continue;
      }
      let g = e;
      if ((m = this.options.extensions) != null && m.startInline) {
        let x = 1 / 0;
        const b = e.slice(1);
        let T;
        this.options.extensions.startInline.forEach((S) => {
          T = S.call({
            lexer: this
          }, b), typeof T == "number" && T >= 0 && (x = Math.min(x, T));
        }), x < 1 / 0 && x >= 0 && (g = e.substring(0, x + 1));
      }
      if (p = this.tokenizer.inlineText(g)) {
        e = e.substring(p.raw.length), p.raw.slice(-1) !== "_" && (s = p.raw.slice(-1)), i = !0;
        const x = t.at(-1);
        (x == null ? void 0 : x.type) === "text" ? (x.raw += p.raw, x.text += p.text) : t.push(p);
        continue;
      }
      if (e) {
        const x = "Infinite loop on byte: " + e.charCodeAt(0);
        if (this.options.silent) {
          console.error(x);
          break;
        } else
          throw new Error(x);
      }
    }
    return t;
  }
}
class ft {
  // set by the parser
  constructor(e) {
    J(this, "options");
    J(this, "parser");
    this.options = e || b0;
  }
  space(e) {
    return "";
  }
  code({
    text: e,
    lang: t,
    escaped: r
  }) {
    var s;
    const n = (s = (t || "").match(ve.notSpaceStart)) == null ? void 0 : s[0], i = e.replace(ve.endingNewline, "") + `
`;
    return n ? '<pre><code class="language-' + Pe(n) + '">' + (r ? i : Pe(i, !0)) + `</code></pre>
` : "<pre><code>" + (r ? i : Pe(i, !0)) + `</code></pre>
`;
  }
  blockquote({
    tokens: e
  }) {
    return `<blockquote>
${this.parser.parse(e)}</blockquote>
`;
  }
  html({
    text: e
  }) {
    return e;
  }
  heading({
    tokens: e,
    depth: t
  }) {
    return `<h${t}>${this.parser.parseInline(e)}</h${t}>
`;
  }
  hr(e) {
    return `<hr>
`;
  }
  list(e) {
    const t = e.ordered, r = e.start;
    let n = "";
    for (let u = 0; u < e.items.length; u++) {
      const c = e.items[u];
      n += this.listitem(c);
    }
    const i = t ? "ol" : "ul", s = t && r !== 1 ? ' start="' + r + '"' : "";
    return "<" + i + s + `>
` + n + "</" + i + `>
`;
  }
  listitem(e) {
    var r;
    let t = "";
    if (e.task) {
      const n = this.checkbox({
        checked: !!e.checked
      });
      e.loose ? ((r = e.tokens[0]) == null ? void 0 : r.type) === "paragraph" ? (e.tokens[0].text = n + " " + e.tokens[0].text, e.tokens[0].tokens && e.tokens[0].tokens.length > 0 && e.tokens[0].tokens[0].type === "text" && (e.tokens[0].tokens[0].text = n + " " + Pe(e.tokens[0].tokens[0].text), e.tokens[0].tokens[0].escaped = !0)) : e.tokens.unshift({
        type: "text",
        raw: n + " ",
        text: n + " ",
        escaped: !0
      }) : t += n + " ";
    }
    return t += this.parser.parse(e.tokens, !!e.loose), `<li>${t}</li>
`;
  }
  checkbox({
    checked: e
  }) {
    return "<input " + (e ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
  }
  paragraph({
    tokens: e
  }) {
    return `<p>${this.parser.parseInline(e)}</p>
`;
  }
  table(e) {
    let t = "", r = "";
    for (let i = 0; i < e.header.length; i++)
      r += this.tablecell(e.header[i]);
    t += this.tablerow({
      text: r
    });
    let n = "";
    for (let i = 0; i < e.rows.length; i++) {
      const s = e.rows[i];
      r = "";
      for (let u = 0; u < s.length; u++)
        r += this.tablecell(s[u]);
      n += this.tablerow({
        text: r
      });
    }
    return n && (n = `<tbody>${n}</tbody>`), `<table>
<thead>
` + t + `</thead>
` + n + `</table>
`;
  }
  tablerow({
    text: e
  }) {
    return `<tr>
${e}</tr>
`;
  }
  tablecell(e) {
    const t = this.parser.parseInline(e.tokens), r = e.header ? "th" : "td";
    return (e.align ? `<${r} align="${e.align}">` : `<${r}>`) + t + `</${r}>
`;
  }
  /**
   * span level renderer
   */
  strong({
    tokens: e
  }) {
    return `<strong>${this.parser.parseInline(e)}</strong>`;
  }
  em({
    tokens: e
  }) {
    return `<em>${this.parser.parseInline(e)}</em>`;
  }
  codespan({
    text: e
  }) {
    return `<code>${Pe(e, !0)}</code>`;
  }
  br(e) {
    return "<br>";
  }
  del({
    tokens: e
  }) {
    return `<del>${this.parser.parseInline(e)}</del>`;
  }
  link({
    href: e,
    title: t,
    tokens: r
  }) {
    const n = this.parser.parseInline(r), i = qa(e);
    if (i === null)
      return n;
    e = i;
    let s = '<a href="' + e + '"';
    return t && (s += ' title="' + Pe(t) + '"'), s += ">" + n + "</a>", s;
  }
  image({
    href: e,
    title: t,
    text: r
  }) {
    const n = qa(e);
    if (n === null)
      return Pe(r);
    e = n;
    let i = `<img src="${e}" alt="${r}"`;
    return t && (i += ` title="${Pe(t)}"`), i += ">", i;
  }
  text(e) {
    return "tokens" in e && e.tokens ? this.parser.parseInline(e.tokens) : "escaped" in e && e.escaped ? e.text : Pe(e.text);
  }
}
class Or {
  // no need for block level renderers
  strong({
    text: e
  }) {
    return e;
  }
  em({
    text: e
  }) {
    return e;
  }
  codespan({
    text: e
  }) {
    return e;
  }
  del({
    text: e
  }) {
    return e;
  }
  html({
    text: e
  }) {
    return e;
  }
  text({
    text: e
  }) {
    return e;
  }
  link({
    text: e
  }) {
    return "" + e;
  }
  image({
    text: e
  }) {
    return "" + e;
  }
  br() {
    return "";
  }
}
class Me {
  constructor(e) {
    J(this, "options");
    J(this, "renderer");
    J(this, "textRenderer");
    this.options = e || b0, this.options.renderer = this.options.renderer || new ft(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.renderer.parser = this, this.textRenderer = new Or();
  }
  /**
   * Static Parse Method
   */
  static parse(e, t) {
    return new Me(t).parse(e);
  }
  /**
   * Static Parse Inline Method
   */
  static parseInline(e, t) {
    return new Me(t).parseInline(e);
  }
  /**
   * Parse Loop
   */
  parse(e, t = !0) {
    var n, i;
    let r = "";
    for (let s = 0; s < e.length; s++) {
      const u = e[s];
      if ((i = (n = this.options.extensions) == null ? void 0 : n.renderers) != null && i[u.type]) {
        const m = u, p = this.options.extensions.renderers[m.type].call({
          parser: this
        }, m);
        if (p !== !1 || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(m.type)) {
          r += p || "";
          continue;
        }
      }
      const c = u;
      switch (c.type) {
        case "space": {
          r += this.renderer.space(c);
          continue;
        }
        case "hr": {
          r += this.renderer.hr(c);
          continue;
        }
        case "heading": {
          r += this.renderer.heading(c);
          continue;
        }
        case "code": {
          r += this.renderer.code(c);
          continue;
        }
        case "table": {
          r += this.renderer.table(c);
          continue;
        }
        case "blockquote": {
          r += this.renderer.blockquote(c);
          continue;
        }
        case "list": {
          r += this.renderer.list(c);
          continue;
        }
        case "html": {
          r += this.renderer.html(c);
          continue;
        }
        case "paragraph": {
          r += this.renderer.paragraph(c);
          continue;
        }
        case "text": {
          let m = c, p = this.renderer.text(m);
          for (; s + 1 < e.length && e[s + 1].type === "text"; )
            m = e[++s], p += `
` + this.renderer.text(m);
          t ? r += this.renderer.paragraph({
            type: "paragraph",
            raw: p,
            text: p,
            tokens: [{
              type: "text",
              raw: p,
              text: p,
              escaped: !0
            }]
          }) : r += p;
          continue;
        }
        default: {
          const m = 'Token with "' + c.type + '" type was not found.';
          if (this.options.silent)
            return console.error(m), "";
          throw new Error(m);
        }
      }
    }
    return r;
  }
  /**
   * Parse Inline Tokens
   */
  parseInline(e, t = this.renderer) {
    var n, i;
    let r = "";
    for (let s = 0; s < e.length; s++) {
      const u = e[s];
      if ((i = (n = this.options.extensions) == null ? void 0 : n.renderers) != null && i[u.type]) {
        const m = this.options.extensions.renderers[u.type].call({
          parser: this
        }, u);
        if (m !== !1 || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(u.type)) {
          r += m || "";
          continue;
        }
      }
      const c = u;
      switch (c.type) {
        case "escape": {
          r += t.text(c);
          break;
        }
        case "html": {
          r += t.html(c);
          break;
        }
        case "link": {
          r += t.link(c);
          break;
        }
        case "image": {
          r += t.image(c);
          break;
        }
        case "strong": {
          r += t.strong(c);
          break;
        }
        case "em": {
          r += t.em(c);
          break;
        }
        case "codespan": {
          r += t.codespan(c);
          break;
        }
        case "br": {
          r += t.br(c);
          break;
        }
        case "del": {
          r += t.del(c);
          break;
        }
        case "text": {
          r += t.text(c);
          break;
        }
        default: {
          const m = 'Token with "' + c.type + '" type was not found.';
          if (this.options.silent)
            return console.error(m), "";
          throw new Error(m);
        }
      }
    }
    return r;
  }
}
class N0 {
  constructor(e) {
    J(this, "options");
    J(this, "block");
    this.options = e || b0;
  }
  /**
   * Process markdown before marked
   */
  preprocess(e) {
    return e;
  }
  /**
   * Process HTML after marked is finished
   */
  postprocess(e) {
    return e;
  }
  /**
   * Process all tokens before walk tokens
   */
  processAllTokens(e) {
    return e;
  }
  /**
   * Provide function to tokenize markdown
   */
  provideLexer() {
    return this.block ? Te.lex : Te.lexInline;
  }
  /**
   * Provide function to parse tokens
   */
  provideParser() {
    return this.block ? Me.parse : Me.parseInline;
  }
}
J(N0, "passThroughHooks", /* @__PURE__ */ new Set(["preprocess", "postprocess", "processAllTokens"]));
class hi {
  constructor(...e) {
    J(this, "defaults", Tr());
    J(this, "options", this.setOptions);
    J(this, "parse", this.parseMarkdown(!0));
    J(this, "parseInline", this.parseMarkdown(!1));
    J(this, "Parser", Me);
    J(this, "Renderer", ft);
    J(this, "TextRenderer", Or);
    J(this, "Lexer", Te);
    J(this, "Tokenizer", pt);
    J(this, "Hooks", N0);
    this.use(...e);
  }
  /**
   * Run callback for every token
   */
  walkTokens(e, t) {
    var n, i;
    let r = [];
    for (const s of e)
      switch (r = r.concat(t.call(this, s)), s.type) {
        case "table": {
          const u = s;
          for (const c of u.header)
            r = r.concat(this.walkTokens(c.tokens, t));
          for (const c of u.rows)
            for (const m of c)
              r = r.concat(this.walkTokens(m.tokens, t));
          break;
        }
        case "list": {
          const u = s;
          r = r.concat(this.walkTokens(u.items, t));
          break;
        }
        default: {
          const u = s;
          (i = (n = this.defaults.extensions) == null ? void 0 : n.childTokens) != null && i[u.type] ? this.defaults.extensions.childTokens[u.type].forEach((c) => {
            const m = u[c].flat(1 / 0);
            r = r.concat(this.walkTokens(m, t));
          }) : u.tokens && (r = r.concat(this.walkTokens(u.tokens, t)));
        }
      }
    return r;
  }
  use(...e) {
    const t = this.defaults.extensions || {
      renderers: {},
      childTokens: {}
    };
    return e.forEach((r) => {
      const n = {
        ...r
      };
      if (n.async = this.defaults.async || n.async || !1, r.extensions && (r.extensions.forEach((i) => {
        if (!i.name)
          throw new Error("extension name required");
        if ("renderer" in i) {
          const s = t.renderers[i.name];
          s ? t.renderers[i.name] = function(...u) {
            let c = i.renderer.apply(this, u);
            return c === !1 && (c = s.apply(this, u)), c;
          } : t.renderers[i.name] = i.renderer;
        }
        if ("tokenizer" in i) {
          if (!i.level || i.level !== "block" && i.level !== "inline")
            throw new Error("extension level must be 'block' or 'inline'");
          const s = t[i.level];
          s ? s.unshift(i.tokenizer) : t[i.level] = [i.tokenizer], i.start && (i.level === "block" ? t.startBlock ? t.startBlock.push(i.start) : t.startBlock = [i.start] : i.level === "inline" && (t.startInline ? t.startInline.push(i.start) : t.startInline = [i.start]));
        }
        "childTokens" in i && i.childTokens && (t.childTokens[i.name] = i.childTokens);
      }), n.extensions = t), r.renderer) {
        const i = this.defaults.renderer || new ft(this.defaults);
        for (const s in r.renderer) {
          if (!(s in i))
            throw new Error(`renderer '${s}' does not exist`);
          if (["options", "parser"].includes(s))
            continue;
          const u = s, c = r.renderer[u], m = i[u];
          i[u] = (...p) => {
            let g = c.apply(i, p);
            return g === !1 && (g = m.apply(i, p)), g || "";
          };
        }
        n.renderer = i;
      }
      if (r.tokenizer) {
        const i = this.defaults.tokenizer || new pt(this.defaults);
        for (const s in r.tokenizer) {
          if (!(s in i))
            throw new Error(`tokenizer '${s}' does not exist`);
          if (["options", "rules", "lexer"].includes(s))
            continue;
          const u = s, c = r.tokenizer[u], m = i[u];
          i[u] = (...p) => {
            let g = c.apply(i, p);
            return g === !1 && (g = m.apply(i, p)), g;
          };
        }
        n.tokenizer = i;
      }
      if (r.hooks) {
        const i = this.defaults.hooks || new N0();
        for (const s in r.hooks) {
          if (!(s in i))
            throw new Error(`hook '${s}' does not exist`);
          if (["options", "block"].includes(s))
            continue;
          const u = s, c = r.hooks[u], m = i[u];
          N0.passThroughHooks.has(s) ? i[u] = (p) => {
            if (this.defaults.async)
              return Promise.resolve(c.call(i, p)).then((x) => m.call(i, x));
            const g = c.call(i, p);
            return m.call(i, g);
          } : i[u] = (...p) => {
            let g = c.apply(i, p);
            return g === !1 && (g = m.apply(i, p)), g;
          };
        }
        n.hooks = i;
      }
      if (r.walkTokens) {
        const i = this.defaults.walkTokens, s = r.walkTokens;
        n.walkTokens = function(u) {
          let c = [];
          return c.push(s.call(this, u)), i && (c = c.concat(i.call(this, u))), c;
        };
      }
      this.defaults = {
        ...this.defaults,
        ...n
      };
    }), this;
  }
  setOptions(e) {
    return this.defaults = {
      ...this.defaults,
      ...e
    }, this;
  }
  lexer(e, t) {
    return Te.lex(e, t ?? this.defaults);
  }
  parser(e, t) {
    return Me.parse(e, t ?? this.defaults);
  }
  parseMarkdown(e) {
    return (r, n) => {
      const i = {
        ...n
      }, s = {
        ...this.defaults,
        ...i
      }, u = this.onError(!!s.silent, !!s.async);
      if (this.defaults.async === !0 && i.async === !1)
        return u(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));
      if (typeof r > "u" || r === null)
        return u(new Error("marked(): input parameter is undefined or null"));
      if (typeof r != "string")
        return u(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(r) + ", string expected"));
      s.hooks && (s.hooks.options = s, s.hooks.block = e);
      const c = s.hooks ? s.hooks.provideLexer() : e ? Te.lex : Te.lexInline, m = s.hooks ? s.hooks.provideParser() : e ? Me.parse : Me.parseInline;
      if (s.async)
        return Promise.resolve(s.hooks ? s.hooks.preprocess(r) : r).then((p) => c(p, s)).then((p) => s.hooks ? s.hooks.processAllTokens(p) : p).then((p) => s.walkTokens ? Promise.all(this.walkTokens(p, s.walkTokens)).then(() => p) : p).then((p) => m(p, s)).then((p) => s.hooks ? s.hooks.postprocess(p) : p).catch(u);
      try {
        s.hooks && (r = s.hooks.preprocess(r));
        let p = c(r, s);
        s.hooks && (p = s.hooks.processAllTokens(p)), s.walkTokens && this.walkTokens(p, s.walkTokens);
        let g = m(p, s);
        return s.hooks && (g = s.hooks.postprocess(g)), g;
      } catch (p) {
        return u(p);
      }
    };
  }
  onError(e, t) {
    return (r) => {
      if (r.message += `
Please report this to https://github.com/markedjs/marked.`, e) {
        const n = "<p>An error occurred:</p><pre>" + Pe(r.message + "", !0) + "</pre>";
        return t ? Promise.resolve(n) : n;
      }
      if (t)
        return Promise.reject(r);
      throw r;
    };
  }
}
const g0 = new hi();
function K(a, e) {
  return g0.parse(a, e);
}
K.options = K.setOptions = function(a) {
  return g0.setOptions(a), K.defaults = g0.defaults, ei(K.defaults), K;
};
K.getDefaults = Tr;
K.defaults = b0;
K.use = function(...a) {
  return g0.use(...a), K.defaults = g0.defaults, ei(K.defaults), K;
};
K.walkTokens = function(a, e) {
  return g0.walkTokens(a, e);
};
K.parseInline = g0.parseInline;
K.Parser = Me;
K.parser = Me.parse;
K.Renderer = ft;
K.TextRenderer = Or;
K.Lexer = Te;
K.lexer = Te.lex;
K.Tokenizer = pt;
K.Hooks = N0;
K.parse = K;
K.options;
K.setOptions;
K.use;
K.walkTokens;
K.parseInline;
Me.parse;
Te.lex;
let mi = new Cr(), di = [];
const Nu = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function Lu(a) {
  return a.replace(Nu, (e, t) => (t = t.toLowerCase(), t === "colon" ? ":" : t.charAt(0) === "#" ? t.charAt(1) === "x" ? String.fromCharCode(parseInt(t.substring(2), 16)) : String.fromCharCode(+t.substring(1)) : ""));
}
function Ou({
  prefix: a = "",
  globalSlugs: e = !1
} = {}) {
  return {
    headerIds: !1,
    // prevent deprecation warning; remove this once headerIds option is removed
    hooks: {
      preprocess(t) {
        return e || qu(), t;
      }
    },
    useNewRenderer: !0,
    renderer: {
      heading({
        tokens: t,
        depth: r
      }) {
        const n = this.parser.parseInline(t), i = Lu(n).trim().replace(/<[!\/a-z].*?>/gi, ""), s = r, u = `${a}${mi.slug(i.toLowerCase())}`, c = {
          level: s,
          text: n,
          id: u,
          raw: i
        };
        return di.push(c), `<h${s} id="${u}">${n}</h${s}>
`;
      }
    }
  };
}
function qu() {
  di = [], mi = new Cr();
}
function Pu(a) {
  if (typeof a == "function" && (a = {
    highlight: a
  }), !a || typeof a.highlight != "function")
    throw new Error("Must provide highlight function");
  return typeof a.langPrefix != "string" && (a.langPrefix = "language-"), typeof a.emptyLangClass != "string" && (a.emptyLangClass = ""), {
    async: !!a.async,
    walkTokens(e) {
      if (e.type !== "code")
        return;
      const t = $a(e.lang);
      if (a.async)
        return Promise.resolve(a.highlight(e.text, t, e.lang || "")).then(_a(e));
      const r = a.highlight(e.text, t, e.lang || "");
      if (r instanceof Promise)
        throw new Error("markedHighlight is not set to async but the highlight function is async. Set the async option to true on markedHighlight to await the async highlight function.");
      _a(e)(r);
    },
    useNewRenderer: !0,
    renderer: {
      code(e, t, r) {
        typeof e == "object" && (r = e.escaped, t = e.lang, e = e.text);
        const n = $a(t), i = n ? a.langPrefix + Ua(n) : a.emptyLangClass, s = i ? ` class="${i}"` : "";
        return e = e.replace(/\n$/, ""), `<pre><code${s}>${r ? e : Ua(e, !0)}
</code></pre>`;
      }
    }
  };
}
function $a(a) {
  return (a || "").match(/\S*/)[0];
}
function _a(a) {
  return (e) => {
    typeof e == "string" && e !== a.text && (a.escaped = !0, a.text = e);
  };
}
const pi = /[&<>"']/, Hu = new RegExp(pi.source, "g"), fi = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, $u = new RegExp(fi.source, "g"), _u = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
}, Ga = (a) => _u[a];
function Ua(a, e) {
  if (e) {
    if (pi.test(a))
      return a.replace(Hu, Ga);
  } else if (fi.test(a))
    return a.replace($u, Ga);
  return a;
}
var gi = {
  exports: {}
};
(function(a) {
  var e = typeof window < "u" ? window : typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope ? self : {};
  /**
   * Prism: Lightweight, robust, elegant syntax highlighting
   *
   * @license MIT <https://opensource.org/licenses/MIT>
   * @author Lea Verou <https://lea.verou.me>
   * @namespace
   * @public
   */
  var t = function(r) {
    var n = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i, i = 0, s = {}, u = {
      /**
       * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
       * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
       * additional languages or plugins yourself.
       *
       * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
       *
       * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
       * empty Prism object into the global scope before loading the Prism script like this:
       *
       * ```js
       * window.Prism = window.Prism || {};
       * Prism.manual = true;
       * // add a new <script> to load Prism's script
       * ```
       *
       * @default false
       * @type {boolean}
       * @memberof Prism
       * @public
       */
      manual: r.Prism && r.Prism.manual,
      /**
       * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
       * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
       * own worker, you don't want it to do this.
       *
       * By setting this value to `true`, Prism will not add its own listeners to the worker.
       *
       * You obviously have to change this value before Prism executes. To do this, you can add an
       * empty Prism object into the global scope before loading the Prism script like this:
       *
       * ```js
       * window.Prism = window.Prism || {};
       * Prism.disableWorkerMessageHandler = true;
       * // Load Prism's script
       * ```
       *
       * @default false
       * @type {boolean}
       * @memberof Prism
       * @public
       */
      disableWorkerMessageHandler: r.Prism && r.Prism.disableWorkerMessageHandler,
      /**
       * A namespace for utility methods.
       *
       * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
       * change or disappear at any time.
       *
       * @namespace
       * @memberof Prism
       */
      util: {
        encode: function w(k) {
          return k instanceof c ? new c(k.type, w(k.content), k.alias) : Array.isArray(k) ? k.map(w) : k.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
        },
        /**
         * Returns the name of the type of the given value.
         *
         * @param {any} o
         * @returns {string}
         * @example
         * type(null)      === 'Null'
         * type(undefined) === 'Undefined'
         * type(123)       === 'Number'
         * type('foo')     === 'String'
         * type(true)      === 'Boolean'
         * type([1, 2])    === 'Array'
         * type({})        === 'Object'
         * type(String)    === 'Function'
         * type(/abc+/)    === 'RegExp'
         */
        type: function(w) {
          return Object.prototype.toString.call(w).slice(8, -1);
        },
        /**
         * Returns a unique number for the given object. Later calls will still return the same number.
         *
         * @param {Object} obj
         * @returns {number}
         */
        objId: function(w) {
          return w.__id || Object.defineProperty(w, "__id", {
            value: ++i
          }), w.__id;
        },
        /**
         * Creates a deep clone of the given object.
         *
         * The main intended use of this function is to clone language definitions.
         *
         * @param {T} o
         * @param {Record<number, any>} [visited]
         * @returns {T}
         * @template T
         */
        clone: function w(k, A) {
          A = A || {};
          var E, F;
          switch (u.util.type(k)) {
            case "Object":
              if (F = u.util.objId(k), A[F])
                return A[F];
              E = /** @type {Record<string, any>} */
              {}, A[F] = E;
              for (var B in k)
                k.hasOwnProperty(B) && (E[B] = w(k[B], A));
              return (
                /** @type {any} */
                E
              );
            case "Array":
              return F = u.util.objId(k), A[F] ? A[F] : (E = [], A[F] = E, /** @type {Array} */
              /** @type {any} */
              k.forEach(function(O, N) {
                E[N] = w(O, A);
              }), /** @type {any} */
              E);
            default:
              return k;
          }
        },
        /**
         * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
         *
         * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
         *
         * @param {Element} element
         * @returns {string}
         */
        getLanguage: function(w) {
          for (; w; ) {
            var k = n.exec(w.className);
            if (k)
              return k[1].toLowerCase();
            w = w.parentElement;
          }
          return "none";
        },
        /**
         * Sets the Prism `language-xxxx` class of the given element.
         *
         * @param {Element} element
         * @param {string} language
         * @returns {void}
         */
        setLanguage: function(w, k) {
          w.className = w.className.replace(RegExp(n, "gi"), ""), w.classList.add("language-" + k);
        },
        /**
         * Returns the script element that is currently executing.
         *
         * This does __not__ work for line script element.
         *
         * @returns {HTMLScriptElement | null}
         */
        currentScript: function() {
          if (typeof document > "u")
            return null;
          if ("currentScript" in document)
            return (
              /** @type {any} */
              document.currentScript
            );
          try {
            throw new Error();
          } catch (E) {
            var w = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(E.stack) || [])[1];
            if (w) {
              var k = document.getElementsByTagName("script");
              for (var A in k)
                if (k[A].src == w)
                  return k[A];
            }
            return null;
          }
        },
        /**
         * Returns whether a given class is active for `element`.
         *
         * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
         * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
         * given class is just the given class with a `no-` prefix.
         *
         * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
         * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
         * ancestors have the given class or the negated version of it, then the default activation will be returned.
         *
         * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
         * version of it, the class is considered active.
         *
         * @param {Element} element
         * @param {string} className
         * @param {boolean} [defaultActivation=false]
         * @returns {boolean}
         */
        isActive: function(w, k, A) {
          for (var E = "no-" + k; w; ) {
            var F = w.classList;
            if (F.contains(k))
              return !0;
            if (F.contains(E))
              return !1;
            w = w.parentElement;
          }
          return !!A;
        }
      },
      /**
       * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
       *
       * @namespace
       * @memberof Prism
       * @public
       */
      languages: {
        /**
         * The grammar for plain, unformatted text.
         */
        plain: s,
        plaintext: s,
        text: s,
        txt: s,
        /**
         * Creates a deep copy of the language with the given id and appends the given tokens.
         *
         * If a token in `redef` also appears in the copied language, then the existing token in the copied language
         * will be overwritten at its original position.
         *
         * ## Best practices
         *
         * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
         * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
         * understand the language definition because, normally, the order of tokens matters in Prism grammars.
         *
         * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
         * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
         *
         * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
         * @param {Grammar} redef The new tokens to append.
         * @returns {Grammar} The new language created.
         * @public
         * @example
         * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
         *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
         *     // at its original position
         *     'comment': { ... },
         *     // CSS doesn't have a 'color' token, so this token will be appended
         *     'color': /\b(?:red|green|blue)\b/
         * });
         */
        extend: function(w, k) {
          var A = u.util.clone(u.languages[w]);
          for (var E in k)
            A[E] = k[E];
          return A;
        },
        /**
         * Inserts tokens _before_ another token in a language definition or any other grammar.
         *
         * ## Usage
         *
         * This helper method makes it easy to modify existing languages. For example, the CSS language definition
         * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
         * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
         * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
         * this:
         *
         * ```js
         * Prism.languages.markup.style = {
         *     // token
         * };
         * ```
         *
         * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
         * before existing tokens. For the CSS example above, you would use it like this:
         *
         * ```js
         * Prism.languages.insertBefore('markup', 'cdata', {
         *     'style': {
         *         // token
         *     }
         * });
         * ```
         *
         * ## Special cases
         *
         * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
         * will be ignored.
         *
         * This behavior can be used to insert tokens after `before`:
         *
         * ```js
         * Prism.languages.insertBefore('markup', 'comment', {
         *     'comment': Prism.languages.markup.comment,
         *     // tokens after 'comment'
         * });
         * ```
         *
         * ## Limitations
         *
         * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
         * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
         * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
         * deleting properties which is necessary to insert at arbitrary positions.
         *
         * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
         * Instead, it will create a new object and replace all references to the target object with the new one. This
         * can be done without temporarily deleting properties, so the iteration order is well-defined.
         *
         * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
         * you hold the target object in a variable, then the value of the variable will not change.
         *
         * ```js
         * var oldMarkup = Prism.languages.markup;
         * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
         *
         * assert(oldMarkup !== Prism.languages.markup);
         * assert(newMarkup === Prism.languages.markup);
         * ```
         *
         * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
         * object to be modified.
         * @param {string} before The key to insert before.
         * @param {Grammar} insert An object containing the key-value pairs to be inserted.
         * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
         * object to be modified.
         *
         * Defaults to `Prism.languages`.
         * @returns {Grammar} The new grammar object.
         * @public
         */
        insertBefore: function(w, k, A, E) {
          E = E || /** @type {any} */
          u.languages;
          var F = E[w], B = {};
          for (var O in F)
            if (F.hasOwnProperty(O)) {
              if (O == k)
                for (var N in A)
                  A.hasOwnProperty(N) && (B[N] = A[N]);
              A.hasOwnProperty(O) || (B[O] = F[O]);
            }
          var U = E[w];
          return E[w] = B, u.languages.DFS(u.languages, function(j, X) {
            X === U && j != w && (this[j] = B);
          }), B;
        },
        // Traverse a language definition with Depth First Search
        DFS: function w(k, A, E, F) {
          F = F || {};
          var B = u.util.objId;
          for (var O in k)
            if (k.hasOwnProperty(O)) {
              A.call(k, O, k[O], E || O);
              var N = k[O], U = u.util.type(N);
              U === "Object" && !F[B(N)] ? (F[B(N)] = !0, w(N, A, null, F)) : U === "Array" && !F[B(N)] && (F[B(N)] = !0, w(N, A, O, F));
            }
        }
      },
      plugins: {},
      /**
       * This is the most high-level function in Prism’s API.
       * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
       * each one of them.
       *
       * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
       *
       * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
       * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
       * @memberof Prism
       * @public
       */
      highlightAll: function(w, k) {
        u.highlightAllUnder(document, w, k);
      },
      /**
       * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
       * {@link Prism.highlightElement} on each one of them.
       *
       * The following hooks will be run:
       * 1. `before-highlightall`
       * 2. `before-all-elements-highlight`
       * 3. All hooks of {@link Prism.highlightElement} for each element.
       *
       * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
       * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
       * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
       * @memberof Prism
       * @public
       */
      highlightAllUnder: function(w, k, A) {
        var E = {
          callback: A,
          container: w,
          selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
        };
        u.hooks.run("before-highlightall", E), E.elements = Array.prototype.slice.apply(E.container.querySelectorAll(E.selector)), u.hooks.run("before-all-elements-highlight", E);
        for (var F = 0, B; B = E.elements[F++]; )
          u.highlightElement(B, k === !0, E.callback);
      },
      /**
       * Highlights the code inside a single element.
       *
       * The following hooks will be run:
       * 1. `before-sanity-check`
       * 2. `before-highlight`
       * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
       * 4. `before-insert`
       * 5. `after-highlight`
       * 6. `complete`
       *
       * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
       * the element's language.
       *
       * @param {Element} element The element containing the code.
       * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
       * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
       * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
       * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
       *
       * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
       * asynchronous highlighting to work. You can build your own bundle on the
       * [Download page](https://prismjs.com/download.html).
       * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
       * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
       * @memberof Prism
       * @public
       */
      highlightElement: function(w, k, A) {
        var E = u.util.getLanguage(w), F = u.languages[E];
        u.util.setLanguage(w, E);
        var B = w.parentElement;
        B && B.nodeName.toLowerCase() === "pre" && u.util.setLanguage(B, E);
        var O = w.textContent, N = {
          element: w,
          language: E,
          grammar: F,
          code: O
        };
        function U(X) {
          N.highlightedCode = X, u.hooks.run("before-insert", N), N.element.innerHTML = N.highlightedCode, u.hooks.run("after-highlight", N), u.hooks.run("complete", N), A && A.call(N.element);
        }
        if (u.hooks.run("before-sanity-check", N), B = N.element.parentElement, B && B.nodeName.toLowerCase() === "pre" && !B.hasAttribute("tabindex") && B.setAttribute("tabindex", "0"), !N.code) {
          u.hooks.run("complete", N), A && A.call(N.element);
          return;
        }
        if (u.hooks.run("before-highlight", N), !N.grammar) {
          U(u.util.encode(N.code));
          return;
        }
        if (k && r.Worker) {
          var j = new Worker(u.filename);
          j.onmessage = function(X) {
            U(X.data);
          }, j.postMessage(JSON.stringify({
            language: N.language,
            code: N.code,
            immediateClose: !0
          }));
        } else
          U(u.highlight(N.code, N.grammar, N.language));
      },
      /**
       * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
       * and the language definitions to use, and returns a string with the HTML produced.
       *
       * The following hooks will be run:
       * 1. `before-tokenize`
       * 2. `after-tokenize`
       * 3. `wrap`: On each {@link Token}.
       *
       * @param {string} text A string with the code to be highlighted.
       * @param {Grammar} grammar An object containing the tokens to use.
       *
       * Usually a language definition like `Prism.languages.markup`.
       * @param {string} language The name of the language definition passed to `grammar`.
       * @returns {string} The highlighted HTML.
       * @memberof Prism
       * @public
       * @example
       * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
       */
      highlight: function(w, k, A) {
        var E = {
          code: w,
          grammar: k,
          language: A
        };
        if (u.hooks.run("before-tokenize", E), !E.grammar)
          throw new Error('The language "' + E.language + '" has no grammar.');
        return E.tokens = u.tokenize(E.code, E.grammar), u.hooks.run("after-tokenize", E), c.stringify(u.util.encode(E.tokens), E.language);
      },
      /**
       * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
       * and the language definitions to use, and returns an array with the tokenized code.
       *
       * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
       *
       * This method could be useful in other contexts as well, as a very crude parser.
       *
       * @param {string} text A string with the code to be highlighted.
       * @param {Grammar} grammar An object containing the tokens to use.
       *
       * Usually a language definition like `Prism.languages.markup`.
       * @returns {TokenStream} An array of strings and tokens, a token stream.
       * @memberof Prism
       * @public
       * @example
       * let code = `var foo = 0;`;
       * let tokens = Prism.tokenize(code, Prism.languages.javascript);
       * tokens.forEach(token => {
       *     if (token instanceof Prism.Token && token.type === 'number') {
       *         console.log(`Found numeric literal: ${token.content}`);
       *     }
       * });
       */
      tokenize: function(w, k) {
        var A = k.rest;
        if (A) {
          for (var E in A)
            k[E] = A[E];
          delete k.rest;
        }
        var F = new g();
        return x(F, F.head, w), p(w, F, k, F.head, 0), T(F);
      },
      /**
       * @namespace
       * @memberof Prism
       * @public
       */
      hooks: {
        all: {},
        /**
         * Adds the given callback to the list of callbacks for the given hook.
         *
         * The callback will be invoked when the hook it is registered for is run.
         * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
         *
         * One callback function can be registered to multiple hooks and the same hook multiple times.
         *
         * @param {string} name The name of the hook.
         * @param {HookCallback} callback The callback function which is given environment variables.
         * @public
         */
        add: function(w, k) {
          var A = u.hooks.all;
          A[w] = A[w] || [], A[w].push(k);
        },
        /**
         * Runs a hook invoking all registered callbacks with the given environment variables.
         *
         * Callbacks will be invoked synchronously and in the order in which they were registered.
         *
         * @param {string} name The name of the hook.
         * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
         * @public
         */
        run: function(w, k) {
          var A = u.hooks.all[w];
          if (!(!A || !A.length))
            for (var E = 0, F; F = A[E++]; )
              F(k);
        }
      },
      Token: c
    };
    r.Prism = u;
    function c(w, k, A, E) {
      this.type = w, this.content = k, this.alias = A, this.length = (E || "").length | 0;
    }
    c.stringify = function w(k, A) {
      if (typeof k == "string")
        return k;
      if (Array.isArray(k)) {
        var E = "";
        return k.forEach(function(U) {
          E += w(U, A);
        }), E;
      }
      var F = {
        type: k.type,
        content: w(k.content, A),
        tag: "span",
        classes: ["token", k.type],
        attributes: {},
        language: A
      }, B = k.alias;
      B && (Array.isArray(B) ? Array.prototype.push.apply(F.classes, B) : F.classes.push(B)), u.hooks.run("wrap", F);
      var O = "";
      for (var N in F.attributes)
        O += " " + N + '="' + (F.attributes[N] || "").replace(/"/g, "&quot;") + '"';
      return "<" + F.tag + ' class="' + F.classes.join(" ") + '"' + O + ">" + F.content + "</" + F.tag + ">";
    };
    function m(w, k, A, E) {
      w.lastIndex = k;
      var F = w.exec(A);
      if (F && E && F[1]) {
        var B = F[1].length;
        F.index += B, F[0] = F[0].slice(B);
      }
      return F;
    }
    function p(w, k, A, E, F, B) {
      for (var O in A)
        if (!(!A.hasOwnProperty(O) || !A[O])) {
          var N = A[O];
          N = Array.isArray(N) ? N : [N];
          for (var U = 0; U < N.length; ++U) {
            if (B && B.cause == O + "," + U)
              return;
            var j = N[U], X = j.inside, te = !!j.lookbehind, W = !!j.greedy, oe = j.alias;
            if (W && !j.pattern.global) {
              var ye = j.pattern.toString().match(/[imsuy]*$/)[0];
              j.pattern = RegExp(j.pattern.source, ye + "g");
            }
            for (var Se = j.pattern || j, re = E.next, de = F; re !== k.tail && !(B && de >= B.reach); de += re.value.length, re = re.next) {
              var me = re.value;
              if (k.length > w.length)
                return;
              if (!(me instanceof c)) {
                var pe = 1, ae;
                if (W) {
                  if (ae = m(Se, de, w, te), !ae || ae.index >= w.length)
                    break;
                  var c0 = ae.index, o0 = ae.index + ae[0].length, Fe = de;
                  for (Fe += re.value.length; c0 >= Fe; )
                    re = re.next, Fe += re.value.length;
                  if (Fe -= re.value.length, de = Fe, re.value instanceof c)
                    continue;
                  for (var Ee = re; Ee !== k.tail && (Fe < o0 || typeof Ee.value == "string"); Ee = Ee.next)
                    pe++, Fe += Ee.value.length;
                  pe--, me = w.slice(de, Fe), ae.index -= de;
                } else if (ae = m(Se, 0, me, te), !ae)
                  continue;
                var c0 = ae.index, Re = ae[0], qe = me.slice(0, c0), h0 = me.slice(c0 + Re.length), Qe = de + me.length;
                B && Qe > B.reach && (B.reach = Qe);
                var y0 = re.prev;
                qe && (y0 = x(k, y0, qe), de += qe.length), b(k, y0, pe);
                var Et = new c(O, X ? u.tokenize(Re, X) : Re, oe, Re);
                if (re = x(k, y0, Et), h0 && x(k, re, h0), pe > 1) {
                  var E0 = {
                    cause: O + "," + U,
                    reach: Qe
                  };
                  p(w, k, A, re.prev, de, E0), B && E0.reach > B.reach && (B.reach = E0.reach);
                }
              }
            }
          }
        }
    }
    function g() {
      var w = {
        value: null,
        prev: null,
        next: null
      }, k = {
        value: null,
        prev: w,
        next: null
      };
      w.next = k, this.head = w, this.tail = k, this.length = 0;
    }
    function x(w, k, A) {
      var E = k.next, F = {
        value: A,
        prev: k,
        next: E
      };
      return k.next = F, E.prev = F, w.length++, F;
    }
    function b(w, k, A) {
      for (var E = k.next, F = 0; F < A && E !== w.tail; F++)
        E = E.next;
      k.next = E, E.prev = k, w.length -= F;
    }
    function T(w) {
      for (var k = [], A = w.head.next; A !== w.tail; )
        k.push(A.value), A = A.next;
      return k;
    }
    if (!r.document)
      return r.addEventListener && (u.disableWorkerMessageHandler || r.addEventListener("message", function(w) {
        var k = JSON.parse(w.data), A = k.language, E = k.code, F = k.immediateClose;
        r.postMessage(u.highlight(E, u.languages[A], A)), F && r.close();
      }, !1)), u;
    var S = u.util.currentScript();
    S && (u.filename = S.src, S.hasAttribute("data-manual") && (u.manual = !0));
    function C() {
      u.manual || u.highlightAll();
    }
    if (!u.manual) {
      var M = document.readyState;
      M === "loading" || M === "interactive" && S && S.defer ? document.addEventListener("DOMContentLoaded", C) : window.requestAnimationFrame ? window.requestAnimationFrame(C) : window.setTimeout(C, 16);
    }
    return u;
  }(e);
  a.exports && (a.exports = t), typeof $r < "u" && ($r.Prism = t), t.languages.markup = {
    comment: {
      pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
      greedy: !0
    },
    prolog: {
      pattern: /<\?[\s\S]+?\?>/,
      greedy: !0
    },
    doctype: {
      // https://www.w3.org/TR/xml/#NT-doctypedecl
      pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
      greedy: !0,
      inside: {
        "internal-subset": {
          pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
          lookbehind: !0,
          greedy: !0,
          inside: null
          // see below
        },
        string: {
          pattern: /"[^"]*"|'[^']*'/,
          greedy: !0
        },
        punctuation: /^<!|>$|[[\]]/,
        "doctype-tag": /^DOCTYPE/i,
        name: /[^\s<>'"]+/
      }
    },
    cdata: {
      pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
      greedy: !0
    },
    tag: {
      pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
      greedy: !0,
      inside: {
        tag: {
          pattern: /^<\/?[^\s>\/]+/,
          inside: {
            punctuation: /^<\/?/,
            namespace: /^[^\s>\/:]+:/
          }
        },
        "special-attr": [],
        "attr-value": {
          pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
          inside: {
            punctuation: [{
              pattern: /^=/,
              alias: "attr-equals"
            }, {
              pattern: /^(\s*)["']|["']$/,
              lookbehind: !0
            }]
          }
        },
        punctuation: /\/?>/,
        "attr-name": {
          pattern: /[^\s>\/]+/,
          inside: {
            namespace: /^[^\s>\/:]+:/
          }
        }
      }
    },
    entity: [{
      pattern: /&[\da-z]{1,8};/i,
      alias: "named-entity"
    }, /&#x?[\da-f]{1,8};/i]
  }, t.languages.markup.tag.inside["attr-value"].inside.entity = t.languages.markup.entity, t.languages.markup.doctype.inside["internal-subset"].inside = t.languages.markup, t.hooks.add("wrap", function(r) {
    r.type === "entity" && (r.attributes.title = r.content.replace(/&amp;/, "&"));
  }), Object.defineProperty(t.languages.markup.tag, "addInlined", {
    /**
     * Adds an inlined language to markup.
     *
     * An example of an inlined language is CSS with `<style>` tags.
     *
     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
     * case insensitive.
     * @param {string} lang The language key.
     * @example
     * addInlined('style', 'css');
     */
    value: function(n, i) {
      var s = {};
      s["language-" + i] = {
        pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
        lookbehind: !0,
        inside: t.languages[i]
      }, s.cdata = /^<!\[CDATA\[|\]\]>$/i;
      var u = {
        "included-cdata": {
          pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
          inside: s
        }
      };
      u["language-" + i] = {
        pattern: /[\s\S]+/,
        inside: t.languages[i]
      };
      var c = {};
      c[n] = {
        pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
          return n;
        }), "i"),
        lookbehind: !0,
        greedy: !0,
        inside: u
      }, t.languages.insertBefore("markup", "cdata", c);
    }
  }), Object.defineProperty(t.languages.markup.tag, "addAttribute", {
    /**
     * Adds an pattern to highlight languages embedded in HTML attributes.
     *
     * An example of an inlined language is CSS with `style` attributes.
     *
     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
     * case insensitive.
     * @param {string} lang The language key.
     * @example
     * addAttribute('style', 'css');
     */
    value: function(r, n) {
      t.languages.markup.tag.inside["special-attr"].push({
        pattern: RegExp(/(^|["'\s])/.source + "(?:" + r + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, "i"),
        lookbehind: !0,
        inside: {
          "attr-name": /^[^\s=]+/,
          "attr-value": {
            pattern: /=[\s\S]+/,
            inside: {
              value: {
                pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                lookbehind: !0,
                alias: [n, "language-" + n],
                inside: t.languages[n]
              },
              punctuation: [{
                pattern: /^=/,
                alias: "attr-equals"
              }, /"|'/]
            }
          }
        }
      });
    }
  }), t.languages.html = t.languages.markup, t.languages.mathml = t.languages.markup, t.languages.svg = t.languages.markup, t.languages.xml = t.languages.extend("markup", {}), t.languages.ssml = t.languages.xml, t.languages.atom = t.languages.xml, t.languages.rss = t.languages.xml, function(r) {
    var n = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
    r.languages.css = {
      comment: /\/\*[\s\S]*?\*\//,
      atrule: {
        pattern: RegExp("@[\\w-](?:" + /[^;{\s"']|\s+(?!\s)/.source + "|" + n.source + ")*?" + /(?:;|(?=\s*\{))/.source),
        inside: {
          rule: /^@[\w-]+/,
          "selector-function-argument": {
            pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
            lookbehind: !0,
            alias: "selector"
          },
          keyword: {
            pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
            lookbehind: !0
          }
          // See rest below
        }
      },
      url: {
        // https://drafts.csswg.org/css-values-3/#urls
        pattern: RegExp("\\burl\\((?:" + n.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
        greedy: !0,
        inside: {
          function: /^url/i,
          punctuation: /^\(|\)$/,
          string: {
            pattern: RegExp("^" + n.source + "$"),
            alias: "url"
          }
        }
      },
      selector: {
        pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + n.source + ")*(?=\\s*\\{)"),
        lookbehind: !0
      },
      string: {
        pattern: n,
        greedy: !0
      },
      property: {
        pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
        lookbehind: !0
      },
      important: /!important\b/i,
      function: {
        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
        lookbehind: !0
      },
      punctuation: /[(){};:,]/
    }, r.languages.css.atrule.inside.rest = r.languages.css;
    var i = r.languages.markup;
    i && (i.tag.addInlined("style", "css"), i.tag.addAttribute("style", "css"));
  }(t), t.languages.clike = {
    comment: [{
      pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
      lookbehind: !0,
      greedy: !0
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: !0,
      greedy: !0
    }],
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: !0
    },
    "class-name": {
      pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
      lookbehind: !0,
      inside: {
        punctuation: /[.\\]/
      }
    },
    keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
    boolean: /\b(?:false|true)\b/,
    function: /\b\w+(?=\()/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    punctuation: /[{}[\];(),.:]/
  }, t.languages.javascript = t.languages.extend("clike", {
    "class-name": [t.languages.clike["class-name"], {
      pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
      lookbehind: !0
    }],
    keyword: [{
      pattern: /((?:^|\})\s*)catch\b/,
      lookbehind: !0
    }, {
      pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
      lookbehind: !0
    }],
    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
    function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    number: {
      pattern: RegExp(/(^|[^\w$])/.source + "(?:" + // constant
      (/NaN|Infinity/.source + "|" + // binary integer
      /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
      /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
      /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
      /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
      /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source),
      lookbehind: !0
    },
    operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
  }), t.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/, t.languages.insertBefore("javascript", "keyword", {
    regex: {
      pattern: RegExp(
        // lookbehind
        // eslint-disable-next-line regexp/no-dupe-characters-character-class
        /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source + // Regex pattern:
        // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
        // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
        // with the only syntax, so we have to define 2 different regex patterns.
        /\//.source + "(?:" + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + "|" + // `v` flag syntax. This supports 3 levels of nested character classes.
        /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ")" + // lookahead
        /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source
      ),
      lookbehind: !0,
      greedy: !0,
      inside: {
        "regex-source": {
          pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
          lookbehind: !0,
          alias: "language-regex",
          inside: t.languages.regex
        },
        "regex-delimiter": /^\/|\/$/,
        "regex-flags": /^[a-z]+$/
      }
    },
    // This must be declared before keyword because we use "function" inside the look-forward
    "function-variable": {
      pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
      alias: "function"
    },
    parameter: [{
      pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
      lookbehind: !0,
      inside: t.languages.javascript
    }, {
      pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
      lookbehind: !0,
      inside: t.languages.javascript
    }, {
      pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
      lookbehind: !0,
      inside: t.languages.javascript
    }, {
      pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
      lookbehind: !0,
      inside: t.languages.javascript
    }],
    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
  }), t.languages.insertBefore("javascript", "string", {
    hashbang: {
      pattern: /^#!.*/,
      greedy: !0,
      alias: "comment"
    },
    "template-string": {
      pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
      greedy: !0,
      inside: {
        "template-punctuation": {
          pattern: /^`|`$/,
          alias: "string"
        },
        interpolation: {
          pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
          lookbehind: !0,
          inside: {
            "interpolation-punctuation": {
              pattern: /^\$\{|\}$/,
              alias: "punctuation"
            },
            rest: t.languages.javascript
          }
        },
        string: /[\s\S]+/
      }
    },
    "string-property": {
      pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
      lookbehind: !0,
      greedy: !0,
      alias: "property"
    }
  }), t.languages.insertBefore("javascript", "operator", {
    "literal-property": {
      pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
      lookbehind: !0,
      alias: "property"
    }
  }), t.languages.markup && (t.languages.markup.tag.addInlined("script", "javascript"), t.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, "javascript")), t.languages.js = t.languages.javascript, function() {
    if (typeof t > "u" || typeof document > "u")
      return;
    Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);
    var r = "Loading…", n = function(S, C) {
      return "✖ Error " + S + " while fetching file: " + C;
    }, i = "✖ Error: File does not exist or is empty", s = {
      js: "javascript",
      py: "python",
      rb: "ruby",
      ps1: "powershell",
      psm1: "powershell",
      sh: "bash",
      bat: "batch",
      h: "c",
      tex: "latex"
    }, u = "data-src-status", c = "loading", m = "loaded", p = "failed", g = "pre[data-src]:not([" + u + '="' + m + '"]):not([' + u + '="' + c + '"])';
    function x(S, C, M) {
      var w = new XMLHttpRequest();
      w.open("GET", S, !0), w.onreadystatechange = function() {
        w.readyState == 4 && (w.status < 400 && w.responseText ? C(w.responseText) : w.status >= 400 ? M(n(w.status, w.statusText)) : M(i));
      }, w.send(null);
    }
    function b(S) {
      var C = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(S || "");
      if (C) {
        var M = Number(C[1]), w = C[2], k = C[3];
        return w ? k ? [M, Number(k)] : [M, void 0] : [M, M];
      }
    }
    t.hooks.add("before-highlightall", function(S) {
      S.selector += ", " + g;
    }), t.hooks.add("before-sanity-check", function(S) {
      var C = (
        /** @type {HTMLPreElement} */
        S.element
      );
      if (C.matches(g)) {
        S.code = "", C.setAttribute(u, c);
        var M = C.appendChild(document.createElement("CODE"));
        M.textContent = r;
        var w = C.getAttribute("data-src"), k = S.language;
        if (k === "none") {
          var A = (/\.(\w+)$/.exec(w) || [, "none"])[1];
          k = s[A] || A;
        }
        t.util.setLanguage(M, k), t.util.setLanguage(C, k);
        var E = t.plugins.autoloader;
        E && E.loadLanguages(k), x(w, function(F) {
          C.setAttribute(u, m);
          var B = b(C.getAttribute("data-range"));
          if (B) {
            var O = F.split(/\r\n?|\n/g), N = B[0], U = B[1] == null ? O.length : B[1];
            N < 0 && (N += O.length), N = Math.max(0, Math.min(N - 1, O.length)), U < 0 && (U += O.length), U = Math.max(0, Math.min(U, O.length)), F = O.slice(N, U).join(`
`), C.hasAttribute("data-start") || C.setAttribute("data-start", String(N + 1));
          }
          M.textContent = F, t.highlightElement(M);
        }, function(F) {
          C.setAttribute(u, p), M.textContent = F;
        });
      }
    }), t.plugins.fileHighlight = {
      /**
       * Executes the File Highlight plugin for all matching `pre` elements under the given container.
       *
       * Note: Elements which are already loaded or currently loading will not be touched by this method.
       *
       * @param {ParentNode} [container=document]
       */
      highlight: function(C) {
        for (var M = (C || document).querySelectorAll(g), w = 0, k; k = M[w++]; )
          t.highlightElement(k);
      }
    };
    var T = !1;
    t.fileHighlight = function() {
      T || (console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead."), T = !0), t.plugins.fileHighlight.highlight.apply(this, arguments);
    };
  }();
})(gi);
var Yt = gi.exports;
Prism.languages.python = {
  comment: {
    pattern: /(^|[^\\])#.*/,
    lookbehind: !0,
    greedy: !0
  },
  "string-interpolation": {
    pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
    greedy: !0,
    inside: {
      interpolation: {
        // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
        pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
        lookbehind: !0,
        inside: {
          "format-spec": {
            pattern: /(:)[^:(){}]+(?=\}$)/,
            lookbehind: !0
          },
          "conversion-option": {
            pattern: /![sra](?=[:}]$)/,
            alias: "punctuation"
          },
          rest: null
        }
      },
      string: /[\s\S]+/
    }
  },
  "triple-quoted-string": {
    pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
    greedy: !0,
    alias: "string"
  },
  string: {
    pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
    greedy: !0
  },
  function: {
    pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
    lookbehind: !0
  },
  "class-name": {
    pattern: /(\bclass\s+)\w+/i,
    lookbehind: !0
  },
  decorator: {
    pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
    lookbehind: !0,
    alias: ["annotation", "punctuation"],
    inside: {
      punctuation: /\./
    }
  },
  keyword: /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
  builtin: /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
  boolean: /\b(?:False|None|True)\b/,
  number: /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
  operator: /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
  punctuation: /[{}[\];(),.:]/
};
Prism.languages.python["string-interpolation"].inside.interpolation.inside.rest = Prism.languages.python;
Prism.languages.py = Prism.languages.python;
(function(a) {
  var e = /\\(?:[^a-z()[\]]|[a-z*]+)/i, t = {
    "equation-command": {
      pattern: e,
      alias: "regex"
    }
  };
  a.languages.latex = {
    comment: /%.*/,
    // the verbatim environment prints whitespace to the document
    cdata: {
      pattern: /(\\begin\{((?:lstlisting|verbatim)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
      lookbehind: !0
    },
    /*
     * equations can be between $$ $$ or $ $ or \( \) or \[ \]
     * (all are multiline)
     */
    equation: [{
      pattern: /\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,
      inside: t,
      alias: "string"
    }, {
      pattern: /(\\begin\{((?:align|eqnarray|equation|gather|math|multline)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
      lookbehind: !0,
      inside: t,
      alias: "string"
    }],
    /*
     * arguments which are keywords or references are highlighted
     * as keywords
     */
    keyword: {
      pattern: /(\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
      lookbehind: !0
    },
    url: {
      pattern: /(\\url\{)[^}]+(?=\})/,
      lookbehind: !0
    },
    /*
     * section or chapter headlines are highlighted as bold so that
     * they stand out more
     */
    headline: {
      pattern: /(\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
      lookbehind: !0,
      alias: "class-name"
    },
    function: {
      pattern: e,
      alias: "selector"
    },
    punctuation: /[[\]{}&]/
  }, a.languages.tex = a.languages.latex, a.languages.context = a.languages.latex;
})(Prism);
(function(a) {
  var e = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b", t = {
    pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
    lookbehind: !0,
    alias: "punctuation",
    // this looks reasonably well in all themes
    inside: null
    // see below
  }, r = {
    bash: t,
    environment: {
      pattern: RegExp("\\$" + e),
      alias: "constant"
    },
    variable: [
      // [0]: Arithmetic Environment
      {
        pattern: /\$?\(\([\s\S]+?\)\)/,
        greedy: !0,
        inside: {
          // If there is a $ sign at the beginning highlight $(( and )) as variable
          variable: [{
            pattern: /(^\$\(\([\s\S]+)\)\)/,
            lookbehind: !0
          }, /^\$\(\(/],
          number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
          operator: /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
          // If there is no $ sign at the beginning highlight (( and )) as punctuation
          punctuation: /\(\(?|\)\)?|,|;/
        }
      },
      // [1]: Command Substitution
      {
        pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
        greedy: !0,
        inside: {
          variable: /^\$\(|^`|\)$|`$/
        }
      },
      // [2]: Brace expansion
      {
        pattern: /\$\{[^}]+\}/,
        greedy: !0,
        inside: {
          operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
          punctuation: /[\[\]]/,
          environment: {
            pattern: RegExp("(\\{)" + e),
            lookbehind: !0,
            alias: "constant"
          }
        }
      },
      /\$(?:\w+|[#?*!@$])/
    ],
    // Escape sequences from echo and printf's manuals, and escaped quotes.
    entity: /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
  };
  a.languages.bash = {
    shebang: {
      pattern: /^#!\s*\/.*/,
      alias: "important"
    },
    comment: {
      pattern: /(^|[^"{\\$])#.*/,
      lookbehind: !0
    },
    "function-name": [
      // a) function foo {
      // b) foo() {
      // c) function foo() {
      // but not “foo {”
      {
        // a) and c)
        pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
        lookbehind: !0,
        alias: "function"
      },
      {
        // b)
        pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
        alias: "function"
      }
    ],
    // Highlight variable names as variables in for and select beginnings.
    "for-or-select": {
      pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
      alias: "variable",
      lookbehind: !0
    },
    // Highlight variable names as variables in the left-hand part
    // of assignments (“=” and “+=”).
    "assign-left": {
      pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
      inside: {
        environment: {
          pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + e),
          lookbehind: !0,
          alias: "constant"
        }
      },
      alias: "variable",
      lookbehind: !0
    },
    // Highlight parameter names as variables
    parameter: {
      pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
      alias: "variable",
      lookbehind: !0
    },
    string: [
      // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
      {
        pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
        lookbehind: !0,
        greedy: !0,
        inside: r
      },
      // Here-document with quotes around the tag
      // → No expansion (so no “inside”).
      {
        pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
        lookbehind: !0,
        greedy: !0,
        inside: {
          bash: t
        }
      },
      // “Normal” string
      {
        // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
        pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
        lookbehind: !0,
        greedy: !0,
        inside: r
      },
      {
        // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
        pattern: /(^|[^$\\])'[^']*'/,
        lookbehind: !0,
        greedy: !0
      },
      {
        // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
        pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
        greedy: !0,
        inside: {
          entity: r.entity
        }
      }
    ],
    environment: {
      pattern: RegExp("\\$?" + e),
      alias: "constant"
    },
    variable: r.variable,
    function: {
      pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
      lookbehind: !0
    },
    keyword: {
      pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
      lookbehind: !0
    },
    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
    builtin: {
      pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
      lookbehind: !0,
      // Alias added to make those easier to distinguish from strings.
      alias: "class-name"
    },
    boolean: {
      pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
      lookbehind: !0
    },
    "file-descriptor": {
      pattern: /\B&\d\b/,
      alias: "important"
    },
    operator: {
      // Lots of redirections here, but not just that.
      pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
      inside: {
        "file-descriptor": {
          pattern: /^\d/,
          alias: "important"
        }
      }
    },
    punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
    number: {
      pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
      lookbehind: !0
    }
  }, t.inside = a.languages.bash;
  for (var n = ["comment", "function-name", "for-or-select", "assign-left", "parameter", "string", "environment", "function", "keyword", "builtin", "boolean", "file-descriptor", "operator", "punctuation", "number"], i = r.variable[1].inside, s = 0; s < n.length; s++)
    i[n[s]] = a.languages.bash[n[s]];
  a.languages.sh = a.languages.bash, a.languages.shell = a.languages.bash;
})(Prism);
const Gu = '<svg class="md-link-icon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" fill="currentColor"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>', Uu = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15 15" color="currentColor" aria-hidden="true" aria-label="Copy" stroke-width="1.3" width="15" height="15">
  <path fill="currentColor" d="M12.728 4.545v8.182H4.545V4.545zm0 -0.909H4.545a0.909 0.909 0 0 0 -0.909 0.909v8.182a0.909 0.909 0 0 0 0.909 0.909h8.182a0.909 0.909 0 0 0 0.909 -0.909V4.545a0.909 0.909 0 0 0 -0.909 -0.909"/>
  <path fill="currentColor" d="M1.818 8.182H0.909V1.818a0.909 0.909 0 0 1 0.909 -0.909h6.364v0.909H1.818Z"/>
</svg>

`, Vu = `<svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17" aria-hidden="true" aria-label="Copied" fill="none" stroke="currentColor" stroke-width="1.3">
  <path d="m13.813 4.781 -7.438 7.438 -3.188 -3.188"/>
</svg>
`, Va = `<button title="copy" class="copy_code_button">
  <span class="copy-text">${Uu}</span>
  <span class="check">${Vu}</span>
</button>`, vi = /[&<>"']/, ju = new RegExp(vi.source, "g"), bi = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, Wu = new RegExp(bi.source, "g"), Xu = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
}, ja = (a) => Xu[a] || "";
function Zt(a, e) {
  if (e) {
    if (vi.test(a))
      return a.replace(ju, ja);
  } else if (bi.test(a))
    return a.replace(Wu, ja);
  return a;
}
function Yu(a) {
  const e = a.map((t) => ({
    start: new RegExp(t.left.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")),
    end: new RegExp(t.right.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"))
  }));
  return {
    name: "latex",
    level: "block",
    start(t) {
      for (const r of e) {
        const n = t.match(r.start);
        if (n)
          return n.index;
      }
      return -1;
    },
    tokenizer(t, r) {
      for (const n of e) {
        const i = new RegExp(`${n.start.source}([\\s\\S]+?)${n.end.source}`).exec(t);
        if (i)
          return {
            type: "latex",
            raw: i[0],
            text: i[1].trim()
          };
      }
    },
    renderer(t) {
      return `<div class="latex-block">${t.text}</div>`;
    }
  };
}
function qr(a, e, t) {
  a && (typeof e == "string" && a.nodeName === e || Array.isArray(e) && e.includes(a.nodeName) || typeof e == "function" && e(a)) && t(a);
  const r = (a == null ? void 0 : a.childNodes) || [];
  for (let n = 0; n < r.length; n++)
    qr(r[n], e, t);
}
function Zu(a) {
  try {
    const e = new DOMParser().parseFromString(a, "text/html");
    return qr(e.body, ["IMG"], (t) => {
      t instanceof HTMLImageElement && (t.width && !t.style.width && (t.style.width = er("width", t.width)), t.height && !t.style.height && (t.style.height = er("width", t.height)), t.style.maxWidth = t.style.maxWidth || "100%");
    }), e.body.innerHTML;
  } catch {
    return a;
  }
}
const Ku = {
  html({
    text: a
  }) {
    return Zu(a);
  },
  code({
    text: a,
    lang: e,
    escaped: t
  }) {
    var n;
    e = ((n = (e ?? "").match(/\S*/)) == null ? void 0 : n[0]) ?? "";
    const r = a.replace(/\n$/, "") + `
`;
    return e ? '<div class="code_wrap">' + Va + '<pre><code class="language-' + Zt(e) + '">' + (t ? r : Zt(r, !0)) + `</code></pre></div>
` : '<div class="code_wrap">' + Va + "<pre><code>" + (t ? r : Zt(r, !0)) + `</code></pre></div>
`;
  }
}, Ju = new Cr();
function Qu({
  header_links: a,
  line_breaks: e,
  latex_delimiters: t
}) {
  const r = new hi();
  r.use({
    gfm: !0,
    pedantic: !1,
    breaks: e
  }, Pu({
    highlight: (i, s) => {
      var u;
      return (u = Yt.languages) != null && u[s] ? Yt.highlight(i, Yt.languages[s], s) : i;
    }
  }), {
    renderer: Ku
  }), a && (r.use(Ou()), r.use({
    extensions: [{
      name: "heading",
      level: "block",
      renderer(i) {
        const s = i.raw.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi, ""), u = "h" + Ju.slug(s), c = i.depth, m = this.parser.parseInline(i.tokens);
        return `<h${c} id="${u}"><a class="md-header-anchor" href="#${u}">${Gu}</a>${m}</h${c}>
`;
      }
    }]
  }));
  const n = Yu(t);
  return r.use({
    extensions: [n]
  }), r;
}
function eo(a) {
  a.addEventListener("click", e);
  async function e(t) {
    const r = t.composedPath(), [n] = r.filter((i) => (i == null ? void 0 : i.tagName) === "BUTTON" && i.classList.contains("copy_code_button"));
    if (n) {
      let i = function(m) {
        m.style.opacity = "1", setTimeout(() => {
          m.style.opacity = "0";
        }, 2e3);
      };
      t.stopImmediatePropagation();
      const s = n.parentElement.innerText.trim(), u = Array.from(n.children)[1];
      await yi(s) && i(u);
    }
  }
  return () => {
    a.removeEventListener("click", e);
  };
}
async function yi(a) {
  let e = !1;
  if ("clipboard" in navigator)
    await navigator.clipboard.writeText(a), e = !0;
  else {
    const t = document.createElement("textarea");
    t.value = a, t.style.position = "absolute", t.style.left = "-999999px", document.body.prepend(t), t.select();
    try {
      document.execCommand("copy"), e = !0;
    } catch (r) {
      console.error(r), e = !1;
    } finally {
      t.remove();
    }
  }
  return e;
}
const to = (a, e) => {
  try {
    return !!a && new URL(a).origin !== new URL(e).origin;
  } catch {
    return !1;
  }
};
function ro(a, e) {
  const t = new Qn(), r = new DOMParser().parseFromString(a, "text/html");
  return qr(r.body, "A", (n) => {
    n instanceof HTMLElement && "target" in n && to(n.getAttribute("href"), e) && (n.setAttribute("target", "_blank"), n.setAttribute("rel", "noopener noreferrer"));
  }), t.sanitize(r).body.innerHTML;
}
function Wa(a) {
  return a.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
const so = ps(({
  slots: a,
  value: e,
  headerLinks: t,
  lineBreaks: r,
  latexDelimiters: n,
  sanitizeHtml: i,
  rtl: s,
  themeMode: u,
  showCopyButton: c,
  root: m,
  onChange: p,
  onCopy: g,
  copyButtons: x,
  children: b,
  ...T
}) => {
  const [S, C] = lt(""), [M, w] = lt(!1), k = B0(), A = ws(b, "copyButtons"), E = B0(null), F = B0(null), B = G0(p), O = hr(() => Qu({
    header_links: t ?? !1,
    line_breaks: r ?? !0,
    latex_delimiters: n || []
  }), [t, n, r]), N = G0((te) => {
    let W = te;
    const oe = [];
    return (n || []).forEach((ye, Se) => {
      const re = Wa(ye.left), de = Wa(ye.right), me = new RegExp(`${re}([\\s\\S]+?)${de}`, "g");
      W = W.replace(me, (pe, ae) => (oe.push(pe), `%%%LATEX_BLOCK_${oe.length - 1}%%%`));
    }), W = O.parse(W), W = W.replace(/%%%LATEX_BLOCK_(\d+)%%%/g, (ye, Se) => oe[parseInt(Se, 10)]), i && (W = ro(W, m)), W;
  }), U = G0((te) => {
    E.current && n && n.length > 0 && te && n.every((oe) => te.includes(oe.left) && te.includes(oe.right)) && E1(E.current, {
      delimiters: n,
      throwOnError: !1
    });
  }), j = G0(async () => {
    const te = e || "";
    await yi(te) && (g == null || g({
      value: te
    }), w(!0), k.current && clearTimeout(k.current), k.current = setTimeout(() => {
      w(!1);
    }, 1e3));
  }), X = () => A.length > 0 ? A.slice(0, 2).map((te, W) => M && W === 0 || !M && W === 1 ? null : /* @__PURE__ */ Ie.jsx(xs, {
    slot: te
  }, W)) : x ? x.slice(0, 2).map((te, W) => M && W === 0 || !M && W === 1 ? null : te) : /* @__PURE__ */ Ie.jsx("div", {
    className: "ms-gr-markdown-copy-icon",
    children: /* @__PURE__ */ Ie.jsx("button", {
      children: M ? /* @__PURE__ */ Ie.jsx(Ti, {}) : /* @__PURE__ */ Ie.jsx(Mi, {})
    })
  });
  return w0(() => {
    B();
  }, [S, B]), w0(() => {
    e && e.trim() ? C(N(e)) : C("");
  }, [e, N]), w0(() => {
    requestAnimationFrame(() => {
      U(S);
    });
  }, [S, U]), w0(() => {
    if (F.current) {
      const te = eo(F.current);
      return () => {
        te(), k.current && clearTimeout(k.current);
      };
    }
  }, []), /* @__PURE__ */ Ie.jsx(Ie.Fragment, {
    children: /* @__PURE__ */ Ie.jsxs("div", {
      ...T,
      ref: F,
      className: _r(T.className, "ms-gr-markdown", u === "dark" && "dark"),
      dir: s ? "rtl" : "ltr",
      children: [c ? /* @__PURE__ */ Ie.jsxs("div", {
        className: "ms-gr-markdown-copy",
        onClick: () => {
          j();
        },
        children: [/* @__PURE__ */ Ie.jsx("div", {
          style: {
            display: "none"
          },
          children: b
        }), X()]
      }) : null, /* @__PURE__ */ Ie.jsx("span", {
        className: _r("md prose"),
        ref: E,
        dangerouslySetInnerHTML: {
          __html: S
        }
      })]
    })
  });
});
export {
  so as Markdown,
  so as default
};
